
diody_RGB_WS2812B_kreciolki.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  08009750  08009750  00019750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cd0  08009cd0  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08009cd0  08009cd0  00019cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cd8  08009cd8  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cd8  08009cd8  00019cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cdc  08009cdc  00019cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08009ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000020c  08009eec  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  08009eec  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012dda  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002920  00000000  00000000  00033016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00035938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00036998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286e4  00000000  00000000  000378e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014408  00000000  00000000  0005ffcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5d5e  00000000  00000000  000743d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a132  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005408  00000000  00000000  0016a184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009734 	.word	0x08009734

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	08009734 	.word	0x08009734

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_DMA_Init+0x38>)
 8000ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <MX_DMA_Init+0x38>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6493      	str	r3, [r2, #72]	; 0x48
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_DMA_Init+0x38>)
 8000ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2010      	movs	r0, #16
 8000ef0:	f001 f9f3 	bl	80022da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000ef4:	2010      	movs	r0, #16
 8000ef6:	f001 fa0c 	bl	8002312 <HAL_NVIC_EnableIRQ>

}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a2e      	ldr	r2, [pc, #184]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a28      	ldr	r2, [pc, #160]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a22      	ldr	r2, [pc, #136]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_GPIO_Init+0xd4>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2120      	movs	r1, #32
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f001 fd81 	bl	8002a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f90:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480f      	ldr	r0, [pc, #60]	; (8000fe0 <MX_GPIO_Init+0xd8>)
 8000fa2:	f001 fbc9 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fa6:	2320      	movs	r3, #32
 8000fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc0:	f001 fbba 	bl	8002738 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2103      	movs	r1, #3
 8000fc8:	2028      	movs	r0, #40	; 0x28
 8000fca:	f001 f986 	bl	80022da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fce:	2028      	movs	r0, #40	; 0x28
 8000fd0:	f001 f99f 	bl	8002312 <HAL_NVIC_EnableIRQ>

}
 8000fd4:	bf00      	nop
 8000fd6:	3728      	adds	r7, #40	; 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	48000800 	.word	0x48000800

08000fe4 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b0a      	cmp	r3, #10
 8000ff0:	d102      	bne.n	8000ff8 <__io_putchar+0x14>
    __io_putchar('\r');
 8000ff2:	200d      	movs	r0, #13
 8000ff4:	f7ff fff6 	bl	8000fe4 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000ff8:	1d39      	adds	r1, r7, #4
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	2201      	movs	r2, #1
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <__io_putchar+0x2c>)
 8001002:	f004 ffcb 	bl	8005f9c <HAL_UART_Transmit>

  return 1;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200003f0 	.word	0x200003f0

08001014 <HAL_GPIO_EXTI_Callback>:
    } else {
      return false;
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]

	stan++;
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_GPIO_EXTI_Callback+0x30>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <HAL_GPIO_EXTI_Callback+0x30>)
 8001028:	701a      	strb	r2, [r3, #0]
	if(stan > 6){
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_GPIO_EXTI_Callback+0x30>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <HAL_GPIO_EXTI_Callback+0x24>
		stan = 0;
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <HAL_GPIO_EXTI_Callback+0x30>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
	}
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000228 	.word	0x20000228

08001048 <efektDiody_1>:

void efektDiody_1(void){
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
	  while(1){
		  uint8_t r = gamma8[rand() % 256];
 800104e:	f006 fa85 	bl	800755c <rand>
 8001052:	4603      	mov	r3, r0
 8001054:	425a      	negs	r2, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	bf58      	it	pl
 800105c:	4253      	negpl	r3, r2
 800105e:	4a27      	ldr	r2, [pc, #156]	; (80010fc <efektDiody_1+0xb4>)
 8001060:	5cd3      	ldrb	r3, [r2, r3]
 8001062:	71fb      	strb	r3, [r7, #7]
		  uint8_t g = gamma8[rand() % 256];
 8001064:	f006 fa7a 	bl	800755c <rand>
 8001068:	4603      	mov	r3, r0
 800106a:	425a      	negs	r2, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	bf58      	it	pl
 8001072:	4253      	negpl	r3, r2
 8001074:	4a21      	ldr	r2, [pc, #132]	; (80010fc <efektDiody_1+0xb4>)
 8001076:	5cd3      	ldrb	r3, [r2, r3]
 8001078:	71bb      	strb	r3, [r7, #6]
		  uint8_t b = gamma8[rand() % 256];
 800107a:	f006 fa6f 	bl	800755c <rand>
 800107e:	4603      	mov	r3, r0
 8001080:	425a      	negs	r2, r3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	bf58      	it	pl
 8001088:	4253      	negpl	r3, r2
 800108a:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <efektDiody_1+0xb4>)
 800108c:	5cd3      	ldrb	r3, [r2, r3]
 800108e:	717b      	strb	r3, [r7, #5]

		  for (int led = 0; led < 7; led++) {
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e00d      	b.n	80010b2 <efektDiody_1+0x6a>
			  ws2812b_set_color(led, r, g, b);
 8001096:	79f9      	ldrb	r1, [r7, #7]
 8001098:	79ba      	ldrb	r2, [r7, #6]
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f000 ff41 	bl	8001f24 <ws2812b_set_color>
			  ws2812b_update();
 80010a2:	f000 ff05 	bl	8001eb0 <ws2812b_update>
			  HAL_Delay(50);
 80010a6:	2032      	movs	r0, #50	; 0x32
 80010a8:	f001 f818 	bl	80020dc <HAL_Delay>
		  for (int led = 0; led < 7; led++) {
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3301      	adds	r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2b06      	cmp	r3, #6
 80010b6:	ddee      	ble.n	8001096 <efektDiody_1+0x4e>
		  }
		  HAL_Delay(200);
 80010b8:	20c8      	movs	r0, #200	; 0xc8
 80010ba:	f001 f80f 	bl	80020dc <HAL_Delay>
		  for (int led = 0; led < 7; led++) {
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	e00d      	b.n	80010e0 <efektDiody_1+0x98>
			  ws2812b_set_color(led, 0, 0, 0);
 80010c4:	2300      	movs	r3, #0
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	68b8      	ldr	r0, [r7, #8]
 80010cc:	f000 ff2a 	bl	8001f24 <ws2812b_set_color>
			  ws2812b_update();
 80010d0:	f000 feee 	bl	8001eb0 <ws2812b_update>
			  HAL_Delay(50);
 80010d4:	2032      	movs	r0, #50	; 0x32
 80010d6:	f001 f801 	bl	80020dc <HAL_Delay>
		  for (int led = 0; led < 7; led++) {
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	3301      	adds	r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	ddee      	ble.n	80010c4 <efektDiody_1+0x7c>
		  }
		  if(stan != 1){
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <efektDiody_1+0xb8>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d100      	bne.n	80010f0 <efektDiody_1+0xa8>
	  while(1){
 80010ee:	e7ae      	b.n	800104e <efektDiody_1+0x6>
			  break;
 80010f0:	bf00      	nop
		  }
	  }
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	08009750 	.word	0x08009750
 8001100:	20000228 	.word	0x20000228

08001104 <efektDiody_3>:

void efektDiody_3(void){
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
	  while(1){

		  for (int led = 0; led < 7; led++) {
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	e02e      	b.n	800116e <efektDiody_3+0x6a>
			  uint8_t r = gamma8[rand() % 256];
 8001110:	f006 fa24 	bl	800755c <rand>
 8001114:	4603      	mov	r3, r0
 8001116:	425a      	negs	r2, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	bf58      	it	pl
 800111e:	4253      	negpl	r3, r2
 8001120:	4a25      	ldr	r2, [pc, #148]	; (80011b8 <efektDiody_3+0xb4>)
 8001122:	5cd3      	ldrb	r3, [r2, r3]
 8001124:	71fb      	strb	r3, [r7, #7]
			  uint8_t g = gamma8[rand() % 256];
 8001126:	f006 fa19 	bl	800755c <rand>
 800112a:	4603      	mov	r3, r0
 800112c:	425a      	negs	r2, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	bf58      	it	pl
 8001134:	4253      	negpl	r3, r2
 8001136:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <efektDiody_3+0xb4>)
 8001138:	5cd3      	ldrb	r3, [r2, r3]
 800113a:	71bb      	strb	r3, [r7, #6]
			  uint8_t b = gamma8[rand() % 256];
 800113c:	f006 fa0e 	bl	800755c <rand>
 8001140:	4603      	mov	r3, r0
 8001142:	425a      	negs	r2, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	bf58      	it	pl
 800114a:	4253      	negpl	r3, r2
 800114c:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <efektDiody_3+0xb4>)
 800114e:	5cd3      	ldrb	r3, [r2, r3]
 8001150:	717b      	strb	r3, [r7, #5]

			  ws2812b_set_color(led, r, g, b);
 8001152:	79f9      	ldrb	r1, [r7, #7]
 8001154:	79ba      	ldrb	r2, [r7, #6]
 8001156:	797b      	ldrb	r3, [r7, #5]
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 fee3 	bl	8001f24 <ws2812b_set_color>
			  ws2812b_update();
 800115e:	f000 fea7 	bl	8001eb0 <ws2812b_update>
			  HAL_Delay(50);
 8001162:	2032      	movs	r0, #50	; 0x32
 8001164:	f000 ffba 	bl	80020dc <HAL_Delay>
		  for (int led = 0; led < 7; led++) {
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3301      	adds	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2b06      	cmp	r3, #6
 8001172:	ddcd      	ble.n	8001110 <efektDiody_3+0xc>
		  }
		  HAL_Delay(200);
 8001174:	20c8      	movs	r0, #200	; 0xc8
 8001176:	f000 ffb1 	bl	80020dc <HAL_Delay>
		  for (int led = 0; led < 7; led++) {
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	e00d      	b.n	800119c <efektDiody_3+0x98>
			  ws2812b_set_color(led, 0, 0, 0);
 8001180:	2300      	movs	r3, #0
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	68b8      	ldr	r0, [r7, #8]
 8001188:	f000 fecc 	bl	8001f24 <ws2812b_set_color>
			  ws2812b_update();
 800118c:	f000 fe90 	bl	8001eb0 <ws2812b_update>
			  HAL_Delay(50);
 8001190:	2032      	movs	r0, #50	; 0x32
 8001192:	f000 ffa3 	bl	80020dc <HAL_Delay>
		  for (int led = 0; led < 7; led++) {
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	3301      	adds	r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	2b06      	cmp	r3, #6
 80011a0:	ddee      	ble.n	8001180 <efektDiody_3+0x7c>
		  }
		  if(stan != 3){
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <efektDiody_3+0xb8>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d100      	bne.n	80011ac <efektDiody_3+0xa8>
		  for (int led = 0; led < 7; led++) {
 80011aa:	e7ae      	b.n	800110a <efektDiody_3+0x6>
			  break;
 80011ac:	bf00      	nop
		  }
	  }
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	08009750 	.word	0x08009750
 80011bc:	20000228 	.word	0x20000228

080011c0 <efektDiody_5>:

void efektDiody_5(void){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
	  while(1){
		  for (int led = 6; led >= 0; led-=2) {
 80011c6:	2306      	movs	r3, #6
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	e02e      	b.n	800122a <efektDiody_5+0x6a>
			  uint8_t r = gamma8[rand() % 256];
 80011cc:	f006 f9c6 	bl	800755c <rand>
 80011d0:	4603      	mov	r3, r0
 80011d2:	425a      	negs	r2, r3
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	bf58      	it	pl
 80011da:	4253      	negpl	r3, r2
 80011dc:	4a3f      	ldr	r2, [pc, #252]	; (80012dc <efektDiody_5+0x11c>)
 80011de:	5cd3      	ldrb	r3, [r2, r3]
 80011e0:	723b      	strb	r3, [r7, #8]
			  uint8_t g = gamma8[rand() % 256];
 80011e2:	f006 f9bb 	bl	800755c <rand>
 80011e6:	4603      	mov	r3, r0
 80011e8:	425a      	negs	r2, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	bf58      	it	pl
 80011f0:	4253      	negpl	r3, r2
 80011f2:	4a3a      	ldr	r2, [pc, #232]	; (80012dc <efektDiody_5+0x11c>)
 80011f4:	5cd3      	ldrb	r3, [r2, r3]
 80011f6:	71fb      	strb	r3, [r7, #7]
			  uint8_t b = gamma8[rand() % 256];
 80011f8:	f006 f9b0 	bl	800755c <rand>
 80011fc:	4603      	mov	r3, r0
 80011fe:	425a      	negs	r2, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	bf58      	it	pl
 8001206:	4253      	negpl	r3, r2
 8001208:	4a34      	ldr	r2, [pc, #208]	; (80012dc <efektDiody_5+0x11c>)
 800120a:	5cd3      	ldrb	r3, [r2, r3]
 800120c:	71bb      	strb	r3, [r7, #6]

			  ws2812b_set_color(led, r, g, b);
 800120e:	7a39      	ldrb	r1, [r7, #8]
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	6978      	ldr	r0, [r7, #20]
 8001216:	f000 fe85 	bl	8001f24 <ws2812b_set_color>
			  ws2812b_update();
 800121a:	f000 fe49 	bl	8001eb0 <ws2812b_update>
			  HAL_Delay(50);
 800121e:	2032      	movs	r0, #50	; 0x32
 8001220:	f000 ff5c 	bl	80020dc <HAL_Delay>
		  for (int led = 6; led >= 0; led-=2) {
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	3b02      	subs	r3, #2
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2b00      	cmp	r3, #0
 800122e:	dacd      	bge.n	80011cc <efektDiody_5+0xc>
		  }
		  for (int led = 1; led <=5 ; led+=2) {
 8001230:	2301      	movs	r3, #1
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	e02e      	b.n	8001294 <efektDiody_5+0xd4>
			  uint8_t r = gamma8[rand() % 256];
 8001236:	f006 f991 	bl	800755c <rand>
 800123a:	4603      	mov	r3, r0
 800123c:	425a      	negs	r2, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	bf58      	it	pl
 8001244:	4253      	negpl	r3, r2
 8001246:	4a25      	ldr	r2, [pc, #148]	; (80012dc <efektDiody_5+0x11c>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	72fb      	strb	r3, [r7, #11]
			  uint8_t g = gamma8[rand() % 256];
 800124c:	f006 f986 	bl	800755c <rand>
 8001250:	4603      	mov	r3, r0
 8001252:	425a      	negs	r2, r3
 8001254:	b2db      	uxtb	r3, r3
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	bf58      	it	pl
 800125a:	4253      	negpl	r3, r2
 800125c:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <efektDiody_5+0x11c>)
 800125e:	5cd3      	ldrb	r3, [r2, r3]
 8001260:	72bb      	strb	r3, [r7, #10]
			  uint8_t b = gamma8[rand() % 256];
 8001262:	f006 f97b 	bl	800755c <rand>
 8001266:	4603      	mov	r3, r0
 8001268:	425a      	negs	r2, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	bf58      	it	pl
 8001270:	4253      	negpl	r3, r2
 8001272:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <efektDiody_5+0x11c>)
 8001274:	5cd3      	ldrb	r3, [r2, r3]
 8001276:	727b      	strb	r3, [r7, #9]

			  ws2812b_set_color(led, r, g, b);
 8001278:	7af9      	ldrb	r1, [r7, #11]
 800127a:	7aba      	ldrb	r2, [r7, #10]
 800127c:	7a7b      	ldrb	r3, [r7, #9]
 800127e:	6938      	ldr	r0, [r7, #16]
 8001280:	f000 fe50 	bl	8001f24 <ws2812b_set_color>
			  ws2812b_update();
 8001284:	f000 fe14 	bl	8001eb0 <ws2812b_update>
			  HAL_Delay(50);
 8001288:	2032      	movs	r0, #50	; 0x32
 800128a:	f000 ff27 	bl	80020dc <HAL_Delay>
		  for (int led = 1; led <=5 ; led+=2) {
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	3302      	adds	r3, #2
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	2b05      	cmp	r3, #5
 8001298:	ddcd      	ble.n	8001236 <efektDiody_5+0x76>
		  }
		  HAL_Delay(200);
 800129a:	20c8      	movs	r0, #200	; 0xc8
 800129c:	f000 ff1e 	bl	80020dc <HAL_Delay>
		  for (int led = 0; led < 7; led++) {
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	e00d      	b.n	80012c2 <efektDiody_5+0x102>
			  ws2812b_set_color(led, 0, 0, 0);
 80012a6:	2300      	movs	r3, #0
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 fe39 	bl	8001f24 <ws2812b_set_color>
			  ws2812b_update();
 80012b2:	f000 fdfd 	bl	8001eb0 <ws2812b_update>
			  HAL_Delay(50);
 80012b6:	2032      	movs	r0, #50	; 0x32
 80012b8:	f000 ff10 	bl	80020dc <HAL_Delay>
		  for (int led = 0; led < 7; led++) {
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	3301      	adds	r3, #1
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b06      	cmp	r3, #6
 80012c6:	ddee      	ble.n	80012a6 <efektDiody_5+0xe6>
		  }
		  if(stan != 5){
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <efektDiody_5+0x120>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b05      	cmp	r3, #5
 80012ce:	d100      	bne.n	80012d2 <efektDiody_5+0x112>
		  for (int led = 6; led >= 0; led-=2) {
 80012d0:	e779      	b.n	80011c6 <efektDiody_5+0x6>
			  break;
 80012d2:	bf00      	nop
		  }
	  }
}
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	08009750 	.word	0x08009750
 80012e0:	20000228 	.word	0x20000228

080012e4 <line_append>:
static char line_buffer[LINE_MAX_LENGTH + 1];
uint32_t line_length;
int line_append_done = 0;

void line_append(uint8_t value)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	if (value == '\r' || value == '\n') {
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2b0d      	cmp	r3, #13
 80012f2:	d002      	beq.n	80012fa <line_append+0x16>
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b0a      	cmp	r3, #10
 80012f8:	d144      	bne.n	8001384 <line_append+0xa0>
		// odebraliśmy znak końca linii
		if (line_length > 0) {
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <line_append+0xd0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d053      	beq.n	80013aa <line_append+0xc6>
			line_buffer[line_length] = '\0';
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <line_append+0xd0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a2c      	ldr	r2, [pc, #176]	; (80013b8 <line_append+0xd4>)
 8001308:	2100      	movs	r1, #0
 800130a:	54d1      	strb	r1, [r2, r3]
			// przetwarzamy dane
			printf("%s\n", line_buffer); // wysyła na oba uarty
 800130c:	482a      	ldr	r0, [pc, #168]	; (80013b8 <line_append+0xd4>)
 800130e:	f006 f91d 	bl	800754c <puts>
			if(!strcmp(&line_buffer,&czerwona)){
 8001312:	492a      	ldr	r1, [pc, #168]	; (80013bc <line_append+0xd8>)
 8001314:	4828      	ldr	r0, [pc, #160]	; (80013b8 <line_append+0xd4>)
 8001316:	f7fe ff5b 	bl	80001d0 <strcmp>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <line_append+0x42>
							stan = 0;
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <line_append+0xdc>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]


			  }
			if(!strcmp(&line_buffer,&niebieska)){
 8001326:	4927      	ldr	r1, [pc, #156]	; (80013c4 <line_append+0xe0>)
 8001328:	4823      	ldr	r0, [pc, #140]	; (80013b8 <line_append+0xd4>)
 800132a:	f7fe ff51 	bl	80001d0 <strcmp>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <line_append+0x56>
							stan = 4;
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <line_append+0xdc>)
 8001336:	2204      	movs	r2, #4
 8001338:	701a      	strb	r2, [r3, #0]
			  }
			if(!strcmp(&line_buffer,&zielona)){
 800133a:	4923      	ldr	r1, [pc, #140]	; (80013c8 <line_append+0xe4>)
 800133c:	481e      	ldr	r0, [pc, #120]	; (80013b8 <line_append+0xd4>)
 800133e:	f7fe ff47 	bl	80001d0 <strcmp>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <line_append+0x6a>
				 stan = 2;
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <line_append+0xdc>)
 800134a:	2202      	movs	r2, #2
 800134c:	701a      	strb	r2, [r3, #0]
			  }
			if(!strcmp(&line_buffer,&biala)){
 800134e:	491f      	ldr	r1, [pc, #124]	; (80013cc <line_append+0xe8>)
 8001350:	4819      	ldr	r0, [pc, #100]	; (80013b8 <line_append+0xd4>)
 8001352:	f7fe ff3d 	bl	80001d0 <strcmp>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <line_append+0x7e>
							stan = 7;
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <line_append+0xdc>)
 800135e:	2207      	movs	r2, #7
 8001360:	701a      	strb	r2, [r3, #0]
			  }
			if(!strcmp(&line_buffer,&wylacz)){
 8001362:	491b      	ldr	r1, [pc, #108]	; (80013d0 <line_append+0xec>)
 8001364:	4814      	ldr	r0, [pc, #80]	; (80013b8 <line_append+0xd4>)
 8001366:	f7fe ff33 	bl	80001d0 <strcmp>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <line_append+0x92>
							stan = 6;
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <line_append+0xdc>)
 8001372:	2206      	movs	r2, #6
 8001374:	701a      	strb	r2, [r3, #0]
			  }



			line_append_done = 1;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <line_append+0xf0>)
 8001378:	2201      	movs	r2, #1
 800137a:	601a      	str	r2, [r3, #0]
			line_length = 0;
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <line_append+0xd0>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
		if (line_length > 0) {
 8001382:	e012      	b.n	80013aa <line_append+0xc6>
		}
	}
	else {
		line_append_done = 0;
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <line_append+0xf0>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
		if (line_length >= LINE_MAX_LENGTH) {
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <line_append+0xd0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b4f      	cmp	r3, #79	; 0x4f
 8001390:	d902      	bls.n	8001398 <line_append+0xb4>
			line_length = 0;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <line_append+0xd0>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
		}
		line_buffer[line_length++] = value;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <line_append+0xd0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	4905      	ldr	r1, [pc, #20]	; (80013b4 <line_append+0xd0>)
 80013a0:	600a      	str	r2, [r1, #0]
 80013a2:	4905      	ldr	r1, [pc, #20]	; (80013b8 <line_append+0xd4>)
 80013a4:	79fa      	ldrb	r2, [r7, #7]
 80013a6:	54ca      	strb	r2, [r1, r3]
	}
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000280 	.word	0x20000280
 80013b8:	2000022c 	.word	0x2000022c
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000228 	.word	0x20000228
 80013c4:	2000000c 	.word	0x2000000c
 80013c8:	20000018 	.word	0x20000018
 80013cc:	20000020 	.word	0x20000020
 80013d0:	20000028 	.word	0x20000028
 80013d4:	20000284 	.word	0x20000284

080013d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013de:	f000 fe01 	bl	8001fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e2:	f000 f8a1 	bl	8001528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e6:	f7ff fd8f 	bl	8000f08 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ea:	f7ff fd6f 	bl	8000ecc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013ee:	f000 fc5d 	bl	8001cac <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80013f2:	f000 fad1 	bl	8001998 <MX_TIM3_Init>
  MX_TIM2_Init();
 80013f6:	f000 fa25 	bl	8001844 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80013fa:	f000 fc27 	bl	8001c4c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ws2812b_init();
 80013fe:	f000 fd27 	bl	8001e50 <ws2812b_init>


  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1); // inicjalizacja liczników
 8001402:	2100      	movs	r1, #0
 8001404:	4845      	ldr	r0, [pc, #276]	; (800151c <main+0x144>)
 8001406:	f003 fb3b 	bl	8004a80 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 800140a:	2104      	movs	r1, #4
 800140c:	4843      	ldr	r0, [pc, #268]	; (800151c <main+0x144>)
 800140e:	f003 fb37 	bl	8004a80 <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // inicjalizacja pwm
 8001412:	2108      	movs	r1, #8
 8001414:	4841      	ldr	r0, [pc, #260]	; (800151c <main+0x144>)
 8001416:	f002 ffab 	bl	8004370 <HAL_TIM_PWM_Start>
  HAL_Delay(1000);
 800141a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800141e:	f000 fe5d 	bl	80020dc <HAL_Delay>

  float odleglosc_stara = 0.0f;
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	607b      	str	r3, [r7, #4]
  float odleglosc;
  uint8_t value;
  while (1)
  {
	  if (HAL_UART_Receive(&huart1, (uint8_t*)&value, sizeof(value), 0) == HAL_OK){
 8001428:	1cf9      	adds	r1, r7, #3
 800142a:	2300      	movs	r3, #0
 800142c:	2201      	movs	r2, #1
 800142e:	483c      	ldr	r0, [pc, #240]	; (8001520 <main+0x148>)
 8001430:	f004 fe48 	bl	80060c4 <HAL_UART_Receive>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <main+0x6a>

	  		  line_append(value);
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff51 	bl	80012e4 <line_append>
//	    HAL_Delay(100);
//	  }



	  switch(stan){
 8001442:	4b38      	ldr	r3, [pc, #224]	; (8001524 <main+0x14c>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b07      	cmp	r3, #7
 8001448:	d866      	bhi.n	8001518 <main+0x140>
 800144a:	a201      	add	r2, pc, #4	; (adr r2, 8001450 <main+0x78>)
 800144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001450:	08001471 	.word	0x08001471
 8001454:	08001495 	.word	0x08001495
 8001458:	0800149b 	.word	0x0800149b
 800145c:	080014bf 	.word	0x080014bf
 8001460:	080014c5 	.word	0x080014c5
 8001464:	080014e9 	.word	0x080014e9
 8001468:	080014ef 	.word	0x080014ef
 800146c:	080014f5 	.word	0x080014f5
	  case 0:
		  for (int led = 0; led < 7; led++) {
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e00a      	b.n	800148c <main+0xb4>
		      ws2812b_set_color(led, 255, 0, 0);
 8001476:	2300      	movs	r3, #0
 8001478:	2200      	movs	r2, #0
 800147a:	21ff      	movs	r1, #255	; 0xff
 800147c:	6978      	ldr	r0, [r7, #20]
 800147e:	f000 fd51 	bl	8001f24 <ws2812b_set_color>
		      ws2812b_update();
 8001482:	f000 fd15 	bl	8001eb0 <ws2812b_update>
		  for (int led = 0; led < 7; led++) {
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3301      	adds	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2b06      	cmp	r3, #6
 8001490:	ddf1      	ble.n	8001476 <main+0x9e>
		  }
		  break;
 8001492:	e042      	b.n	800151a <main+0x142>
	  case 1:
		  efektDiody_1();
 8001494:	f7ff fdd8 	bl	8001048 <efektDiody_1>
		  break;
 8001498:	e03f      	b.n	800151a <main+0x142>
	  case 2:
		  for (int led = 0; led < 7; led++) {
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	e00a      	b.n	80014b6 <main+0xde>
		      ws2812b_set_color(led, 0, 255, 0);
 80014a0:	2300      	movs	r3, #0
 80014a2:	22ff      	movs	r2, #255	; 0xff
 80014a4:	2100      	movs	r1, #0
 80014a6:	6938      	ldr	r0, [r7, #16]
 80014a8:	f000 fd3c 	bl	8001f24 <ws2812b_set_color>
		      ws2812b_update();
 80014ac:	f000 fd00 	bl	8001eb0 <ws2812b_update>
		  for (int led = 0; led < 7; led++) {
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	3301      	adds	r3, #1
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	2b06      	cmp	r3, #6
 80014ba:	ddf1      	ble.n	80014a0 <main+0xc8>
		  }
		  break;
 80014bc:	e02d      	b.n	800151a <main+0x142>
	  case 3:
		  efektDiody_3();
 80014be:	f7ff fe21 	bl	8001104 <efektDiody_3>
		  break;
 80014c2:	e02a      	b.n	800151a <main+0x142>
	  case 4:
		  for (int led = 0; led < 7; led++) {
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	e00a      	b.n	80014e0 <main+0x108>
		      ws2812b_set_color(led, 0, 0, 255);
 80014ca:	23ff      	movs	r3, #255	; 0xff
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 fd27 	bl	8001f24 <ws2812b_set_color>
		      ws2812b_update();
 80014d6:	f000 fceb 	bl	8001eb0 <ws2812b_update>
		  for (int led = 0; led < 7; led++) {
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3301      	adds	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	ddf1      	ble.n	80014ca <main+0xf2>
		  }
		  break;
 80014e6:	e018      	b.n	800151a <main+0x142>
	  case 5:
		  efektDiody_5();
 80014e8:	f7ff fe6a 	bl	80011c0 <efektDiody_5>
		  break;
 80014ec:	e015      	b.n	800151a <main+0x142>
	  case 6:
		  ws2812b_init();
 80014ee:	f000 fcaf 	bl	8001e50 <ws2812b_init>
		  break;
 80014f2:	e012      	b.n	800151a <main+0x142>
	  case 7:
		  for (int led = 0; led < 7; led++) {
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	e00a      	b.n	8001510 <main+0x138>
		      ws2812b_set_color(led, 255, 255, 255);
 80014fa:	23ff      	movs	r3, #255	; 0xff
 80014fc:	22ff      	movs	r2, #255	; 0xff
 80014fe:	21ff      	movs	r1, #255	; 0xff
 8001500:	68b8      	ldr	r0, [r7, #8]
 8001502:	f000 fd0f 	bl	8001f24 <ws2812b_set_color>
		      ws2812b_update();
 8001506:	f000 fcd3 	bl	8001eb0 <ws2812b_update>
		  for (int led = 0; led < 7; led++) {
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3301      	adds	r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b06      	cmp	r3, #6
 8001514:	ddf1      	ble.n	80014fa <main+0x122>
		  }
		  break;
 8001516:	e000      	b.n	800151a <main+0x142>
	  default:
		  break;
 8001518:	bf00      	nop
	  if (HAL_UART_Receive(&huart1, (uint8_t*)&value, sizeof(value), 0) == HAL_OK){
 800151a:	e785      	b.n	8001428 <main+0x50>
 800151c:	2000028c 	.word	0x2000028c
 8001520:	2000036c 	.word	0x2000036c
 8001524:	20000228 	.word	0x20000228

08001528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b096      	sub	sp, #88	; 0x58
 800152c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	2244      	movs	r2, #68	; 0x44
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f005 fb28 	bl	8006b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153c:	463b      	mov	r3, r7
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800154a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800154e:	f001 fadb 	bl	8002b08 <HAL_PWREx_ControlVoltageScaling>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001558:	f000 f837 	bl	80015ca <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800155c:	2302      	movs	r3, #2
 800155e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001564:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001566:	2310      	movs	r3, #16
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156a:	2302      	movs	r3, #2
 800156c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800156e:	2302      	movs	r3, #2
 8001570:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001572:	2301      	movs	r3, #1
 8001574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001576:	230a      	movs	r3, #10
 8001578:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800157a:	2307      	movs	r3, #7
 800157c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800157e:	2302      	movs	r3, #2
 8001580:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001582:	2302      	movs	r3, #2
 8001584:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4618      	mov	r0, r3
 800158c:	f001 fb12 	bl	8002bb4 <HAL_RCC_OscConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001596:	f000 f818 	bl	80015ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159a:	230f      	movs	r3, #15
 800159c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159e:	2303      	movs	r3, #3
 80015a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015ae:	463b      	mov	r3, r7
 80015b0:	2104      	movs	r1, #4
 80015b2:	4618      	mov	r0, r3
 80015b4:	f001 feda 	bl	800336c <HAL_RCC_ClockConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015be:	f000 f804 	bl	80015ca <Error_Handler>
  }
}
 80015c2:	bf00      	nop
 80015c4:	3758      	adds	r7, #88	; 0x58
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ce:	b672      	cpsid	i
}
 80015d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <Error_Handler+0x8>

080015d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_MspInit+0x44>)
 80015dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015de:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <HAL_MspInit+0x44>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6613      	str	r3, [r2, #96]	; 0x60
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_MspInit+0x44>)
 80015e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_MspInit+0x44>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HAL_MspInit+0x44>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	6593      	str	r3, [r2, #88]	; 0x58
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_MspInit+0x44>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <NMI_Handler+0x4>

08001622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <MemManage_Handler+0x4>

0800162e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <UsageFault_Handler+0x4>

0800163a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001668:	f000 fd18 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <DMA1_Channel6_IRQHandler+0x10>)
 8001676:	f000 ff7f 	bl	8002578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000324 	.word	0x20000324

08001684 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001688:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800168c:	f001 fa16 	bl	8002abc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
	return 1;
 8001698:	2301      	movs	r3, #1
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_kill>:

int _kill(int pid, int sig)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016ae:	f005 fa43 	bl	8006b38 <__errno>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2216      	movs	r2, #22
 80016b6:	601a      	str	r2, [r3, #0]
	return -1;
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_exit>:

void _exit (int status)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ffe7 	bl	80016a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016d6:	e7fe      	b.n	80016d6 <_exit+0x12>

080016d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	e00a      	b.n	8001700 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016ea:	f3af 8000 	nop.w
 80016ee:	4601      	mov	r1, r0
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	60ba      	str	r2, [r7, #8]
 80016f6:	b2ca      	uxtb	r2, r1
 80016f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	dbf0      	blt.n	80016ea <_read+0x12>
	}

return len;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	60f8      	str	r0, [r7, #12]
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	e009      	b.n	8001738 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	60ba      	str	r2, [r7, #8]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fc59 	bl	8000fe4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	429a      	cmp	r2, r3
 800173e:	dbf1      	blt.n	8001724 <_write+0x12>
	}
	return len;
 8001740:	687b      	ldr	r3, [r7, #4]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_close>:

int _close(int file)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
	return -1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001772:	605a      	str	r2, [r3, #4]
	return 0;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <_isatty>:

int _isatty(int file)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
	return 1;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
	return 0;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017bc:	4a14      	ldr	r2, [pc, #80]	; (8001810 <_sbrk+0x5c>)
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <_sbrk+0x60>)
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d102      	bne.n	80017d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <_sbrk+0x64>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <_sbrk+0x68>)
 80017d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d207      	bcs.n	80017f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e4:	f005 f9a8 	bl	8006b38 <__errno>
 80017e8:	4603      	mov	r3, r0
 80017ea:	220c      	movs	r2, #12
 80017ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
 80017f2:	e009      	b.n	8001808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <_sbrk+0x64>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <_sbrk+0x64>)
 8001804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001806:	68fb      	ldr	r3, [r7, #12]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20018000 	.word	0x20018000
 8001814:	00000400 	.word	0x00000400
 8001818:	20000288 	.word	0x20000288
 800181c:	20000560 	.word	0x20000560

08001820 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <SystemInit+0x20>)
 8001826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800182a:	4a05      	ldr	r2, [pc, #20]	; (8001840 <SystemInit+0x20>)
 800182c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b092      	sub	sp, #72	; 0x48
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001872:	463b      	mov	r3, r7
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
 8001880:	615a      	str	r2, [r3, #20]
 8001882:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001884:	4b42      	ldr	r3, [pc, #264]	; (8001990 <MX_TIM2_Init+0x14c>)
 8001886:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800188a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800188c:	4b40      	ldr	r3, [pc, #256]	; (8001990 <MX_TIM2_Init+0x14c>)
 800188e:	224f      	movs	r2, #79	; 0x4f
 8001890:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <MX_TIM2_Init+0x14c>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8001898:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <MX_TIM2_Init+0x14c>)
 800189a:	4a3e      	ldr	r2, [pc, #248]	; (8001994 <MX_TIM2_Init+0x150>)
 800189c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189e:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <MX_TIM2_Init+0x14c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a4:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <MX_TIM2_Init+0x14c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018aa:	4839      	ldr	r0, [pc, #228]	; (8001990 <MX_TIM2_Init+0x14c>)
 80018ac:	f002 fc3e 	bl	800412c <HAL_TIM_Base_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80018b6:	f7ff fe88 	bl	80015ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018c4:	4619      	mov	r1, r3
 80018c6:	4832      	ldr	r0, [pc, #200]	; (8001990 <MX_TIM2_Init+0x14c>)
 80018c8:	f003 fb86 	bl	8004fd8 <HAL_TIM_ConfigClockSource>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80018d2:	f7ff fe7a 	bl	80015ca <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80018d6:	482e      	ldr	r0, [pc, #184]	; (8001990 <MX_TIM2_Init+0x14c>)
 80018d8:	f003 f870 	bl	80049bc <HAL_TIM_IC_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80018e2:	f7ff fe72 	bl	80015ca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018e6:	482a      	ldr	r0, [pc, #168]	; (8001990 <MX_TIM2_Init+0x14c>)
 80018e8:	f002 fce0 	bl	80042ac <HAL_TIM_PWM_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80018f2:	f7ff fe6a 	bl	80015ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001902:	4619      	mov	r1, r3
 8001904:	4822      	ldr	r0, [pc, #136]	; (8001990 <MX_TIM2_Init+0x14c>)
 8001906:	f004 fa73 	bl	8005df0 <HAL_TIMEx_MasterConfigSynchronization>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8001910:	f7ff fe5b 	bl	80015ca <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001918:	2301      	movs	r3, #1
 800191a:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	2200      	movs	r2, #0
 800192a:	4619      	mov	r1, r3
 800192c:	4818      	ldr	r0, [pc, #96]	; (8001990 <MX_TIM2_Init+0x14c>)
 800192e:	f003 f9a3 	bl	8004c78 <HAL_TIM_IC_ConfigChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8001938:	f7ff fe47 	bl	80015ca <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800193c:	2302      	movs	r3, #2
 800193e:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001940:	2302      	movs	r3, #2
 8001942:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	2204      	movs	r2, #4
 800194a:	4619      	mov	r1, r3
 800194c:	4810      	ldr	r0, [pc, #64]	; (8001990 <MX_TIM2_Init+0x14c>)
 800194e:	f003 f993 	bl	8004c78 <HAL_TIM_IC_ConfigChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8001958:	f7ff fe37 	bl	80015ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195c:	2360      	movs	r3, #96	; 0x60
 800195e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001960:	230a      	movs	r3, #10
 8001962:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001964:	2300      	movs	r3, #0
 8001966:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800196c:	463b      	mov	r3, r7
 800196e:	2208      	movs	r2, #8
 8001970:	4619      	mov	r1, r3
 8001972:	4807      	ldr	r0, [pc, #28]	; (8001990 <MX_TIM2_Init+0x14c>)
 8001974:	f003 fa1c 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 800197e:	f7ff fe24 	bl	80015ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001982:	4803      	ldr	r0, [pc, #12]	; (8001990 <MX_TIM2_Init+0x14c>)
 8001984:	f000 f906 	bl	8001b94 <HAL_TIM_MspPostInit>

}
 8001988:	bf00      	nop
 800198a:	3748      	adds	r7, #72	; 0x48
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	2000028c 	.word	0x2000028c
 8001994:	0001869f 	.word	0x0001869f

08001998 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08e      	sub	sp, #56	; 0x38
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019b8:	463b      	mov	r3, r7
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]
 80019c6:	615a      	str	r2, [r3, #20]
 80019c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019ca:	4b2c      	ldr	r3, [pc, #176]	; (8001a7c <MX_TIM3_Init+0xe4>)
 80019cc:	4a2c      	ldr	r2, [pc, #176]	; (8001a80 <MX_TIM3_Init+0xe8>)
 80019ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019d0:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <MX_TIM3_Init+0xe4>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d6:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <MX_TIM3_Init+0xe4>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80019dc:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <MX_TIM3_Init+0xe4>)
 80019de:	2263      	movs	r2, #99	; 0x63
 80019e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e2:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <MX_TIM3_Init+0xe4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <MX_TIM3_Init+0xe4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019ee:	4823      	ldr	r0, [pc, #140]	; (8001a7c <MX_TIM3_Init+0xe4>)
 80019f0:	f002 fb9c 	bl	800412c <HAL_TIM_Base_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019fa:	f7ff fde6 	bl	80015ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a08:	4619      	mov	r1, r3
 8001a0a:	481c      	ldr	r0, [pc, #112]	; (8001a7c <MX_TIM3_Init+0xe4>)
 8001a0c:	f003 fae4 	bl	8004fd8 <HAL_TIM_ConfigClockSource>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a16:	f7ff fdd8 	bl	80015ca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a1a:	4818      	ldr	r0, [pc, #96]	; (8001a7c <MX_TIM3_Init+0xe4>)
 8001a1c:	f002 fc46 	bl	80042ac <HAL_TIM_PWM_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a26:	f7ff fdd0 	bl	80015ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	4619      	mov	r1, r3
 8001a38:	4810      	ldr	r0, [pc, #64]	; (8001a7c <MX_TIM3_Init+0xe4>)
 8001a3a:	f004 f9d9 	bl	8005df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a44:	f7ff fdc1 	bl	80015ca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a48:	2360      	movs	r3, #96	; 0x60
 8001a4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4807      	ldr	r0, [pc, #28]	; (8001a7c <MX_TIM3_Init+0xe4>)
 8001a60:	f003 f9a6 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a6a:	f7ff fdae 	bl	80015ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a6e:	4803      	ldr	r0, [pc, #12]	; (8001a7c <MX_TIM3_Init+0xe4>)
 8001a70:	f000 f890 	bl	8001b94 <HAL_TIM_MspPostInit>

}
 8001a74:	bf00      	nop
 8001a76:	3738      	adds	r7, #56	; 0x38
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200002d8 	.word	0x200002d8
 8001a80:	40000400 	.word	0x40000400

08001a84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa4:	d129      	bne.n	8001afa <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aa6:	4b37      	ldr	r3, [pc, #220]	; (8001b84 <HAL_TIM_Base_MspInit+0x100>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	4a36      	ldr	r2, [pc, #216]	; (8001b84 <HAL_TIM_Base_MspInit+0x100>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab2:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <HAL_TIM_Base_MspInit+0x100>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_TIM_Base_MspInit+0x100>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <HAL_TIM_Base_MspInit+0x100>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aca:	4b2e      	ldr	r3, [pc, #184]	; (8001b84 <HAL_TIM_Base_MspInit+0x100>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af4:	f000 fe20 	bl	8002738 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001af8:	e040      	b.n	8001b7c <HAL_TIM_Base_MspInit+0xf8>
  else if(tim_baseHandle->Instance==TIM3)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <HAL_TIM_Base_MspInit+0x104>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d13b      	bne.n	8001b7c <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <HAL_TIM_Base_MspInit+0x100>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_TIM_Base_MspInit+0x100>)
 8001b0a:	f043 0302 	orr.w	r3, r3, #2
 8001b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <HAL_TIM_Base_MspInit+0x100>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_TIM_Base_MspInit+0x108>)
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <HAL_TIM_Base_MspInit+0x10c>)
 8001b20:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_TIM_Base_MspInit+0x108>)
 8001b24:	2205      	movs	r2, #5
 8001b26:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_TIM_Base_MspInit+0x108>)
 8001b2a:	2210      	movs	r2, #16
 8001b2c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_TIM_Base_MspInit+0x108>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_TIM_Base_MspInit+0x108>)
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_TIM_Base_MspInit+0x108>)
 8001b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b40:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_TIM_Base_MspInit+0x108>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_TIM_Base_MspInit+0x108>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_TIM_Base_MspInit+0x108>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001b54:	480d      	ldr	r0, [pc, #52]	; (8001b8c <HAL_TIM_Base_MspInit+0x108>)
 8001b56:	f000 fbf7 	bl	8002348 <HAL_DMA_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_TIM_Base_MspInit+0xe0>
      Error_Handler();
 8001b60:	f7ff fd33 	bl	80015ca <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_TIM_Base_MspInit+0x108>)
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <HAL_TIM_Base_MspInit+0x108>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <HAL_TIM_Base_MspInit+0x108>)
 8001b74:	639a      	str	r2, [r3, #56]	; 0x38
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <HAL_TIM_Base_MspInit+0x108>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001b7c:	bf00      	nop
 8001b7e:	3728      	adds	r7, #40	; 0x28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40000400 	.word	0x40000400
 8001b8c:	20000324 	.word	0x20000324
 8001b90:	4002006c 	.word	0x4002006c

08001b94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb4:	d11d      	bne.n	8001bf2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_TIM_MspPostInit+0xac>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <HAL_TIM_MspPostInit+0xac>)
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_TIM_MspPostInit+0xac>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001be0:	2301      	movs	r3, #1
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	4816      	ldr	r0, [pc, #88]	; (8001c44 <HAL_TIM_MspPostInit+0xb0>)
 8001bec:	f000 fda4 	bl	8002738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bf0:	e021      	b.n	8001c36 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM3)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <HAL_TIM_MspPostInit+0xb4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d11c      	bne.n	8001c36 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_TIM_MspPostInit+0xac>)
 8001bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c00:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <HAL_TIM_MspPostInit+0xac>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_TIM_MspPostInit+0xac>)
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c14:	2340      	movs	r3, #64	; 0x40
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c24:	2302      	movs	r3, #2
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c32:	f000 fd81 	bl	8002738 <HAL_GPIO_Init>
}
 8001c36:	bf00      	nop
 8001c38:	3728      	adds	r7, #40	; 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	48000400 	.word	0x48000400
 8001c48:	40000400 	.word	0x40000400

08001c4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <MX_USART1_UART_Init+0x58>)
 8001c52:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <MX_USART1_UART_Init+0x5c>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <MX_USART1_UART_Init+0x58>)
 8001c58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <MX_USART1_UART_Init+0x58>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <MX_USART1_UART_Init+0x58>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <MX_USART1_UART_Init+0x58>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_USART1_UART_Init+0x58>)
 8001c72:	220c      	movs	r2, #12
 8001c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <MX_USART1_UART_Init+0x58>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_USART1_UART_Init+0x58>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <MX_USART1_UART_Init+0x58>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MX_USART1_UART_Init+0x58>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_USART1_UART_Init+0x58>)
 8001c90:	f004 f936 	bl	8005f00 <HAL_UART_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c9a:	f7ff fc96 	bl	80015ca <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000036c 	.word	0x2000036c
 8001ca8:	40013800 	.word	0x40013800

08001cac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cb0:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cb2:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <MX_USART2_UART_Init+0x5c>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_USART2_UART_Init+0x58>)
 8001cf0:	f004 f906 	bl	8005f00 <HAL_UART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cfa:	f7ff fc66 	bl	80015ca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200003f0 	.word	0x200003f0
 8001d08:	40004400 	.word	0x40004400

08001d0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0ae      	sub	sp, #184	; 0xb8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d24:	f107 031c 	add.w	r3, r7, #28
 8001d28:	2288      	movs	r2, #136	; 0x88
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 ff2d 	bl	8006b8c <memset>
  if(uartHandle->Instance==USART1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a43      	ldr	r2, [pc, #268]	; (8001e44 <HAL_UART_MspInit+0x138>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d13d      	bne.n	8001db8 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d40:	2300      	movs	r3, #0
 8001d42:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d44:	f107 031c 	add.w	r3, r7, #28
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 fd33 	bl	80037b4 <HAL_RCCEx_PeriphCLKConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d54:	f7ff fc39 	bl	80015ca <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d58:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <HAL_UART_MspInit+0x13c>)
 8001d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5c:	4a3a      	ldr	r2, [pc, #232]	; (8001e48 <HAL_UART_MspInit+0x13c>)
 8001d5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d62:	6613      	str	r3, [r2, #96]	; 0x60
 8001d64:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <HAL_UART_MspInit+0x13c>)
 8001d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6c:	61bb      	str	r3, [r7, #24]
 8001d6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	4b35      	ldr	r3, [pc, #212]	; (8001e48 <HAL_UART_MspInit+0x13c>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	4a34      	ldr	r2, [pc, #208]	; (8001e48 <HAL_UART_MspInit+0x13c>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7c:	4b32      	ldr	r3, [pc, #200]	; (8001e48 <HAL_UART_MspInit+0x13c>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001da2:	2307      	movs	r3, #7
 8001da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dac:	4619      	mov	r1, r3
 8001dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001db2:	f000 fcc1 	bl	8002738 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001db6:	e040      	b.n	8001e3a <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a23      	ldr	r2, [pc, #140]	; (8001e4c <HAL_UART_MspInit+0x140>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d13b      	bne.n	8001e3a <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dca:	f107 031c 	add.w	r3, r7, #28
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 fcf0 	bl	80037b4 <HAL_RCCEx_PeriphCLKConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001dda:	f7ff fbf6 	bl	80015ca <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dde:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <HAL_UART_MspInit+0x13c>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <HAL_UART_MspInit+0x13c>)
 8001de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_UART_MspInit+0x13c>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <HAL_UART_MspInit+0x13c>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <HAL_UART_MspInit+0x13c>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_UART_MspInit+0x13c>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e0e:	230c      	movs	r3, #12
 8001e10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e20:	2303      	movs	r3, #3
 8001e22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e26:	2307      	movs	r3, #7
 8001e28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e30:	4619      	mov	r1, r3
 8001e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e36:	f000 fc7f 	bl	8002738 <HAL_GPIO_Init>
}
 8001e3a:	bf00      	nop
 8001e3c:	37b8      	adds	r7, #184	; 0xb8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40013800 	.word	0x40013800
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40004400 	.word	0x40004400

08001e50 <ws2812b_init>:
#define LED_N			7

static uint8_t led_buffer[RESET_LEN + 24 * LED_N + 1];

void ws2812b_init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
  int i;
  for (i = 0; i < RESET_LEN; i++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	e007      	b.n	8001e6c <ws2812b_init+0x1c>
    led_buffer[i] = 0;
 8001e5c:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <ws2812b_init+0x58>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < RESET_LEN; i++)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b27      	cmp	r3, #39	; 0x27
 8001e70:	ddf4      	ble.n	8001e5c <ws2812b_init+0xc>

  for (i = 0; i < 24 * LED_N; i++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	e007      	b.n	8001e88 <ws2812b_init+0x38>
    led_buffer[RESET_LEN + i] = BIT_0_TIME;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3328      	adds	r3, #40	; 0x28
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <ws2812b_init+0x58>)
 8001e7e:	2120      	movs	r1, #32
 8001e80:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 24 * LED_N; i++)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3301      	adds	r3, #1
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2ba7      	cmp	r3, #167	; 0xa7
 8001e8c:	ddf4      	ble.n	8001e78 <ws2812b_init+0x28>

  led_buffer[RESET_LEN + 24 * LED_N] = 0;
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <ws2812b_init+0x58>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0

  HAL_TIM_Base_Start(&htim3);
 8001e96:	4805      	ldr	r0, [pc, #20]	; (8001eac <ws2812b_init+0x5c>)
 8001e98:	f002 f9a0 	bl	80041dc <HAL_TIM_Base_Start>
  ws2812b_update();
 8001e9c:	f000 f808 	bl	8001eb0 <ws2812b_update>
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000474 	.word	0x20000474
 8001eac:	200002d8 	.word	0x200002d8

08001eb0 <ws2812b_update>:

void ws2812b_update(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 8001eb4:	23d1      	movs	r3, #209	; 0xd1
 8001eb6:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <ws2812b_update+0x14>)
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <ws2812b_update+0x18>)
 8001ebc:	f002 fb5e 	bl	800457c <HAL_TIM_PWM_Start_DMA>
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000474 	.word	0x20000474
 8001ec8:	200002d8 	.word	0x200002d8

08001ecc <set_byte>:
	while (HAL_TIM_GetChannelState(&htim3, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_BUSY)
		{}
}

static void set_byte(uint32_t pos, uint8_t value)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  int i;
  for (i = 0; i < 8; i++) {
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	e016      	b.n	8001f0c <set_byte+0x40>
    if (value & 0x80) {
 8001ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	da06      	bge.n	8001ef4 <set_byte+0x28>
      led_buffer[pos + i] = BIT_1_TIME;
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	4a0c      	ldr	r2, [pc, #48]	; (8001f20 <set_byte+0x54>)
 8001eee:	2140      	movs	r1, #64	; 0x40
 8001ef0:	54d1      	strb	r1, [r2, r3]
 8001ef2:	e005      	b.n	8001f00 <set_byte+0x34>
    } else {
      led_buffer[pos + i] = BIT_0_TIME;
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <set_byte+0x54>)
 8001efc:	2120      	movs	r1, #32
 8001efe:	54d1      	strb	r1, [r2, r3]
    }

    value <<= 1;
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	70fb      	strb	r3, [r7, #3]
  for (i = 0; i < 8; i++) {
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b07      	cmp	r3, #7
 8001f10:	dde5      	ble.n	8001ede <set_byte+0x12>
  }
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	20000474 	.word	0x20000474

08001f24 <ws2812b_set_color>:

void ws2812b_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	4608      	mov	r0, r1
 8001f2e:	4611      	mov	r1, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	70fb      	strb	r3, [r7, #3]
 8001f36:	460b      	mov	r3, r1
 8001f38:	70bb      	strb	r3, [r7, #2]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	707b      	strb	r3, [r7, #1]
	if (led < LED_N)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b06      	cmp	r3, #6
 8001f42:	d820      	bhi.n	8001f86 <ws2812b_set_color+0x62>
	{
		if(red < 0) red = 0;
		if(green < 0) green = 0;
		if(blue < 0) blue = 0;

		set_byte(RESET_LEN + 24 * led, green);
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	3328      	adds	r3, #40	; 0x28
 8001f50:	78ba      	ldrb	r2, [r7, #2]
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ffb9 	bl	8001ecc <set_byte>
		set_byte(RESET_LEN + 24 * led + 8, red);
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	3330      	adds	r3, #48	; 0x30
 8001f66:	78fa      	ldrb	r2, [r7, #3]
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ffae 	bl	8001ecc <set_byte>
		set_byte(RESET_LEN + 24 * led + 16, blue);
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	3338      	adds	r3, #56	; 0x38
 8001f7c:	787a      	ldrb	r2, [r7, #1]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ffa3 	bl	8001ecc <set_byte>
	}
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f94:	f7ff fc44 	bl	8001820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f98:	480c      	ldr	r0, [pc, #48]	; (8001fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001f9a:	490d      	ldr	r1, [pc, #52]	; (8001fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <LoopForever+0xe>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa0:	e002      	b.n	8001fa8 <LoopCopyDataInit>

08001fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa6:	3304      	adds	r3, #4

08001fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fac:	d3f9      	bcc.n	8001fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fb0:	4c0a      	ldr	r4, [pc, #40]	; (8001fdc <LoopForever+0x16>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb4:	e001      	b.n	8001fba <LoopFillZerobss>

08001fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb8:	3204      	adds	r2, #4

08001fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fbc:	d3fb      	bcc.n	8001fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f004 fdc1 	bl	8006b44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fc2:	f7ff fa09 	bl	80013d8 <main>

08001fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fc6:	e7fe      	b.n	8001fc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd0:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001fd4:	08009ce0 	.word	0x08009ce0
  ldr r2, =_sbss
 8001fd8:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001fdc:	2000055c 	.word	0x2000055c

08001fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC1_2_IRQHandler>
	...

08001fe4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <HAL_Init+0x3c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <HAL_Init+0x3c>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ffa:	2003      	movs	r0, #3
 8001ffc:	f000 f962 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002000:	2000      	movs	r0, #0
 8002002:	f000 f80f 	bl	8002024 <HAL_InitTick>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	71fb      	strb	r3, [r7, #7]
 8002010:	e001      	b.n	8002016 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002012:	f7ff fadf 	bl	80015d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002016:	79fb      	ldrb	r3, [r7, #7]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40022000 	.word	0x40022000

08002024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002030:	4b17      	ldr	r3, [pc, #92]	; (8002090 <HAL_InitTick+0x6c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d023      	beq.n	8002080 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <HAL_InitTick+0x70>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_InitTick+0x6c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002046:	fbb3 f3f1 	udiv	r3, r3, r1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f96d 	bl	800232e <HAL_SYSTICK_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10f      	bne.n	800207a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b0f      	cmp	r3, #15
 800205e:	d809      	bhi.n	8002074 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002060:	2200      	movs	r2, #0
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f000 f937 	bl	80022da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800206c:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <HAL_InitTick+0x74>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e007      	b.n	8002084 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e004      	b.n	8002084 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	e001      	b.n	8002084 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000038 	.word	0x20000038
 8002094:	20000030 	.word	0x20000030
 8002098:	20000034 	.word	0x20000034

0800209c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x20>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x24>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_IncTick+0x24>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000038 	.word	0x20000038
 80020c0:	20000548 	.word	0x20000548

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_GetTick+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000548 	.word	0x20000548

080020dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff ffee 	bl	80020c4 <HAL_GetTick>
 80020e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f4:	d005      	beq.n	8002102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_Delay+0x44>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002102:	bf00      	nop
 8002104:	f7ff ffde 	bl	80020c4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	429a      	cmp	r2, r3
 8002112:	d8f7      	bhi.n	8002104 <HAL_Delay+0x28>
  {
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000038 	.word	0x20000038

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db0b      	blt.n	80021b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4907      	ldr	r1, [pc, #28]	; (80021c0 <__NVIC_EnableIRQ+0x38>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	; (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	; (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
         );
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f7ff ff8e 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff29 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022ec:	f7ff ff3e 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ff8e 	bl	8002218 <NVIC_EncodePriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff5d 	bl	80021c4 <__NVIC_SetPriority>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff31 	bl	8002188 <__NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffa2 	bl	8002280 <SysTick_Config>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e098      	b.n	800248c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <HAL_DMA_Init+0x150>)
 8002362:	429a      	cmp	r2, r3
 8002364:	d80f      	bhi.n	8002386 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	4b4b      	ldr	r3, [pc, #300]	; (800249c <HAL_DMA_Init+0x154>)
 800236e:	4413      	add	r3, r2
 8002370:	4a4b      	ldr	r2, [pc, #300]	; (80024a0 <HAL_DMA_Init+0x158>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	009a      	lsls	r2, r3, #2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a48      	ldr	r2, [pc, #288]	; (80024a4 <HAL_DMA_Init+0x15c>)
 8002382:	641a      	str	r2, [r3, #64]	; 0x40
 8002384:	e00e      	b.n	80023a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	4b46      	ldr	r3, [pc, #280]	; (80024a8 <HAL_DMA_Init+0x160>)
 800238e:	4413      	add	r3, r2
 8002390:	4a43      	ldr	r2, [pc, #268]	; (80024a0 <HAL_DMA_Init+0x158>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	009a      	lsls	r2, r3, #2
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a42      	ldr	r2, [pc, #264]	; (80024ac <HAL_DMA_Init+0x164>)
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80023ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80023c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023fe:	d039      	beq.n	8002474 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <HAL_DMA_Init+0x15c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d11a      	bne.n	8002440 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800240a:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <HAL_DMA_Init+0x168>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	f003 031c 	and.w	r3, r3, #28
 8002416:	210f      	movs	r1, #15
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	4924      	ldr	r1, [pc, #144]	; (80024b0 <HAL_DMA_Init+0x168>)
 8002420:	4013      	ands	r3, r2
 8002422:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <HAL_DMA_Init+0x168>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6859      	ldr	r1, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002430:	f003 031c 	and.w	r3, r3, #28
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	491d      	ldr	r1, [pc, #116]	; (80024b0 <HAL_DMA_Init+0x168>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
 800243e:	e019      	b.n	8002474 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002440:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <HAL_DMA_Init+0x16c>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002448:	f003 031c 	and.w	r3, r3, #28
 800244c:	210f      	movs	r1, #15
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	4917      	ldr	r1, [pc, #92]	; (80024b4 <HAL_DMA_Init+0x16c>)
 8002456:	4013      	ands	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_DMA_Init+0x16c>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f003 031c 	and.w	r3, r3, #28
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	4911      	ldr	r1, [pc, #68]	; (80024b4 <HAL_DMA_Init+0x16c>)
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40020407 	.word	0x40020407
 800249c:	bffdfff8 	.word	0xbffdfff8
 80024a0:	cccccccd 	.word	0xcccccccd
 80024a4:	40020000 	.word	0x40020000
 80024a8:	bffdfbf8 	.word	0xbffdfbf8
 80024ac:	40020400 	.word	0x40020400
 80024b0:	400200a8 	.word	0x400200a8
 80024b4:	400204a8 	.word	0x400204a8

080024b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_DMA_Start_IT+0x20>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e04b      	b.n	8002570 <HAL_DMA_Start_IT+0xb8>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d13a      	bne.n	8002562 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0201 	bic.w	r2, r2, #1
 8002508:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f8e0 	bl	80026d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 020e 	orr.w	r2, r2, #14
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	e00f      	b.n	8002550 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0204 	bic.w	r2, r2, #4
 800253e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 020a 	orr.w	r2, r2, #10
 800254e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e005      	b.n	800256e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800256a:	2302      	movs	r3, #2
 800256c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800256e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002594:	f003 031c 	and.w	r3, r3, #28
 8002598:	2204      	movs	r2, #4
 800259a:	409a      	lsls	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d026      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x7a>
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d021      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0204 	bic.w	r2, r2, #4
 80025ca:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	f003 021c 	and.w	r2, r3, #28
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	2104      	movs	r1, #4
 80025da:	fa01 f202 	lsl.w	r2, r1, r2
 80025de:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d071      	beq.n	80026cc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80025f0:	e06c      	b.n	80026cc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f003 031c 	and.w	r3, r3, #28
 80025fa:	2202      	movs	r2, #2
 80025fc:	409a      	lsls	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d02e      	beq.n	8002664 <HAL_DMA_IRQHandler+0xec>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d029      	beq.n	8002664 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10b      	bne.n	8002636 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 020a 	bic.w	r2, r2, #10
 800262c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f003 021c 	and.w	r2, r3, #28
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	2102      	movs	r1, #2
 8002644:	fa01 f202 	lsl.w	r2, r1, r2
 8002648:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d038      	beq.n	80026cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002662:	e033      	b.n	80026cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	f003 031c 	and.w	r3, r3, #28
 800266c:	2208      	movs	r2, #8
 800266e:	409a      	lsls	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d02a      	beq.n	80026ce <HAL_DMA_IRQHandler+0x156>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d025      	beq.n	80026ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 020e 	bic.w	r2, r2, #14
 8002690:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	f003 021c 	and.w	r2, r3, #28
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	2101      	movs	r1, #1
 80026a0:	fa01 f202 	lsl.w	r2, r1, r2
 80026a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d004      	beq.n	80026ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
}
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b085      	sub	sp, #20
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	f003 021c 	and.w	r2, r3, #28
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f202 	lsl.w	r2, r1, r2
 80026f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b10      	cmp	r3, #16
 8002706:	d108      	bne.n	800271a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002718:	e007      	b.n	800272a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	60da      	str	r2, [r3, #12]
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002746:	e17f      	b.n	8002a48 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	fa01 f303 	lsl.w	r3, r1, r3
 8002754:	4013      	ands	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 8171 	beq.w	8002a42 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b01      	cmp	r3, #1
 800276a:	d005      	beq.n	8002778 <HAL_GPIO_Init+0x40>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d130      	bne.n	80027da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	2203      	movs	r2, #3
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ae:	2201      	movs	r2, #1
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	f003 0201 	and.w	r2, r3, #1
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d118      	bne.n	8002818 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80027ec:	2201      	movs	r2, #1
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	08db      	lsrs	r3, r3, #3
 8002802:	f003 0201 	and.w	r2, r3, #1
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b03      	cmp	r3, #3
 8002822:	d017      	beq.n	8002854 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2203      	movs	r2, #3
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d123      	bne.n	80028a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	08da      	lsrs	r2, r3, #3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3208      	adds	r2, #8
 8002868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	220f      	movs	r2, #15
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4013      	ands	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	08da      	lsrs	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3208      	adds	r2, #8
 80028a2:	6939      	ldr	r1, [r7, #16]
 80028a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	2203      	movs	r2, #3
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0203 	and.w	r2, r3, #3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80ac 	beq.w	8002a42 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ea:	4b5f      	ldr	r3, [pc, #380]	; (8002a68 <HAL_GPIO_Init+0x330>)
 80028ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ee:	4a5e      	ldr	r2, [pc, #376]	; (8002a68 <HAL_GPIO_Init+0x330>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6613      	str	r3, [r2, #96]	; 0x60
 80028f6:	4b5c      	ldr	r3, [pc, #368]	; (8002a68 <HAL_GPIO_Init+0x330>)
 80028f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002902:	4a5a      	ldr	r2, [pc, #360]	; (8002a6c <HAL_GPIO_Init+0x334>)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3302      	adds	r3, #2
 800290a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	220f      	movs	r2, #15
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800292c:	d025      	beq.n	800297a <HAL_GPIO_Init+0x242>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4f      	ldr	r2, [pc, #316]	; (8002a70 <HAL_GPIO_Init+0x338>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01f      	beq.n	8002976 <HAL_GPIO_Init+0x23e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4e      	ldr	r2, [pc, #312]	; (8002a74 <HAL_GPIO_Init+0x33c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d019      	beq.n	8002972 <HAL_GPIO_Init+0x23a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4d      	ldr	r2, [pc, #308]	; (8002a78 <HAL_GPIO_Init+0x340>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <HAL_GPIO_Init+0x236>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4c      	ldr	r2, [pc, #304]	; (8002a7c <HAL_GPIO_Init+0x344>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00d      	beq.n	800296a <HAL_GPIO_Init+0x232>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4b      	ldr	r2, [pc, #300]	; (8002a80 <HAL_GPIO_Init+0x348>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <HAL_GPIO_Init+0x22e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4a      	ldr	r2, [pc, #296]	; (8002a84 <HAL_GPIO_Init+0x34c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_GPIO_Init+0x22a>
 800295e:	2306      	movs	r3, #6
 8002960:	e00c      	b.n	800297c <HAL_GPIO_Init+0x244>
 8002962:	2307      	movs	r3, #7
 8002964:	e00a      	b.n	800297c <HAL_GPIO_Init+0x244>
 8002966:	2305      	movs	r3, #5
 8002968:	e008      	b.n	800297c <HAL_GPIO_Init+0x244>
 800296a:	2304      	movs	r3, #4
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x244>
 800296e:	2303      	movs	r3, #3
 8002970:	e004      	b.n	800297c <HAL_GPIO_Init+0x244>
 8002972:	2302      	movs	r3, #2
 8002974:	e002      	b.n	800297c <HAL_GPIO_Init+0x244>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_GPIO_Init+0x244>
 800297a:	2300      	movs	r3, #0
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	f002 0203 	and.w	r2, r2, #3
 8002982:	0092      	lsls	r2, r2, #2
 8002984:	4093      	lsls	r3, r2
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800298c:	4937      	ldr	r1, [pc, #220]	; (8002a6c <HAL_GPIO_Init+0x334>)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3302      	adds	r3, #2
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800299a:	4b3b      	ldr	r3, [pc, #236]	; (8002a88 <HAL_GPIO_Init+0x350>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029be:	4a32      	ldr	r2, [pc, #200]	; (8002a88 <HAL_GPIO_Init+0x350>)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029c4:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <HAL_GPIO_Init+0x350>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029e8:	4a27      	ldr	r2, [pc, #156]	; (8002a88 <HAL_GPIO_Init+0x350>)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <HAL_GPIO_Init+0x350>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a12:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <HAL_GPIO_Init+0x350>)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_GPIO_Init+0x350>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a3c:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <HAL_GPIO_Init+0x350>)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	3301      	adds	r3, #1
 8002a46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f47f ae78 	bne.w	8002748 <HAL_GPIO_Init+0x10>
  }
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop
 8002a5c:	371c      	adds	r7, #28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	48000400 	.word	0x48000400
 8002a74:	48000800 	.word	0x48000800
 8002a78:	48000c00 	.word	0x48000c00
 8002a7c:	48001000 	.word	0x48001000
 8002a80:	48001400 	.word	0x48001400
 8002a84:	48001800 	.word	0x48001800
 8002a88:	40010400 	.word	0x40010400

08002a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a9c:	787b      	ldrb	r3, [r7, #1]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002aa8:	e002      	b.n	8002ab0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aaa:	887a      	ldrh	r2, [r7, #2]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ad2:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fa9a 	bl	8001014 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40010400 	.word	0x40010400

08002aec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <HAL_PWREx_GetVoltageRange+0x18>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40007000 	.word	0x40007000

08002b08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b16:	d130      	bne.n	8002b7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b18:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b24:	d038      	beq.n	8002b98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2232      	movs	r2, #50	; 0x32
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	4a1b      	ldr	r2, [pc, #108]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	0c9b      	lsrs	r3, r3, #18
 8002b48:	3301      	adds	r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b4c:	e002      	b.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b54:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b60:	d102      	bne.n	8002b68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f2      	bne.n	8002b4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b74:	d110      	bne.n	8002b98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e00f      	b.n	8002b9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b86:	d007      	beq.n	8002b98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b90:	4a05      	ldr	r2, [pc, #20]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	20000030 	.word	0x20000030
 8002bb0:	431bde83 	.word	0x431bde83

08002bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e3ca      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc6:	4b97      	ldr	r3, [pc, #604]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bd0:	4b94      	ldr	r3, [pc, #592]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 80e4 	beq.w	8002db0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <HAL_RCC_OscConfig+0x4a>
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b0c      	cmp	r3, #12
 8002bf2:	f040 808b 	bne.w	8002d0c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	f040 8087 	bne.w	8002d0c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bfe:	4b89      	ldr	r3, [pc, #548]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_RCC_OscConfig+0x62>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e3a2      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1a      	ldr	r2, [r3, #32]
 8002c1a:	4b82      	ldr	r3, [pc, #520]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d004      	beq.n	8002c30 <HAL_RCC_OscConfig+0x7c>
 8002c26:	4b7f      	ldr	r3, [pc, #508]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c2e:	e005      	b.n	8002c3c <HAL_RCC_OscConfig+0x88>
 8002c30:	4b7c      	ldr	r3, [pc, #496]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d223      	bcs.n	8002c88 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fd55 	bl	80036f4 <RCC_SetFlashLatencyFromMSIRange>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e383      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c54:	4b73      	ldr	r3, [pc, #460]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a72      	ldr	r2, [pc, #456]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c5a:	f043 0308 	orr.w	r3, r3, #8
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b70      	ldr	r3, [pc, #448]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	496d      	ldr	r1, [pc, #436]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c72:	4b6c      	ldr	r3, [pc, #432]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	4968      	ldr	r1, [pc, #416]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	604b      	str	r3, [r1, #4]
 8002c86:	e025      	b.n	8002cd4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c88:	4b66      	ldr	r3, [pc, #408]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a65      	ldr	r2, [pc, #404]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c8e:	f043 0308 	orr.w	r3, r3, #8
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b63      	ldr	r3, [pc, #396]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4960      	ldr	r1, [pc, #384]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca6:	4b5f      	ldr	r3, [pc, #380]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	495b      	ldr	r1, [pc, #364]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fd15 	bl	80036f4 <RCC_SetFlashLatencyFromMSIRange>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e343      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cd4:	f000 fc4a 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b52      	ldr	r3, [pc, #328]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	4950      	ldr	r1, [pc, #320]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002ce6:	5ccb      	ldrb	r3, [r1, r3]
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf0:	4a4e      	ldr	r2, [pc, #312]	; (8002e2c <HAL_RCC_OscConfig+0x278>)
 8002cf2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cf4:	4b4e      	ldr	r3, [pc, #312]	; (8002e30 <HAL_RCC_OscConfig+0x27c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f993 	bl	8002024 <HAL_InitTick>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d052      	beq.n	8002dae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	e327      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d032      	beq.n	8002d7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d14:	4b43      	ldr	r3, [pc, #268]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a42      	ldr	r2, [pc, #264]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d20:	f7ff f9d0 	bl	80020c4 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d28:	f7ff f9cc 	bl	80020c4 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e310      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d3a:	4b3a      	ldr	r3, [pc, #232]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d46:	4b37      	ldr	r3, [pc, #220]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a36      	ldr	r2, [pc, #216]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4931      	ldr	r1, [pc, #196]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d64:	4b2f      	ldr	r3, [pc, #188]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	492c      	ldr	r1, [pc, #176]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
 8002d78:	e01a      	b.n	8002db0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d7a:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d86:	f7ff f99d 	bl	80020c4 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d8e:	f7ff f999 	bl	80020c4 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e2dd      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002da0:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f0      	bne.n	8002d8e <HAL_RCC_OscConfig+0x1da>
 8002dac:	e000      	b.n	8002db0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d074      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d005      	beq.n	8002dce <HAL_RCC_OscConfig+0x21a>
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b0c      	cmp	r3, #12
 8002dc6:	d10e      	bne.n	8002de6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d10b      	bne.n	8002de6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dce:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d064      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x2f0>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d160      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e2ba      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_OscConfig+0x24a>
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0b      	ldr	r2, [pc, #44]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	e026      	b.n	8002e4c <HAL_RCC_OscConfig+0x298>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e06:	d115      	bne.n	8002e34 <HAL_RCC_OscConfig+0x280>
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a02      	ldr	r2, [pc, #8]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	e014      	b.n	8002e4c <HAL_RCC_OscConfig+0x298>
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	08009850 	.word	0x08009850
 8002e2c:	20000030 	.word	0x20000030
 8002e30:	20000034 	.word	0x20000034
 8002e34:	4ba0      	ldr	r3, [pc, #640]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a9f      	ldr	r2, [pc, #636]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	4b9d      	ldr	r3, [pc, #628]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a9c      	ldr	r2, [pc, #624]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d013      	beq.n	8002e7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7ff f936 	bl	80020c4 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7ff f932 	bl	80020c4 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e276      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e6e:	4b92      	ldr	r3, [pc, #584]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x2a8>
 8002e7a:	e014      	b.n	8002ea6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7ff f922 	bl	80020c4 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e84:	f7ff f91e 	bl	80020c4 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	; 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e262      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e96:	4b88      	ldr	r3, [pc, #544]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x2d0>
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d060      	beq.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x310>
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2b0c      	cmp	r3, #12
 8002ebc:	d119      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d116      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec4:	4b7c      	ldr	r3, [pc, #496]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_RCC_OscConfig+0x328>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e23f      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002edc:	4b76      	ldr	r3, [pc, #472]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	061b      	lsls	r3, r3, #24
 8002eea:	4973      	ldr	r1, [pc, #460]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef0:	e040      	b.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d023      	beq.n	8002f42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002efa:	4b6f      	ldr	r3, [pc, #444]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6e      	ldr	r2, [pc, #440]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f06:	f7ff f8dd 	bl	80020c4 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f0e:	f7ff f8d9 	bl	80020c4 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e21d      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f20:	4b65      	ldr	r3, [pc, #404]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2c:	4b62      	ldr	r3, [pc, #392]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	061b      	lsls	r3, r3, #24
 8002f3a:	495f      	ldr	r1, [pc, #380]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
 8002f40:	e018      	b.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f42:	4b5d      	ldr	r3, [pc, #372]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a5c      	ldr	r2, [pc, #368]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7ff f8b9 	bl	80020c4 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f56:	f7ff f8b5 	bl	80020c4 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e1f9      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f68:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f0      	bne.n	8002f56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d03c      	beq.n	8002ffa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01c      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f88:	4b4b      	ldr	r3, [pc, #300]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8e:	4a4a      	ldr	r2, [pc, #296]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7ff f894 	bl	80020c4 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa0:	f7ff f890 	bl	80020c4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1d4      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fb2:	4b41      	ldr	r3, [pc, #260]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ef      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x3ec>
 8002fc0:	e01b      	b.n	8002ffa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc8:	4a3b      	ldr	r2, [pc, #236]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd2:	f7ff f877 	bl	80020c4 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fda:	f7ff f873 	bl	80020c4 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e1b7      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fec:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8002fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1ef      	bne.n	8002fda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 80a6 	beq.w	8003154 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003008:	2300      	movs	r3, #0
 800300a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800300c:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10d      	bne.n	8003034 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003018:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	4a26      	ldr	r2, [pc, #152]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 800301e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003022:	6593      	str	r3, [r2, #88]	; 0x58
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003030:	2301      	movs	r3, #1
 8003032:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003034:	4b21      	ldr	r3, [pc, #132]	; (80030bc <HAL_RCC_OscConfig+0x508>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d118      	bne.n	8003072 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003040:	4b1e      	ldr	r3, [pc, #120]	; (80030bc <HAL_RCC_OscConfig+0x508>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1d      	ldr	r2, [pc, #116]	; (80030bc <HAL_RCC_OscConfig+0x508>)
 8003046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800304c:	f7ff f83a 	bl	80020c4 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003054:	f7ff f836 	bl	80020c4 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e17a      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <HAL_RCC_OscConfig+0x508>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d108      	bne.n	800308c <HAL_RCC_OscConfig+0x4d8>
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003080:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800308a:	e029      	b.n	80030e0 <HAL_RCC_OscConfig+0x52c>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b05      	cmp	r3, #5
 8003092:	d115      	bne.n	80030c0 <HAL_RCC_OscConfig+0x50c>
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	4a03      	ldr	r2, [pc, #12]	; (80030b8 <HAL_RCC_OscConfig+0x504>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030b4:	e014      	b.n	80030e0 <HAL_RCC_OscConfig+0x52c>
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40007000 	.word	0x40007000
 80030c0:	4b9c      	ldr	r3, [pc, #624]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c6:	4a9b      	ldr	r2, [pc, #620]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030d0:	4b98      	ldr	r3, [pc, #608]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	4a97      	ldr	r2, [pc, #604]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80030d8:	f023 0304 	bic.w	r3, r3, #4
 80030dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d016      	beq.n	8003116 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e8:	f7fe ffec 	bl	80020c4 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f0:	f7fe ffe8 	bl	80020c4 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e12a      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003106:	4b8b      	ldr	r3, [pc, #556]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0ed      	beq.n	80030f0 <HAL_RCC_OscConfig+0x53c>
 8003114:	e015      	b.n	8003142 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003116:	f7fe ffd5 	bl	80020c4 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800311c:	e00a      	b.n	8003134 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311e:	f7fe ffd1 	bl	80020c4 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e113      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003134:	4b7f      	ldr	r3, [pc, #508]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1ed      	bne.n	800311e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003142:	7ffb      	ldrb	r3, [r7, #31]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d105      	bne.n	8003154 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003148:	4b7a      	ldr	r3, [pc, #488]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	4a79      	ldr	r2, [pc, #484]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 800314e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003152:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80fe 	beq.w	800335a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	2b02      	cmp	r3, #2
 8003164:	f040 80d0 	bne.w	8003308 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003168:	4b72      	ldr	r3, [pc, #456]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f003 0203 	and.w	r2, r3, #3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	429a      	cmp	r2, r3
 800317a:	d130      	bne.n	80031de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	3b01      	subs	r3, #1
 8003188:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d127      	bne.n	80031de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003198:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d11f      	bne.n	80031de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031a8:	2a07      	cmp	r2, #7
 80031aa:	bf14      	ite	ne
 80031ac:	2201      	movne	r2, #1
 80031ae:	2200      	moveq	r2, #0
 80031b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d113      	bne.n	80031de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c0:	085b      	lsrs	r3, r3, #1
 80031c2:	3b01      	subs	r3, #1
 80031c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d109      	bne.n	80031de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	3b01      	subs	r3, #1
 80031d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d06e      	beq.n	80032bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b0c      	cmp	r3, #12
 80031e2:	d069      	beq.n	80032b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031e4:	4b53      	ldr	r3, [pc, #332]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031f0:	4b50      	ldr	r3, [pc, #320]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0ad      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003200:	4b4c      	ldr	r3, [pc, #304]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a4b      	ldr	r2, [pc, #300]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800320a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800320c:	f7fe ff5a 	bl	80020c4 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003214:	f7fe ff56 	bl	80020c4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e09a      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003226:	4b43      	ldr	r3, [pc, #268]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003232:	4b40      	ldr	r3, [pc, #256]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	4b40      	ldr	r3, [pc, #256]	; (8003338 <HAL_RCC_OscConfig+0x784>)
 8003238:	4013      	ands	r3, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003242:	3a01      	subs	r2, #1
 8003244:	0112      	lsls	r2, r2, #4
 8003246:	4311      	orrs	r1, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800324c:	0212      	lsls	r2, r2, #8
 800324e:	4311      	orrs	r1, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003254:	0852      	lsrs	r2, r2, #1
 8003256:	3a01      	subs	r2, #1
 8003258:	0552      	lsls	r2, r2, #21
 800325a:	4311      	orrs	r1, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003260:	0852      	lsrs	r2, r2, #1
 8003262:	3a01      	subs	r2, #1
 8003264:	0652      	lsls	r2, r2, #25
 8003266:	4311      	orrs	r1, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800326c:	0912      	lsrs	r2, r2, #4
 800326e:	0452      	lsls	r2, r2, #17
 8003270:	430a      	orrs	r2, r1
 8003272:	4930      	ldr	r1, [pc, #192]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003274:	4313      	orrs	r3, r2
 8003276:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003278:	4b2e      	ldr	r3, [pc, #184]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a2d      	ldr	r2, [pc, #180]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 800327e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003282:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003284:	4b2b      	ldr	r3, [pc, #172]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4a2a      	ldr	r2, [pc, #168]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 800328a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800328e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003290:	f7fe ff18 	bl	80020c4 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe ff14 	bl	80020c4 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e058      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032b6:	e050      	b.n	800335a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e04f      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032bc:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d148      	bne.n	800335a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032c8:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a19      	ldr	r2, [pc, #100]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80032ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032d4:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4a16      	ldr	r2, [pc, #88]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80032da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032e0:	f7fe fef0 	bl	80020c4 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fe feec 	bl	80020c4 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e030      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x734>
 8003306:	e028      	b.n	800335a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b0c      	cmp	r3, #12
 800330c:	d023      	beq.n	8003356 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a08      	ldr	r2, [pc, #32]	; (8003334 <HAL_RCC_OscConfig+0x780>)
 8003314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331a:	f7fe fed3 	bl	80020c4 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003320:	e00c      	b.n	800333c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003322:	f7fe fecf 	bl	80020c4 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d905      	bls.n	800333c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e013      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
 8003334:	40021000 	.word	0x40021000
 8003338:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <HAL_RCC_OscConfig+0x7b0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1ec      	bne.n	8003322 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003348:	4b06      	ldr	r3, [pc, #24]	; (8003364 <HAL_RCC_OscConfig+0x7b0>)
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	4905      	ldr	r1, [pc, #20]	; (8003364 <HAL_RCC_OscConfig+0x7b0>)
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_RCC_OscConfig+0x7b4>)
 8003350:	4013      	ands	r3, r2
 8003352:	60cb      	str	r3, [r1, #12]
 8003354:	e001      	b.n	800335a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3720      	adds	r7, #32
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	feeefffc 	.word	0xfeeefffc

0800336c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0e7      	b.n	8003550 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003380:	4b75      	ldr	r3, [pc, #468]	; (8003558 <HAL_RCC_ClockConfig+0x1ec>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d910      	bls.n	80033b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b72      	ldr	r3, [pc, #456]	; (8003558 <HAL_RCC_ClockConfig+0x1ec>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 0207 	bic.w	r2, r3, #7
 8003396:	4970      	ldr	r1, [pc, #448]	; (8003558 <HAL_RCC_ClockConfig+0x1ec>)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	4313      	orrs	r3, r2
 800339c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b6e      	ldr	r3, [pc, #440]	; (8003558 <HAL_RCC_ClockConfig+0x1ec>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0cf      	b.n	8003550 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d010      	beq.n	80033de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d908      	bls.n	80033de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033cc:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4960      	ldr	r1, [pc, #384]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d04c      	beq.n	8003484 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d107      	bne.n	8003402 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f2:	4b5a      	ldr	r3, [pc, #360]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d121      	bne.n	8003442 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e0a6      	b.n	8003550 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800340a:	4b54      	ldr	r3, [pc, #336]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d115      	bne.n	8003442 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e09a      	b.n	8003550 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d107      	bne.n	8003432 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003422:	4b4e      	ldr	r3, [pc, #312]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e08e      	b.n	8003550 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003432:	4b4a      	ldr	r3, [pc, #296]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e086      	b.n	8003550 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003442:	4b46      	ldr	r3, [pc, #280]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f023 0203 	bic.w	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4943      	ldr	r1, [pc, #268]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 8003450:	4313      	orrs	r3, r2
 8003452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003454:	f7fe fe36 	bl	80020c4 <HAL_GetTick>
 8003458:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345a:	e00a      	b.n	8003472 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800345c:	f7fe fe32 	bl	80020c4 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e06e      	b.n	8003550 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	4b3a      	ldr	r3, [pc, #232]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 020c 	and.w	r2, r3, #12
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	429a      	cmp	r2, r3
 8003482:	d1eb      	bne.n	800345c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d010      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	4b31      	ldr	r3, [pc, #196]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800349c:	429a      	cmp	r2, r3
 800349e:	d208      	bcs.n	80034b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a0:	4b2e      	ldr	r3, [pc, #184]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	492b      	ldr	r1, [pc, #172]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034b2:	4b29      	ldr	r3, [pc, #164]	; (8003558 <HAL_RCC_ClockConfig+0x1ec>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d210      	bcs.n	80034e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c0:	4b25      	ldr	r3, [pc, #148]	; (8003558 <HAL_RCC_ClockConfig+0x1ec>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 0207 	bic.w	r2, r3, #7
 80034c8:	4923      	ldr	r1, [pc, #140]	; (8003558 <HAL_RCC_ClockConfig+0x1ec>)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d0:	4b21      	ldr	r3, [pc, #132]	; (8003558 <HAL_RCC_ClockConfig+0x1ec>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d001      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e036      	b.n	8003550 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ee:	4b1b      	ldr	r3, [pc, #108]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	4918      	ldr	r1, [pc, #96]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d009      	beq.n	8003520 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350c:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4910      	ldr	r1, [pc, #64]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 800351c:	4313      	orrs	r3, r2
 800351e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003520:	f000 f824 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_RCC_ClockConfig+0x1f0>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	490b      	ldr	r1, [pc, #44]	; (8003560 <HAL_RCC_ClockConfig+0x1f4>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
 800353c:	4a09      	ldr	r2, [pc, #36]	; (8003564 <HAL_RCC_ClockConfig+0x1f8>)
 800353e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003540:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_RCC_ClockConfig+0x1fc>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7fe fd6d 	bl	8002024 <HAL_InitTick>
 800354a:	4603      	mov	r3, r0
 800354c:	72fb      	strb	r3, [r7, #11]

  return status;
 800354e:	7afb      	ldrb	r3, [r7, #11]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40022000 	.word	0x40022000
 800355c:	40021000 	.word	0x40021000
 8003560:	08009850 	.word	0x08009850
 8003564:	20000030 	.word	0x20000030
 8003568:	20000034 	.word	0x20000034

0800356c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	b089      	sub	sp, #36	; 0x24
 8003570:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800357a:	4b3e      	ldr	r3, [pc, #248]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003584:	4b3b      	ldr	r3, [pc, #236]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d121      	bne.n	80035de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d11e      	bne.n	80035de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035a0:	4b34      	ldr	r3, [pc, #208]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035ac:	4b31      	ldr	r3, [pc, #196]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 80035ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	61fb      	str	r3, [r7, #28]
 80035ba:	e005      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035bc:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035c8:	4a2b      	ldr	r2, [pc, #172]	; (8003678 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10d      	bne.n	80035f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d102      	bne.n	80035ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035e4:	4b25      	ldr	r3, [pc, #148]	; (800367c <HAL_RCC_GetSysClockFreq+0x110>)
 80035e6:	61bb      	str	r3, [r7, #24]
 80035e8:	e004      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035f0:	4b23      	ldr	r3, [pc, #140]	; (8003680 <HAL_RCC_GetSysClockFreq+0x114>)
 80035f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	2b0c      	cmp	r3, #12
 80035f8:	d134      	bne.n	8003664 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d003      	beq.n	8003612 <HAL_RCC_GetSysClockFreq+0xa6>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d003      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0xac>
 8003610:	e005      	b.n	800361e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003612:	4b1a      	ldr	r3, [pc, #104]	; (800367c <HAL_RCC_GetSysClockFreq+0x110>)
 8003614:	617b      	str	r3, [r7, #20]
      break;
 8003616:	e005      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003618:	4b19      	ldr	r3, [pc, #100]	; (8003680 <HAL_RCC_GetSysClockFreq+0x114>)
 800361a:	617b      	str	r3, [r7, #20]
      break;
 800361c:	e002      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	617b      	str	r3, [r7, #20]
      break;
 8003622:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003624:	4b13      	ldr	r3, [pc, #76]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	3301      	adds	r3, #1
 8003630:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	0a1b      	lsrs	r3, r3, #8
 8003638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	fb03 f202 	mul.w	r2, r3, r2
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <HAL_RCC_GetSysClockFreq+0x108>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	0e5b      	lsrs	r3, r3, #25
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	3301      	adds	r3, #1
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003662:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003664:	69bb      	ldr	r3, [r7, #24]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3724      	adds	r7, #36	; 0x24
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40021000 	.word	0x40021000
 8003678:	08009868 	.word	0x08009868
 800367c:	00f42400 	.word	0x00f42400
 8003680:	007a1200 	.word	0x007a1200

08003684 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003688:	4b03      	ldr	r3, [pc, #12]	; (8003698 <HAL_RCC_GetHCLKFreq+0x14>)
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000030 	.word	0x20000030

0800369c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036a0:	f7ff fff0 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4904      	ldr	r1, [pc, #16]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000
 80036c4:	08009860 	.word	0x08009860

080036c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036cc:	f7ff ffda 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	0adb      	lsrs	r3, r3, #11
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	4904      	ldr	r1, [pc, #16]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40021000 	.word	0x40021000
 80036f0:	08009860 	.word	0x08009860

080036f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003700:	4b2a      	ldr	r3, [pc, #168]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800370c:	f7ff f9ee 	bl	8002aec <HAL_PWREx_GetVoltageRange>
 8003710:	6178      	str	r0, [r7, #20]
 8003712:	e014      	b.n	800373e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003714:	4b25      	ldr	r3, [pc, #148]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	4a24      	ldr	r2, [pc, #144]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800371a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371e:	6593      	str	r3, [r2, #88]	; 0x58
 8003720:	4b22      	ldr	r3, [pc, #136]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800372c:	f7ff f9de 	bl	8002aec <HAL_PWREx_GetVoltageRange>
 8003730:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003732:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	4a1d      	ldr	r2, [pc, #116]	; (80037ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003744:	d10b      	bne.n	800375e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b80      	cmp	r3, #128	; 0x80
 800374a:	d919      	bls.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2ba0      	cmp	r3, #160	; 0xa0
 8003750:	d902      	bls.n	8003758 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003752:	2302      	movs	r3, #2
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	e013      	b.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003758:	2301      	movs	r3, #1
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	e010      	b.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b80      	cmp	r3, #128	; 0x80
 8003762:	d902      	bls.n	800376a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003764:	2303      	movs	r3, #3
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	e00a      	b.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b80      	cmp	r3, #128	; 0x80
 800376e:	d102      	bne.n	8003776 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003770:	2302      	movs	r3, #2
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	e004      	b.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b70      	cmp	r3, #112	; 0x70
 800377a:	d101      	bne.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800377c:	2301      	movs	r3, #1
 800377e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 0207 	bic.w	r2, r3, #7
 8003788:	4909      	ldr	r1, [pc, #36]	; (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003790:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	429a      	cmp	r2, r3
 800379c:	d001      	beq.n	80037a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40022000 	.word	0x40022000

080037b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037bc:	2300      	movs	r3, #0
 80037be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037c0:	2300      	movs	r3, #0
 80037c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d041      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037d8:	d02a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037de:	d824      	bhi.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037e4:	d008      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037ea:	d81e      	bhi.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f4:	d010      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037f6:	e018      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037f8:	4b86      	ldr	r3, [pc, #536]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4a85      	ldr	r2, [pc, #532]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003802:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003804:	e015      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3304      	adds	r3, #4
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fabb 	bl	8003d88 <RCCEx_PLLSAI1_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003816:	e00c      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3320      	adds	r3, #32
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fba6 	bl	8003f70 <RCCEx_PLLSAI2_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003828:	e003      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	74fb      	strb	r3, [r7, #19]
      break;
 800382e:	e000      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003830:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003832:	7cfb      	ldrb	r3, [r7, #19]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10b      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003838:	4b76      	ldr	r3, [pc, #472]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003846:	4973      	ldr	r1, [pc, #460]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800384e:	e001      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d041      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003864:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003868:	d02a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800386a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800386e:	d824      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003870:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003874:	d008      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800387a:	d81e      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003884:	d010      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003886:	e018      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003888:	4b62      	ldr	r3, [pc, #392]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a61      	ldr	r2, [pc, #388]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003892:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003894:	e015      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3304      	adds	r3, #4
 800389a:	2100      	movs	r1, #0
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fa73 	bl	8003d88 <RCCEx_PLLSAI1_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038a6:	e00c      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3320      	adds	r3, #32
 80038ac:	2100      	movs	r1, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fb5e 	bl	8003f70 <RCCEx_PLLSAI2_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038b8:	e003      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	74fb      	strb	r3, [r7, #19]
      break;
 80038be:	e000      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80038c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c2:	7cfb      	ldrb	r3, [r7, #19]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10b      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038c8:	4b52      	ldr	r3, [pc, #328]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038d6:	494f      	ldr	r1, [pc, #316]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038de:	e001      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e0:	7cfb      	ldrb	r3, [r7, #19]
 80038e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80a0 	beq.w	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f2:	2300      	movs	r3, #0
 80038f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038f6:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003906:	2300      	movs	r3, #0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00d      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390c:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	4a40      	ldr	r2, [pc, #256]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003916:	6593      	str	r3, [r2, #88]	; 0x58
 8003918:	4b3e      	ldr	r3, [pc, #248]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003924:	2301      	movs	r3, #1
 8003926:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003928:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a3a      	ldr	r2, [pc, #232]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800392e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003932:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003934:	f7fe fbc6 	bl	80020c4 <HAL_GetTick>
 8003938:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800393a:	e009      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800393c:	f7fe fbc2 	bl	80020c4 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d902      	bls.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	74fb      	strb	r3, [r7, #19]
        break;
 800394e:	e005      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003950:	4b31      	ldr	r3, [pc, #196]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0ef      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800395c:	7cfb      	ldrb	r3, [r7, #19]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d15c      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003962:	4b2c      	ldr	r3, [pc, #176]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01f      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	429a      	cmp	r2, r3
 800397e:	d019      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003980:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800398c:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003992:	4a20      	ldr	r2, [pc, #128]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039ac:	4a19      	ldr	r2, [pc, #100]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d016      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fe fb81 	bl	80020c4 <HAL_GetTick>
 80039c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c4:	e00b      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c6:	f7fe fb7d 	bl	80020c4 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d902      	bls.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	74fb      	strb	r3, [r7, #19]
            break;
 80039dc:	e006      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039de:	4b0d      	ldr	r3, [pc, #52]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0ec      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80039ec:	7cfb      	ldrb	r3, [r7, #19]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039f2:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a02:	4904      	ldr	r1, [pc, #16]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a0a:	e009      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	74bb      	strb	r3, [r7, #18]
 8003a10:	e006      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	7cfb      	ldrb	r3, [r7, #19]
 8003a1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a20:	7c7b      	ldrb	r3, [r7, #17]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d105      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a26:	4b9e      	ldr	r3, [pc, #632]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	4a9d      	ldr	r2, [pc, #628]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a3e:	4b98      	ldr	r3, [pc, #608]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	f023 0203 	bic.w	r2, r3, #3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	4994      	ldr	r1, [pc, #592]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a60:	4b8f      	ldr	r3, [pc, #572]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	f023 020c 	bic.w	r2, r3, #12
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6e:	498c      	ldr	r1, [pc, #560]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a82:	4b87      	ldr	r3, [pc, #540]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	4983      	ldr	r1, [pc, #524]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003aa4:	4b7e      	ldr	r3, [pc, #504]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	497b      	ldr	r1, [pc, #492]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ac6:	4b76      	ldr	r3, [pc, #472]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad4:	4972      	ldr	r1, [pc, #456]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ae8:	4b6d      	ldr	r3, [pc, #436]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	496a      	ldr	r1, [pc, #424]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b0a:	4b65      	ldr	r3, [pc, #404]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b18:	4961      	ldr	r1, [pc, #388]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b2c:	4b5c      	ldr	r3, [pc, #368]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3a:	4959      	ldr	r1, [pc, #356]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b4e:	4b54      	ldr	r3, [pc, #336]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5c:	4950      	ldr	r1, [pc, #320]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b70:	4b4b      	ldr	r3, [pc, #300]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	4948      	ldr	r1, [pc, #288]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b92:	4b43      	ldr	r3, [pc, #268]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	493f      	ldr	r1, [pc, #252]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d028      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bb4:	4b3a      	ldr	r3, [pc, #232]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc2:	4937      	ldr	r1, [pc, #220]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd2:	d106      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd4:	4b32      	ldr	r3, [pc, #200]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4a31      	ldr	r2, [pc, #196]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bde:	60d3      	str	r3, [r2, #12]
 8003be0:	e011      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bea:	d10c      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 f8c8 	bl	8003d88 <RCCEx_PLLSAI1_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bfc:	7cfb      	ldrb	r3, [r7, #19]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d028      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c12:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	491f      	ldr	r1, [pc, #124]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c30:	d106      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c32:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	4a1a      	ldr	r2, [pc, #104]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c3c:	60d3      	str	r3, [r2, #12]
 8003c3e:	e011      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	2101      	movs	r1, #1
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 f899 	bl	8003d88 <RCCEx_PLLSAI1_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c5a:	7cfb      	ldrb	r3, [r7, #19]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d02b      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7e:	4908      	ldr	r1, [pc, #32]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c8e:	d109      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4a02      	ldr	r2, [pc, #8]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c9a:	60d3      	str	r3, [r2, #12]
 8003c9c:	e014      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c9e:	bf00      	nop
 8003ca0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 f867 	bl	8003d88 <RCCEx_PLLSAI1_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cbe:	7cfb      	ldrb	r3, [r7, #19]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d02f      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cd4:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ce2:	4928      	ldr	r1, [pc, #160]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cf2:	d10d      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	2102      	movs	r1, #2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f844 	bl	8003d88 <RCCEx_PLLSAI1_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d014      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d0a:	7cfb      	ldrb	r3, [r7, #19]
 8003d0c:	74bb      	strb	r3, [r7, #18]
 8003d0e:	e011      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3320      	adds	r3, #32
 8003d1e:	2102      	movs	r1, #2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 f925 	bl	8003f70 <RCCEx_PLLSAI2_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d2a:	7cfb      	ldrb	r3, [r7, #19]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d30:	7cfb      	ldrb	r3, [r7, #19]
 8003d32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d40:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d4e:	490d      	ldr	r1, [pc, #52]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00b      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d62:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d72:	4904      	ldr	r1, [pc, #16]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40021000 	.word	0x40021000

08003d88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d96:	4b75      	ldr	r3, [pc, #468]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d018      	beq.n	8003dd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003da2:	4b72      	ldr	r3, [pc, #456]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0203 	and.w	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d10d      	bne.n	8003dce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
       ||
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dba:	4b6c      	ldr	r3, [pc, #432]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	091b      	lsrs	r3, r3, #4
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
       ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d047      	beq.n	8003e5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
 8003dd2:	e044      	b.n	8003e5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d018      	beq.n	8003e0e <RCCEx_PLLSAI1_Config+0x86>
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d825      	bhi.n	8003e2c <RCCEx_PLLSAI1_Config+0xa4>
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d002      	beq.n	8003dea <RCCEx_PLLSAI1_Config+0x62>
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d009      	beq.n	8003dfc <RCCEx_PLLSAI1_Config+0x74>
 8003de8:	e020      	b.n	8003e2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dea:	4b60      	ldr	r3, [pc, #384]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d11d      	bne.n	8003e32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dfa:	e01a      	b.n	8003e32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dfc:	4b5b      	ldr	r3, [pc, #364]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d116      	bne.n	8003e36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e0c:	e013      	b.n	8003e36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e0e:	4b57      	ldr	r3, [pc, #348]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e1a:	4b54      	ldr	r3, [pc, #336]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e2a:	e006      	b.n	8003e3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e30:	e004      	b.n	8003e3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e32:	bf00      	nop
 8003e34:	e002      	b.n	8003e3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e36:	bf00      	nop
 8003e38:	e000      	b.n	8003e3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10d      	bne.n	8003e5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e42:	4b4a      	ldr	r3, [pc, #296]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6819      	ldr	r1, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	430b      	orrs	r3, r1
 8003e58:	4944      	ldr	r1, [pc, #272]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d17d      	bne.n	8003f60 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e64:	4b41      	ldr	r3, [pc, #260]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a40      	ldr	r2, [pc, #256]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e70:	f7fe f928 	bl	80020c4 <HAL_GetTick>
 8003e74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e76:	e009      	b.n	8003e8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e78:	f7fe f924 	bl	80020c4 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d902      	bls.n	8003e8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	73fb      	strb	r3, [r7, #15]
        break;
 8003e8a:	e005      	b.n	8003e98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e8c:	4b37      	ldr	r3, [pc, #220]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1ef      	bne.n	8003e78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d160      	bne.n	8003f60 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d111      	bne.n	8003ec8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ea4:	4b31      	ldr	r3, [pc, #196]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6892      	ldr	r2, [r2, #8]
 8003eb4:	0211      	lsls	r1, r2, #8
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	68d2      	ldr	r2, [r2, #12]
 8003eba:	0912      	lsrs	r2, r2, #4
 8003ebc:	0452      	lsls	r2, r2, #17
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	492a      	ldr	r1, [pc, #168]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	610b      	str	r3, [r1, #16]
 8003ec6:	e027      	b.n	8003f18 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d112      	bne.n	8003ef4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ece:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ed6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6892      	ldr	r2, [r2, #8]
 8003ede:	0211      	lsls	r1, r2, #8
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6912      	ldr	r2, [r2, #16]
 8003ee4:	0852      	lsrs	r2, r2, #1
 8003ee6:	3a01      	subs	r2, #1
 8003ee8:	0552      	lsls	r2, r2, #21
 8003eea:	430a      	orrs	r2, r1
 8003eec:	491f      	ldr	r1, [pc, #124]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	610b      	str	r3, [r1, #16]
 8003ef2:	e011      	b.n	8003f18 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003efc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6892      	ldr	r2, [r2, #8]
 8003f04:	0211      	lsls	r1, r2, #8
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6952      	ldr	r2, [r2, #20]
 8003f0a:	0852      	lsrs	r2, r2, #1
 8003f0c:	3a01      	subs	r2, #1
 8003f0e:	0652      	lsls	r2, r2, #25
 8003f10:	430a      	orrs	r2, r1
 8003f12:	4916      	ldr	r1, [pc, #88]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f18:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a13      	ldr	r2, [pc, #76]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f24:	f7fe f8ce 	bl	80020c4 <HAL_GetTick>
 8003f28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f2a:	e009      	b.n	8003f40 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f2c:	f7fe f8ca 	bl	80020c4 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d902      	bls.n	8003f40 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f3e:	e005      	b.n	8003f4c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f40:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0ef      	beq.n	8003f2c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f52:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	4904      	ldr	r1, [pc, #16]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000

08003f70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f7e:	4b6a      	ldr	r3, [pc, #424]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d018      	beq.n	8003fbc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f8a:	4b67      	ldr	r3, [pc, #412]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f003 0203 	and.w	r2, r3, #3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d10d      	bne.n	8003fb6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003fa2:	4b61      	ldr	r3, [pc, #388]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	091b      	lsrs	r3, r3, #4
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
       ||
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d047      	beq.n	8004046 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	73fb      	strb	r3, [r7, #15]
 8003fba:	e044      	b.n	8004046 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d018      	beq.n	8003ff6 <RCCEx_PLLSAI2_Config+0x86>
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d825      	bhi.n	8004014 <RCCEx_PLLSAI2_Config+0xa4>
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d002      	beq.n	8003fd2 <RCCEx_PLLSAI2_Config+0x62>
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d009      	beq.n	8003fe4 <RCCEx_PLLSAI2_Config+0x74>
 8003fd0:	e020      	b.n	8004014 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fd2:	4b55      	ldr	r3, [pc, #340]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d11d      	bne.n	800401a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe2:	e01a      	b.n	800401a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fe4:	4b50      	ldr	r3, [pc, #320]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d116      	bne.n	800401e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff4:	e013      	b.n	800401e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ff6:	4b4c      	ldr	r3, [pc, #304]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10f      	bne.n	8004022 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004002:	4b49      	ldr	r3, [pc, #292]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004012:	e006      	b.n	8004022 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
      break;
 8004018:	e004      	b.n	8004024 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800401a:	bf00      	nop
 800401c:	e002      	b.n	8004024 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800401e:	bf00      	nop
 8004020:	e000      	b.n	8004024 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004022:	bf00      	nop
    }

    if(status == HAL_OK)
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800402a:	4b3f      	ldr	r3, [pc, #252]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6819      	ldr	r1, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	3b01      	subs	r3, #1
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	430b      	orrs	r3, r1
 8004040:	4939      	ldr	r1, [pc, #228]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004042:	4313      	orrs	r3, r2
 8004044:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d167      	bne.n	800411c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800404c:	4b36      	ldr	r3, [pc, #216]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a35      	ldr	r2, [pc, #212]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004058:	f7fe f834 	bl	80020c4 <HAL_GetTick>
 800405c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800405e:	e009      	b.n	8004074 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004060:	f7fe f830 	bl	80020c4 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d902      	bls.n	8004074 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	73fb      	strb	r3, [r7, #15]
        break;
 8004072:	e005      	b.n	8004080 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004074:	4b2c      	ldr	r3, [pc, #176]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1ef      	bne.n	8004060 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d14a      	bne.n	800411c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d111      	bne.n	80040b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800408c:	4b26      	ldr	r3, [pc, #152]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6892      	ldr	r2, [r2, #8]
 800409c:	0211      	lsls	r1, r2, #8
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68d2      	ldr	r2, [r2, #12]
 80040a2:	0912      	lsrs	r2, r2, #4
 80040a4:	0452      	lsls	r2, r2, #17
 80040a6:	430a      	orrs	r2, r1
 80040a8:	491f      	ldr	r1, [pc, #124]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	614b      	str	r3, [r1, #20]
 80040ae:	e011      	b.n	80040d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040b0:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6892      	ldr	r2, [r2, #8]
 80040c0:	0211      	lsls	r1, r2, #8
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6912      	ldr	r2, [r2, #16]
 80040c6:	0852      	lsrs	r2, r2, #1
 80040c8:	3a01      	subs	r2, #1
 80040ca:	0652      	lsls	r2, r2, #25
 80040cc:	430a      	orrs	r2, r1
 80040ce:	4916      	ldr	r1, [pc, #88]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040d4:	4b14      	ldr	r3, [pc, #80]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a13      	ldr	r2, [pc, #76]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e0:	f7fd fff0 	bl	80020c4 <HAL_GetTick>
 80040e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040e6:	e009      	b.n	80040fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040e8:	f7fd ffec 	bl	80020c4 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d902      	bls.n	80040fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	73fb      	strb	r3, [r7, #15]
          break;
 80040fa:	e005      	b.n	8004108 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0ef      	beq.n	80040e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800410e:	4b06      	ldr	r3, [pc, #24]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	4904      	ldr	r1, [pc, #16]	; (8004128 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004118:	4313      	orrs	r3, r2
 800411a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000

0800412c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e049      	b.n	80041d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fd fc96 	bl	8001a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f001 f8ec 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d001      	beq.n	80041f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e047      	b.n	8004284 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a23      	ldr	r2, [pc, #140]	; (8004290 <HAL_TIM_Base_Start+0xb4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d01d      	beq.n	8004242 <HAL_TIM_Base_Start+0x66>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420e:	d018      	beq.n	8004242 <HAL_TIM_Base_Start+0x66>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1f      	ldr	r2, [pc, #124]	; (8004294 <HAL_TIM_Base_Start+0xb8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d013      	beq.n	8004242 <HAL_TIM_Base_Start+0x66>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1e      	ldr	r2, [pc, #120]	; (8004298 <HAL_TIM_Base_Start+0xbc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00e      	beq.n	8004242 <HAL_TIM_Base_Start+0x66>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1c      	ldr	r2, [pc, #112]	; (800429c <HAL_TIM_Base_Start+0xc0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d009      	beq.n	8004242 <HAL_TIM_Base_Start+0x66>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1b      	ldr	r2, [pc, #108]	; (80042a0 <HAL_TIM_Base_Start+0xc4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d004      	beq.n	8004242 <HAL_TIM_Base_Start+0x66>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a19      	ldr	r2, [pc, #100]	; (80042a4 <HAL_TIM_Base_Start+0xc8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d115      	bne.n	800426e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <HAL_TIM_Base_Start+0xcc>)
 800424a:	4013      	ands	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b06      	cmp	r3, #6
 8004252:	d015      	beq.n	8004280 <HAL_TIM_Base_Start+0xa4>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425a:	d011      	beq.n	8004280 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426c:	e008      	b.n	8004280 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0201 	orr.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e000      	b.n	8004282 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004280:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	40012c00 	.word	0x40012c00
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800
 800429c:	40000c00 	.word	0x40000c00
 80042a0:	40013400 	.word	0x40013400
 80042a4:	40014000 	.word	0x40014000
 80042a8:	00010007 	.word	0x00010007

080042ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e049      	b.n	8004352 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f841 	bl	800435a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3304      	adds	r3, #4
 80042e8:	4619      	mov	r1, r3
 80042ea:	4610      	mov	r0, r2
 80042ec:	f001 f82c 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
	...

08004370 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d109      	bne.n	8004394 <HAL_TIM_PWM_Start+0x24>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	e03c      	b.n	800440e <HAL_TIM_PWM_Start+0x9e>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2b04      	cmp	r3, #4
 8004398:	d109      	bne.n	80043ae <HAL_TIM_PWM_Start+0x3e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	bf14      	ite	ne
 80043a6:	2301      	movne	r3, #1
 80043a8:	2300      	moveq	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	e02f      	b.n	800440e <HAL_TIM_PWM_Start+0x9e>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d109      	bne.n	80043c8 <HAL_TIM_PWM_Start+0x58>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	bf14      	ite	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	2300      	moveq	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e022      	b.n	800440e <HAL_TIM_PWM_Start+0x9e>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d109      	bne.n	80043e2 <HAL_TIM_PWM_Start+0x72>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	bf14      	ite	ne
 80043da:	2301      	movne	r3, #1
 80043dc:	2300      	moveq	r3, #0
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	e015      	b.n	800440e <HAL_TIM_PWM_Start+0x9e>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d109      	bne.n	80043fc <HAL_TIM_PWM_Start+0x8c>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	e008      	b.n	800440e <HAL_TIM_PWM_Start+0x9e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e09c      	b.n	8004550 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <HAL_TIM_PWM_Start+0xb6>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004424:	e023      	b.n	800446e <HAL_TIM_PWM_Start+0xfe>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d104      	bne.n	8004436 <HAL_TIM_PWM_Start+0xc6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004434:	e01b      	b.n	800446e <HAL_TIM_PWM_Start+0xfe>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d104      	bne.n	8004446 <HAL_TIM_PWM_Start+0xd6>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004444:	e013      	b.n	800446e <HAL_TIM_PWM_Start+0xfe>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b0c      	cmp	r3, #12
 800444a:	d104      	bne.n	8004456 <HAL_TIM_PWM_Start+0xe6>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004454:	e00b      	b.n	800446e <HAL_TIM_PWM_Start+0xfe>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b10      	cmp	r3, #16
 800445a:	d104      	bne.n	8004466 <HAL_TIM_PWM_Start+0xf6>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004464:	e003      	b.n	800446e <HAL_TIM_PWM_Start+0xfe>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2202      	movs	r2, #2
 800446a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2201      	movs	r2, #1
 8004474:	6839      	ldr	r1, [r7, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f001 fc94 	bl	8005da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a35      	ldr	r2, [pc, #212]	; (8004558 <HAL_TIM_PWM_Start+0x1e8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d013      	beq.n	80044ae <HAL_TIM_PWM_Start+0x13e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a34      	ldr	r2, [pc, #208]	; (800455c <HAL_TIM_PWM_Start+0x1ec>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00e      	beq.n	80044ae <HAL_TIM_PWM_Start+0x13e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a32      	ldr	r2, [pc, #200]	; (8004560 <HAL_TIM_PWM_Start+0x1f0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d009      	beq.n	80044ae <HAL_TIM_PWM_Start+0x13e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a31      	ldr	r2, [pc, #196]	; (8004564 <HAL_TIM_PWM_Start+0x1f4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d004      	beq.n	80044ae <HAL_TIM_PWM_Start+0x13e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a2f      	ldr	r2, [pc, #188]	; (8004568 <HAL_TIM_PWM_Start+0x1f8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d101      	bne.n	80044b2 <HAL_TIM_PWM_Start+0x142>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <HAL_TIM_PWM_Start+0x144>
 80044b2:	2300      	movs	r3, #0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a22      	ldr	r2, [pc, #136]	; (8004558 <HAL_TIM_PWM_Start+0x1e8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d01d      	beq.n	800450e <HAL_TIM_PWM_Start+0x19e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044da:	d018      	beq.n	800450e <HAL_TIM_PWM_Start+0x19e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a22      	ldr	r2, [pc, #136]	; (800456c <HAL_TIM_PWM_Start+0x1fc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d013      	beq.n	800450e <HAL_TIM_PWM_Start+0x19e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a21      	ldr	r2, [pc, #132]	; (8004570 <HAL_TIM_PWM_Start+0x200>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00e      	beq.n	800450e <HAL_TIM_PWM_Start+0x19e>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1f      	ldr	r2, [pc, #124]	; (8004574 <HAL_TIM_PWM_Start+0x204>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d009      	beq.n	800450e <HAL_TIM_PWM_Start+0x19e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a17      	ldr	r2, [pc, #92]	; (800455c <HAL_TIM_PWM_Start+0x1ec>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <HAL_TIM_PWM_Start+0x19e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a15      	ldr	r2, [pc, #84]	; (8004560 <HAL_TIM_PWM_Start+0x1f0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d115      	bne.n	800453a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	4b18      	ldr	r3, [pc, #96]	; (8004578 <HAL_TIM_PWM_Start+0x208>)
 8004516:	4013      	ands	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b06      	cmp	r3, #6
 800451e:	d015      	beq.n	800454c <HAL_TIM_PWM_Start+0x1dc>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004526:	d011      	beq.n	800454c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004538:	e008      	b.n	800454c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	e000      	b.n	800454e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40013400 	.word	0x40013400
 8004560:	40014000 	.word	0x40014000
 8004564:	40014400 	.word	0x40014400
 8004568:	40014800 	.word	0x40014800
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800
 8004574:	40000c00 	.word	0x40000c00
 8004578:	00010007 	.word	0x00010007

0800457c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d109      	bne.n	80045a8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	e03c      	b.n	8004622 <HAL_TIM_PWM_Start_DMA+0xa6>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d109      	bne.n	80045c2 <HAL_TIM_PWM_Start_DMA+0x46>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	e02f      	b.n	8004622 <HAL_TIM_PWM_Start_DMA+0xa6>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d109      	bne.n	80045dc <HAL_TIM_PWM_Start_DMA+0x60>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	e022      	b.n	8004622 <HAL_TIM_PWM_Start_DMA+0xa6>
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b0c      	cmp	r3, #12
 80045e0:	d109      	bne.n	80045f6 <HAL_TIM_PWM_Start_DMA+0x7a>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	bf0c      	ite	eq
 80045ee:	2301      	moveq	r3, #1
 80045f0:	2300      	movne	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	e015      	b.n	8004622 <HAL_TIM_PWM_Start_DMA+0xa6>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b10      	cmp	r3, #16
 80045fa:	d109      	bne.n	8004610 <HAL_TIM_PWM_Start_DMA+0x94>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	e008      	b.n	8004622 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	bf0c      	ite	eq
 800461c:	2301      	moveq	r3, #1
 800461e:	2300      	movne	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004626:	2302      	movs	r3, #2
 8004628:	e1ab      	b.n	8004982 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d109      	bne.n	8004644 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	bf0c      	ite	eq
 800463c:	2301      	moveq	r3, #1
 800463e:	2300      	movne	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e03c      	b.n	80046be <HAL_TIM_PWM_Start_DMA+0x142>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b04      	cmp	r3, #4
 8004648:	d109      	bne.n	800465e <HAL_TIM_PWM_Start_DMA+0xe2>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	bf0c      	ite	eq
 8004656:	2301      	moveq	r3, #1
 8004658:	2300      	movne	r3, #0
 800465a:	b2db      	uxtb	r3, r3
 800465c:	e02f      	b.n	80046be <HAL_TIM_PWM_Start_DMA+0x142>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d109      	bne.n	8004678 <HAL_TIM_PWM_Start_DMA+0xfc>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	bf0c      	ite	eq
 8004670:	2301      	moveq	r3, #1
 8004672:	2300      	movne	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	e022      	b.n	80046be <HAL_TIM_PWM_Start_DMA+0x142>
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b0c      	cmp	r3, #12
 800467c:	d109      	bne.n	8004692 <HAL_TIM_PWM_Start_DMA+0x116>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	bf0c      	ite	eq
 800468a:	2301      	moveq	r3, #1
 800468c:	2300      	movne	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	e015      	b.n	80046be <HAL_TIM_PWM_Start_DMA+0x142>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b10      	cmp	r3, #16
 8004696:	d109      	bne.n	80046ac <HAL_TIM_PWM_Start_DMA+0x130>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	e008      	b.n	80046be <HAL_TIM_PWM_Start_DMA+0x142>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d034      	beq.n	800472c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_TIM_PWM_Start_DMA+0x152>
 80046c8:	887b      	ldrh	r3, [r7, #2]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e157      	b.n	8004982 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d104      	bne.n	80046e2 <HAL_TIM_PWM_Start_DMA+0x166>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046e0:	e026      	b.n	8004730 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d104      	bne.n	80046f2 <HAL_TIM_PWM_Start_DMA+0x176>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f0:	e01e      	b.n	8004730 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d104      	bne.n	8004702 <HAL_TIM_PWM_Start_DMA+0x186>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004700:	e016      	b.n	8004730 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b0c      	cmp	r3, #12
 8004706:	d104      	bne.n	8004712 <HAL_TIM_PWM_Start_DMA+0x196>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004710:	e00e      	b.n	8004730 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b10      	cmp	r3, #16
 8004716:	d104      	bne.n	8004722 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004720:	e006      	b.n	8004730 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2202      	movs	r2, #2
 8004726:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800472a:	e001      	b.n	8004730 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e128      	b.n	8004982 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b0c      	cmp	r3, #12
 8004734:	f200 80ae 	bhi.w	8004894 <HAL_TIM_PWM_Start_DMA+0x318>
 8004738:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	08004775 	.word	0x08004775
 8004744:	08004895 	.word	0x08004895
 8004748:	08004895 	.word	0x08004895
 800474c:	08004895 	.word	0x08004895
 8004750:	080047bd 	.word	0x080047bd
 8004754:	08004895 	.word	0x08004895
 8004758:	08004895 	.word	0x08004895
 800475c:	08004895 	.word	0x08004895
 8004760:	08004805 	.word	0x08004805
 8004764:	08004895 	.word	0x08004895
 8004768:	08004895 	.word	0x08004895
 800476c:	08004895 	.word	0x08004895
 8004770:	0800484d 	.word	0x0800484d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	4a84      	ldr	r2, [pc, #528]	; (800498c <HAL_TIM_PWM_Start_DMA+0x410>)
 800477a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	4a83      	ldr	r2, [pc, #524]	; (8004990 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004782:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	4a82      	ldr	r2, [pc, #520]	; (8004994 <HAL_TIM_PWM_Start_DMA+0x418>)
 800478a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3334      	adds	r3, #52	; 0x34
 8004798:	461a      	mov	r2, r3
 800479a:	887b      	ldrh	r3, [r7, #2]
 800479c:	f7fd fe8c 	bl	80024b8 <HAL_DMA_Start_IT>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e0eb      	b.n	8004982 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b8:	60da      	str	r2, [r3, #12]
      break;
 80047ba:	e06e      	b.n	800489a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	4a72      	ldr	r2, [pc, #456]	; (800498c <HAL_TIM_PWM_Start_DMA+0x410>)
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	4a71      	ldr	r2, [pc, #452]	; (8004990 <HAL_TIM_PWM_Start_DMA+0x414>)
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	4a70      	ldr	r2, [pc, #448]	; (8004994 <HAL_TIM_PWM_Start_DMA+0x418>)
 80047d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3338      	adds	r3, #56	; 0x38
 80047e0:	461a      	mov	r2, r3
 80047e2:	887b      	ldrh	r3, [r7, #2]
 80047e4:	f7fd fe68 	bl	80024b8 <HAL_DMA_Start_IT>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0c7      	b.n	8004982 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004800:	60da      	str	r2, [r3, #12]
      break;
 8004802:	e04a      	b.n	800489a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	4a60      	ldr	r2, [pc, #384]	; (800498c <HAL_TIM_PWM_Start_DMA+0x410>)
 800480a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	4a5f      	ldr	r2, [pc, #380]	; (8004990 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004812:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	4a5e      	ldr	r2, [pc, #376]	; (8004994 <HAL_TIM_PWM_Start_DMA+0x418>)
 800481a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	333c      	adds	r3, #60	; 0x3c
 8004828:	461a      	mov	r2, r3
 800482a:	887b      	ldrh	r3, [r7, #2]
 800482c:	f7fd fe44 	bl	80024b8 <HAL_DMA_Start_IT>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e0a3      	b.n	8004982 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004848:	60da      	str	r2, [r3, #12]
      break;
 800484a:	e026      	b.n	800489a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	4a4e      	ldr	r2, [pc, #312]	; (800498c <HAL_TIM_PWM_Start_DMA+0x410>)
 8004852:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	4a4d      	ldr	r2, [pc, #308]	; (8004990 <HAL_TIM_PWM_Start_DMA+0x414>)
 800485a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	4a4c      	ldr	r2, [pc, #304]	; (8004994 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004862:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3340      	adds	r3, #64	; 0x40
 8004870:	461a      	mov	r2, r3
 8004872:	887b      	ldrh	r3, [r7, #2]
 8004874:	f7fd fe20 	bl	80024b8 <HAL_DMA_Start_IT>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e07f      	b.n	8004982 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004890:	60da      	str	r2, [r3, #12]
      break;
 8004892:	e002      	b.n	800489a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	75fb      	strb	r3, [r7, #23]
      break;
 8004898:	bf00      	nop
  }

  if (status == HAL_OK)
 800489a:	7dfb      	ldrb	r3, [r7, #23]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d16f      	bne.n	8004980 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2201      	movs	r2, #1
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f001 fa7b 	bl	8005da4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a39      	ldr	r2, [pc, #228]	; (8004998 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d013      	beq.n	80048e0 <HAL_TIM_PWM_Start_DMA+0x364>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a37      	ldr	r2, [pc, #220]	; (800499c <HAL_TIM_PWM_Start_DMA+0x420>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00e      	beq.n	80048e0 <HAL_TIM_PWM_Start_DMA+0x364>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a36      	ldr	r2, [pc, #216]	; (80049a0 <HAL_TIM_PWM_Start_DMA+0x424>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d009      	beq.n	80048e0 <HAL_TIM_PWM_Start_DMA+0x364>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a34      	ldr	r2, [pc, #208]	; (80049a4 <HAL_TIM_PWM_Start_DMA+0x428>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <HAL_TIM_PWM_Start_DMA+0x364>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a33      	ldr	r2, [pc, #204]	; (80049a8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d101      	bne.n	80048e4 <HAL_TIM_PWM_Start_DMA+0x368>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <HAL_TIM_PWM_Start_DMA+0x36a>
 80048e4:	2300      	movs	r3, #0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a26      	ldr	r2, [pc, #152]	; (8004998 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d01d      	beq.n	8004940 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490c:	d018      	beq.n	8004940 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a26      	ldr	r2, [pc, #152]	; (80049ac <HAL_TIM_PWM_Start_DMA+0x430>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d013      	beq.n	8004940 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a24      	ldr	r2, [pc, #144]	; (80049b0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00e      	beq.n	8004940 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a23      	ldr	r2, [pc, #140]	; (80049b4 <HAL_TIM_PWM_Start_DMA+0x438>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d009      	beq.n	8004940 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1a      	ldr	r2, [pc, #104]	; (800499c <HAL_TIM_PWM_Start_DMA+0x420>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a19      	ldr	r2, [pc, #100]	; (80049a0 <HAL_TIM_PWM_Start_DMA+0x424>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d115      	bne.n	800496c <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	4b1c      	ldr	r3, [pc, #112]	; (80049b8 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8004948:	4013      	ands	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b06      	cmp	r3, #6
 8004950:	d015      	beq.n	800497e <HAL_TIM_PWM_Start_DMA+0x402>
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004958:	d011      	beq.n	800497e <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496a:	e008      	b.n	800497e <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	e000      	b.n	8004980 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004980:	7dfb      	ldrb	r3, [r7, #23]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	08005239 	.word	0x08005239
 8004990:	080052e1 	.word	0x080052e1
 8004994:	080051a7 	.word	0x080051a7
 8004998:	40012c00 	.word	0x40012c00
 800499c:	40013400 	.word	0x40013400
 80049a0:	40014000 	.word	0x40014000
 80049a4:	40014400 	.word	0x40014400
 80049a8:	40014800 	.word	0x40014800
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	00010007 	.word	0x00010007

080049bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e049      	b.n	8004a62 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f841 	bl	8004a6a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4619      	mov	r1, r3
 80049fa:	4610      	mov	r0, r2
 80049fc:	f000 fca4 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <HAL_TIM_IC_Start+0x1a>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	e023      	b.n	8004ae2 <HAL_TIM_IC_Start+0x62>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_IC_Start+0x2a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	e01b      	b.n	8004ae2 <HAL_TIM_IC_Start+0x62>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_IC_Start+0x3a>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	e013      	b.n	8004ae2 <HAL_TIM_IC_Start+0x62>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b0c      	cmp	r3, #12
 8004abe:	d104      	bne.n	8004aca <HAL_TIM_IC_Start+0x4a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	e00b      	b.n	8004ae2 <HAL_TIM_IC_Start+0x62>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d104      	bne.n	8004ada <HAL_TIM_IC_Start+0x5a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	e003      	b.n	8004ae2 <HAL_TIM_IC_Start+0x62>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d104      	bne.n	8004af4 <HAL_TIM_IC_Start+0x74>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	e013      	b.n	8004b1c <HAL_TIM_IC_Start+0x9c>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d104      	bne.n	8004b04 <HAL_TIM_IC_Start+0x84>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	e00b      	b.n	8004b1c <HAL_TIM_IC_Start+0x9c>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d104      	bne.n	8004b14 <HAL_TIM_IC_Start+0x94>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e003      	b.n	8004b1c <HAL_TIM_IC_Start+0x9c>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d102      	bne.n	8004b2a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b24:	7bbb      	ldrb	r3, [r7, #14]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d001      	beq.n	8004b2e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e092      	b.n	8004c54 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d104      	bne.n	8004b3e <HAL_TIM_IC_Start+0xbe>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b3c:	e023      	b.n	8004b86 <HAL_TIM_IC_Start+0x106>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d104      	bne.n	8004b4e <HAL_TIM_IC_Start+0xce>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b4c:	e01b      	b.n	8004b86 <HAL_TIM_IC_Start+0x106>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d104      	bne.n	8004b5e <HAL_TIM_IC_Start+0xde>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b5c:	e013      	b.n	8004b86 <HAL_TIM_IC_Start+0x106>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b0c      	cmp	r3, #12
 8004b62:	d104      	bne.n	8004b6e <HAL_TIM_IC_Start+0xee>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b6c:	e00b      	b.n	8004b86 <HAL_TIM_IC_Start+0x106>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b10      	cmp	r3, #16
 8004b72:	d104      	bne.n	8004b7e <HAL_TIM_IC_Start+0xfe>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b7c:	e003      	b.n	8004b86 <HAL_TIM_IC_Start+0x106>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2202      	movs	r2, #2
 8004b82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d104      	bne.n	8004b96 <HAL_TIM_IC_Start+0x116>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b94:	e013      	b.n	8004bbe <HAL_TIM_IC_Start+0x13e>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d104      	bne.n	8004ba6 <HAL_TIM_IC_Start+0x126>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ba4:	e00b      	b.n	8004bbe <HAL_TIM_IC_Start+0x13e>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d104      	bne.n	8004bb6 <HAL_TIM_IC_Start+0x136>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bb4:	e003      	b.n	8004bbe <HAL_TIM_IC_Start+0x13e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	6839      	ldr	r1, [r7, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f001 f8ec 	bl	8005da4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a22      	ldr	r2, [pc, #136]	; (8004c5c <HAL_TIM_IC_Start+0x1dc>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d01d      	beq.n	8004c12 <HAL_TIM_IC_Start+0x192>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bde:	d018      	beq.n	8004c12 <HAL_TIM_IC_Start+0x192>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1e      	ldr	r2, [pc, #120]	; (8004c60 <HAL_TIM_IC_Start+0x1e0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d013      	beq.n	8004c12 <HAL_TIM_IC_Start+0x192>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1d      	ldr	r2, [pc, #116]	; (8004c64 <HAL_TIM_IC_Start+0x1e4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00e      	beq.n	8004c12 <HAL_TIM_IC_Start+0x192>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1b      	ldr	r2, [pc, #108]	; (8004c68 <HAL_TIM_IC_Start+0x1e8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d009      	beq.n	8004c12 <HAL_TIM_IC_Start+0x192>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1a      	ldr	r2, [pc, #104]	; (8004c6c <HAL_TIM_IC_Start+0x1ec>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d004      	beq.n	8004c12 <HAL_TIM_IC_Start+0x192>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a18      	ldr	r2, [pc, #96]	; (8004c70 <HAL_TIM_IC_Start+0x1f0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d115      	bne.n	8004c3e <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	4b16      	ldr	r3, [pc, #88]	; (8004c74 <HAL_TIM_IC_Start+0x1f4>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b06      	cmp	r3, #6
 8004c22:	d015      	beq.n	8004c50 <HAL_TIM_IC_Start+0x1d0>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2a:	d011      	beq.n	8004c50 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3c:	e008      	b.n	8004c50 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0201 	orr.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e000      	b.n	8004c52 <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40000c00 	.word	0x40000c00
 8004c6c:	40013400 	.word	0x40013400
 8004c70:	40014000 	.word	0x40014000
 8004c74:	00010007 	.word	0x00010007

08004c78 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e088      	b.n	8004da8 <HAL_TIM_IC_ConfigChannel+0x130>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d11b      	bne.n	8004cdc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	6819      	ldr	r1, [r3, #0]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f000 feb8 	bl	8005a28 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 020c 	bic.w	r2, r2, #12
 8004cc6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6999      	ldr	r1, [r3, #24]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	619a      	str	r2, [r3, #24]
 8004cda:	e060      	b.n	8004d9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d11c      	bne.n	8004d1c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	6819      	ldr	r1, [r3, #0]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f000 ff36 	bl	8005b62 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699a      	ldr	r2, [r3, #24]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d04:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6999      	ldr	r1, [r3, #24]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	021a      	lsls	r2, r3, #8
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	619a      	str	r2, [r3, #24]
 8004d1a:	e040      	b.n	8004d9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d11b      	bne.n	8004d5a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	6819      	ldr	r1, [r3, #0]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f000 ff83 	bl	8005c3c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 020c 	bic.w	r2, r2, #12
 8004d44:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69d9      	ldr	r1, [r3, #28]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	61da      	str	r2, [r3, #28]
 8004d58:	e021      	b.n	8004d9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b0c      	cmp	r3, #12
 8004d5e:	d11c      	bne.n	8004d9a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6818      	ldr	r0, [r3, #0]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	6819      	ldr	r1, [r3, #0]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f000 ffa0 	bl	8005cb4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69da      	ldr	r2, [r3, #28]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d82:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	69d9      	ldr	r1, [r3, #28]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	021a      	lsls	r2, r3, #8
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	61da      	str	r2, [r3, #28]
 8004d98:	e001      	b.n	8004d9e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e0ff      	b.n	8004fce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b14      	cmp	r3, #20
 8004dda:	f200 80f0 	bhi.w	8004fbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004dde:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004e39 	.word	0x08004e39
 8004de8:	08004fbf 	.word	0x08004fbf
 8004dec:	08004fbf 	.word	0x08004fbf
 8004df0:	08004fbf 	.word	0x08004fbf
 8004df4:	08004e79 	.word	0x08004e79
 8004df8:	08004fbf 	.word	0x08004fbf
 8004dfc:	08004fbf 	.word	0x08004fbf
 8004e00:	08004fbf 	.word	0x08004fbf
 8004e04:	08004ebb 	.word	0x08004ebb
 8004e08:	08004fbf 	.word	0x08004fbf
 8004e0c:	08004fbf 	.word	0x08004fbf
 8004e10:	08004fbf 	.word	0x08004fbf
 8004e14:	08004efb 	.word	0x08004efb
 8004e18:	08004fbf 	.word	0x08004fbf
 8004e1c:	08004fbf 	.word	0x08004fbf
 8004e20:	08004fbf 	.word	0x08004fbf
 8004e24:	08004f3d 	.word	0x08004f3d
 8004e28:	08004fbf 	.word	0x08004fbf
 8004e2c:	08004fbf 	.word	0x08004fbf
 8004e30:	08004fbf 	.word	0x08004fbf
 8004e34:	08004f7d 	.word	0x08004f7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fb1c 	bl	800547c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0208 	orr.w	r2, r2, #8
 8004e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0204 	bic.w	r2, r2, #4
 8004e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6999      	ldr	r1, [r3, #24]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	619a      	str	r2, [r3, #24]
      break;
 8004e76:	e0a5      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fb8c 	bl	800559c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6999      	ldr	r1, [r3, #24]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	021a      	lsls	r2, r3, #8
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	619a      	str	r2, [r3, #24]
      break;
 8004eb8:	e084      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fbf5 	bl	80056b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0208 	orr.w	r2, r2, #8
 8004ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69da      	ldr	r2, [r3, #28]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0204 	bic.w	r2, r2, #4
 8004ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69d9      	ldr	r1, [r3, #28]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	61da      	str	r2, [r3, #28]
      break;
 8004ef8:	e064      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fc5d 	bl	80057c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69d9      	ldr	r1, [r3, #28]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	021a      	lsls	r2, r3, #8
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	61da      	str	r2, [r3, #28]
      break;
 8004f3a:	e043      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fca6 	bl	8005894 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0208 	orr.w	r2, r2, #8
 8004f56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0204 	bic.w	r2, r2, #4
 8004f66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f7a:	e023      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fcea 	bl	800595c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	021a      	lsls	r2, r3, #8
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fbc:	e002      	b.n	8004fc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop

08004fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e0b6      	b.n	8005162 <HAL_TIM_ConfigClockSource+0x18a>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005012:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800501e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005030:	d03e      	beq.n	80050b0 <HAL_TIM_ConfigClockSource+0xd8>
 8005032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005036:	f200 8087 	bhi.w	8005148 <HAL_TIM_ConfigClockSource+0x170>
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503e:	f000 8086 	beq.w	800514e <HAL_TIM_ConfigClockSource+0x176>
 8005042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005046:	d87f      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x170>
 8005048:	2b70      	cmp	r3, #112	; 0x70
 800504a:	d01a      	beq.n	8005082 <HAL_TIM_ConfigClockSource+0xaa>
 800504c:	2b70      	cmp	r3, #112	; 0x70
 800504e:	d87b      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x170>
 8005050:	2b60      	cmp	r3, #96	; 0x60
 8005052:	d050      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x11e>
 8005054:	2b60      	cmp	r3, #96	; 0x60
 8005056:	d877      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x170>
 8005058:	2b50      	cmp	r3, #80	; 0x50
 800505a:	d03c      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0xfe>
 800505c:	2b50      	cmp	r3, #80	; 0x50
 800505e:	d873      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x170>
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d058      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x13e>
 8005064:	2b40      	cmp	r3, #64	; 0x40
 8005066:	d86f      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x170>
 8005068:	2b30      	cmp	r3, #48	; 0x30
 800506a:	d064      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0x15e>
 800506c:	2b30      	cmp	r3, #48	; 0x30
 800506e:	d86b      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x170>
 8005070:	2b20      	cmp	r3, #32
 8005072:	d060      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0x15e>
 8005074:	2b20      	cmp	r3, #32
 8005076:	d867      	bhi.n	8005148 <HAL_TIM_ConfigClockSource+0x170>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d05c      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0x15e>
 800507c:	2b10      	cmp	r3, #16
 800507e:	d05a      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0x15e>
 8005080:	e062      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6818      	ldr	r0, [r3, #0]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	6899      	ldr	r1, [r3, #8]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f000 fe67 	bl	8005d64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	609a      	str	r2, [r3, #8]
      break;
 80050ae:	e04f      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	6899      	ldr	r1, [r3, #8]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f000 fe50 	bl	8005d64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050d2:	609a      	str	r2, [r3, #8]
      break;
 80050d4:	e03c      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6859      	ldr	r1, [r3, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f000 fd0e 	bl	8005b04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2150      	movs	r1, #80	; 0x50
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fe1d 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 80050f4:	e02c      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6859      	ldr	r1, [r3, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	461a      	mov	r2, r3
 8005104:	f000 fd6a 	bl	8005bdc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2160      	movs	r1, #96	; 0x60
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fe0d 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 8005114:	e01c      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	6859      	ldr	r1, [r3, #4]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	461a      	mov	r2, r3
 8005124:	f000 fcee 	bl	8005b04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2140      	movs	r1, #64	; 0x40
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fdfd 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 8005134:	e00c      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4619      	mov	r1, r3
 8005140:	4610      	mov	r0, r2
 8005142:	f000 fdf4 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 8005146:	e003      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	73fb      	strb	r3, [r7, #15]
      break;
 800514c:	e000      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800514e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005160:	7bfb      	ldrb	r3, [r7, #15]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b084      	sub	sp, #16
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d107      	bne.n	80051ce <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2201      	movs	r2, #1
 80051c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051cc:	e02a      	b.n	8005224 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d107      	bne.n	80051e8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2202      	movs	r2, #2
 80051dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e6:	e01d      	b.n	8005224 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d107      	bne.n	8005202 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2204      	movs	r2, #4
 80051f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005200:	e010      	b.n	8005224 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	429a      	cmp	r2, r3
 800520a:	d107      	bne.n	800521c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2208      	movs	r2, #8
 8005210:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800521a:	e003      	b.n	8005224 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f7ff ffb4 	bl	8005192 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	771a      	strb	r2, [r3, #28]
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	429a      	cmp	r2, r3
 800524e:	d10b      	bne.n	8005268 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d136      	bne.n	80052cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005266:	e031      	b.n	80052cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	429a      	cmp	r2, r3
 8005270:	d10b      	bne.n	800528a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2202      	movs	r2, #2
 8005276:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d125      	bne.n	80052cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005288:	e020      	b.n	80052cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	d10b      	bne.n	80052ac <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2204      	movs	r2, #4
 8005298:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d114      	bne.n	80052cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052aa:	e00f      	b.n	80052cc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d10a      	bne.n	80052cc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2208      	movs	r2, #8
 80052ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d103      	bne.n	80052cc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff ff4c 	bl	800516a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	771a      	strb	r2, [r3, #28]
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d103      	bne.n	8005300 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	771a      	strb	r2, [r3, #28]
 80052fe:	e019      	b.n	8005334 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	429a      	cmp	r2, r3
 8005308:	d103      	bne.n	8005312 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2202      	movs	r2, #2
 800530e:	771a      	strb	r2, [r3, #28]
 8005310:	e010      	b.n	8005334 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	429a      	cmp	r2, r3
 800531a:	d103      	bne.n	8005324 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2204      	movs	r2, #4
 8005320:	771a      	strb	r2, [r3, #28]
 8005322:	e007      	b.n	8005334 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	429a      	cmp	r2, r3
 800532c:	d102      	bne.n	8005334 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2208      	movs	r2, #8
 8005332:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7ff ff22 	bl	800517e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	771a      	strb	r2, [r3, #28]
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a40      	ldr	r2, [pc, #256]	; (800545c <TIM_Base_SetConfig+0x114>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d013      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005366:	d00f      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a3d      	ldr	r2, [pc, #244]	; (8005460 <TIM_Base_SetConfig+0x118>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00b      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a3c      	ldr	r2, [pc, #240]	; (8005464 <TIM_Base_SetConfig+0x11c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d007      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a3b      	ldr	r2, [pc, #236]	; (8005468 <TIM_Base_SetConfig+0x120>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d003      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a3a      	ldr	r2, [pc, #232]	; (800546c <TIM_Base_SetConfig+0x124>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d108      	bne.n	800539a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2f      	ldr	r2, [pc, #188]	; (800545c <TIM_Base_SetConfig+0x114>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d01f      	beq.n	80053e2 <TIM_Base_SetConfig+0x9a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a8:	d01b      	beq.n	80053e2 <TIM_Base_SetConfig+0x9a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2c      	ldr	r2, [pc, #176]	; (8005460 <TIM_Base_SetConfig+0x118>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d017      	beq.n	80053e2 <TIM_Base_SetConfig+0x9a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2b      	ldr	r2, [pc, #172]	; (8005464 <TIM_Base_SetConfig+0x11c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d013      	beq.n	80053e2 <TIM_Base_SetConfig+0x9a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2a      	ldr	r2, [pc, #168]	; (8005468 <TIM_Base_SetConfig+0x120>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00f      	beq.n	80053e2 <TIM_Base_SetConfig+0x9a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a29      	ldr	r2, [pc, #164]	; (800546c <TIM_Base_SetConfig+0x124>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00b      	beq.n	80053e2 <TIM_Base_SetConfig+0x9a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a28      	ldr	r2, [pc, #160]	; (8005470 <TIM_Base_SetConfig+0x128>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d007      	beq.n	80053e2 <TIM_Base_SetConfig+0x9a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a27      	ldr	r2, [pc, #156]	; (8005474 <TIM_Base_SetConfig+0x12c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d003      	beq.n	80053e2 <TIM_Base_SetConfig+0x9a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a26      	ldr	r2, [pc, #152]	; (8005478 <TIM_Base_SetConfig+0x130>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d108      	bne.n	80053f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a10      	ldr	r2, [pc, #64]	; (800545c <TIM_Base_SetConfig+0x114>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00f      	beq.n	8005440 <TIM_Base_SetConfig+0xf8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a12      	ldr	r2, [pc, #72]	; (800546c <TIM_Base_SetConfig+0x124>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00b      	beq.n	8005440 <TIM_Base_SetConfig+0xf8>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a11      	ldr	r2, [pc, #68]	; (8005470 <TIM_Base_SetConfig+0x128>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d007      	beq.n	8005440 <TIM_Base_SetConfig+0xf8>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a10      	ldr	r2, [pc, #64]	; (8005474 <TIM_Base_SetConfig+0x12c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <TIM_Base_SetConfig+0xf8>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a0f      	ldr	r2, [pc, #60]	; (8005478 <TIM_Base_SetConfig+0x130>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d103      	bne.n	8005448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	615a      	str	r2, [r3, #20]
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40012c00 	.word	0x40012c00
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800
 8005468:	40000c00 	.word	0x40000c00
 800546c:	40013400 	.word	0x40013400
 8005470:	40014000 	.word	0x40014000
 8005474:	40014400 	.word	0x40014400
 8005478:	40014800 	.word	0x40014800

0800547c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	f023 0201 	bic.w	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0303 	bic.w	r3, r3, #3
 80054b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 0302 	bic.w	r3, r3, #2
 80054c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a2c      	ldr	r2, [pc, #176]	; (8005588 <TIM_OC1_SetConfig+0x10c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00f      	beq.n	80054fc <TIM_OC1_SetConfig+0x80>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a2b      	ldr	r2, [pc, #172]	; (800558c <TIM_OC1_SetConfig+0x110>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d00b      	beq.n	80054fc <TIM_OC1_SetConfig+0x80>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a2a      	ldr	r2, [pc, #168]	; (8005590 <TIM_OC1_SetConfig+0x114>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d007      	beq.n	80054fc <TIM_OC1_SetConfig+0x80>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a29      	ldr	r2, [pc, #164]	; (8005594 <TIM_OC1_SetConfig+0x118>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d003      	beq.n	80054fc <TIM_OC1_SetConfig+0x80>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a28      	ldr	r2, [pc, #160]	; (8005598 <TIM_OC1_SetConfig+0x11c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d10c      	bne.n	8005516 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f023 0308 	bic.w	r3, r3, #8
 8005502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f023 0304 	bic.w	r3, r3, #4
 8005514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a1b      	ldr	r2, [pc, #108]	; (8005588 <TIM_OC1_SetConfig+0x10c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00f      	beq.n	800553e <TIM_OC1_SetConfig+0xc2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a1a      	ldr	r2, [pc, #104]	; (800558c <TIM_OC1_SetConfig+0x110>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00b      	beq.n	800553e <TIM_OC1_SetConfig+0xc2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a19      	ldr	r2, [pc, #100]	; (8005590 <TIM_OC1_SetConfig+0x114>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d007      	beq.n	800553e <TIM_OC1_SetConfig+0xc2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a18      	ldr	r2, [pc, #96]	; (8005594 <TIM_OC1_SetConfig+0x118>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d003      	beq.n	800553e <TIM_OC1_SetConfig+0xc2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a17      	ldr	r2, [pc, #92]	; (8005598 <TIM_OC1_SetConfig+0x11c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d111      	bne.n	8005562 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800554c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	621a      	str	r2, [r3, #32]
}
 800557c:	bf00      	nop
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	40012c00 	.word	0x40012c00
 800558c:	40013400 	.word	0x40013400
 8005590:	40014000 	.word	0x40014000
 8005594:	40014400 	.word	0x40014400
 8005598:	40014800 	.word	0x40014800

0800559c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	f023 0210 	bic.w	r2, r3, #16
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	021b      	lsls	r3, r3, #8
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f023 0320 	bic.w	r3, r3, #32
 80055ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a28      	ldr	r2, [pc, #160]	; (800569c <TIM_OC2_SetConfig+0x100>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_OC2_SetConfig+0x6c>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a27      	ldr	r2, [pc, #156]	; (80056a0 <TIM_OC2_SetConfig+0x104>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d10d      	bne.n	8005624 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800560e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005622:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a1d      	ldr	r2, [pc, #116]	; (800569c <TIM_OC2_SetConfig+0x100>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00f      	beq.n	800564c <TIM_OC2_SetConfig+0xb0>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a1c      	ldr	r2, [pc, #112]	; (80056a0 <TIM_OC2_SetConfig+0x104>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00b      	beq.n	800564c <TIM_OC2_SetConfig+0xb0>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a1b      	ldr	r2, [pc, #108]	; (80056a4 <TIM_OC2_SetConfig+0x108>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d007      	beq.n	800564c <TIM_OC2_SetConfig+0xb0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a1a      	ldr	r2, [pc, #104]	; (80056a8 <TIM_OC2_SetConfig+0x10c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d003      	beq.n	800564c <TIM_OC2_SetConfig+0xb0>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a19      	ldr	r2, [pc, #100]	; (80056ac <TIM_OC2_SetConfig+0x110>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d113      	bne.n	8005674 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800565a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	621a      	str	r2, [r3, #32]
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40012c00 	.word	0x40012c00
 80056a0:	40013400 	.word	0x40013400
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40014400 	.word	0x40014400
 80056ac:	40014800 	.word	0x40014800

080056b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0303 	bic.w	r3, r3, #3
 80056ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	021b      	lsls	r3, r3, #8
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a27      	ldr	r2, [pc, #156]	; (80057ac <TIM_OC3_SetConfig+0xfc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d003      	beq.n	800571a <TIM_OC3_SetConfig+0x6a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <TIM_OC3_SetConfig+0x100>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d10d      	bne.n	8005736 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005720:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a1c      	ldr	r2, [pc, #112]	; (80057ac <TIM_OC3_SetConfig+0xfc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00f      	beq.n	800575e <TIM_OC3_SetConfig+0xae>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a1b      	ldr	r2, [pc, #108]	; (80057b0 <TIM_OC3_SetConfig+0x100>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00b      	beq.n	800575e <TIM_OC3_SetConfig+0xae>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a1a      	ldr	r2, [pc, #104]	; (80057b4 <TIM_OC3_SetConfig+0x104>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d007      	beq.n	800575e <TIM_OC3_SetConfig+0xae>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a19      	ldr	r2, [pc, #100]	; (80057b8 <TIM_OC3_SetConfig+0x108>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d003      	beq.n	800575e <TIM_OC3_SetConfig+0xae>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a18      	ldr	r2, [pc, #96]	; (80057bc <TIM_OC3_SetConfig+0x10c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d113      	bne.n	8005786 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800576c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	621a      	str	r2, [r3, #32]
}
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40013400 	.word	0x40013400
 80057b4:	40014000 	.word	0x40014000
 80057b8:	40014400 	.word	0x40014400
 80057bc:	40014800 	.word	0x40014800

080057c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	021b      	lsls	r3, r3, #8
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800580e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	031b      	lsls	r3, r3, #12
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a18      	ldr	r2, [pc, #96]	; (8005880 <TIM_OC4_SetConfig+0xc0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00f      	beq.n	8005844 <TIM_OC4_SetConfig+0x84>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a17      	ldr	r2, [pc, #92]	; (8005884 <TIM_OC4_SetConfig+0xc4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00b      	beq.n	8005844 <TIM_OC4_SetConfig+0x84>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a16      	ldr	r2, [pc, #88]	; (8005888 <TIM_OC4_SetConfig+0xc8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d007      	beq.n	8005844 <TIM_OC4_SetConfig+0x84>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a15      	ldr	r2, [pc, #84]	; (800588c <TIM_OC4_SetConfig+0xcc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d003      	beq.n	8005844 <TIM_OC4_SetConfig+0x84>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a14      	ldr	r2, [pc, #80]	; (8005890 <TIM_OC4_SetConfig+0xd0>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d109      	bne.n	8005858 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800584a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	019b      	lsls	r3, r3, #6
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	40012c00 	.word	0x40012c00
 8005884:	40013400 	.word	0x40013400
 8005888:	40014000 	.word	0x40014000
 800588c:	40014400 	.word	0x40014400
 8005890:	40014800 	.word	0x40014800

08005894 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	041b      	lsls	r3, r3, #16
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a17      	ldr	r2, [pc, #92]	; (8005948 <TIM_OC5_SetConfig+0xb4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00f      	beq.n	800590e <TIM_OC5_SetConfig+0x7a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a16      	ldr	r2, [pc, #88]	; (800594c <TIM_OC5_SetConfig+0xb8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00b      	beq.n	800590e <TIM_OC5_SetConfig+0x7a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a15      	ldr	r2, [pc, #84]	; (8005950 <TIM_OC5_SetConfig+0xbc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d007      	beq.n	800590e <TIM_OC5_SetConfig+0x7a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a14      	ldr	r2, [pc, #80]	; (8005954 <TIM_OC5_SetConfig+0xc0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d003      	beq.n	800590e <TIM_OC5_SetConfig+0x7a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a13      	ldr	r2, [pc, #76]	; (8005958 <TIM_OC5_SetConfig+0xc4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d109      	bne.n	8005922 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005914:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	021b      	lsls	r3, r3, #8
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	4313      	orrs	r3, r2
 8005920:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	621a      	str	r2, [r3, #32]
}
 800593c:	bf00      	nop
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	40012c00 	.word	0x40012c00
 800594c:	40013400 	.word	0x40013400
 8005950:	40014000 	.word	0x40014000
 8005954:	40014400 	.word	0x40014400
 8005958:	40014800 	.word	0x40014800

0800595c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800598a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800598e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	051b      	lsls	r3, r3, #20
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <TIM_OC6_SetConfig+0xb8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00f      	beq.n	80059d8 <TIM_OC6_SetConfig+0x7c>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <TIM_OC6_SetConfig+0xbc>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00b      	beq.n	80059d8 <TIM_OC6_SetConfig+0x7c>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a16      	ldr	r2, [pc, #88]	; (8005a1c <TIM_OC6_SetConfig+0xc0>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d007      	beq.n	80059d8 <TIM_OC6_SetConfig+0x7c>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <TIM_OC6_SetConfig+0xc4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_OC6_SetConfig+0x7c>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a14      	ldr	r2, [pc, #80]	; (8005a24 <TIM_OC6_SetConfig+0xc8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d109      	bne.n	80059ec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	029b      	lsls	r3, r3, #10
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40012c00 	.word	0x40012c00
 8005a18:	40013400 	.word	0x40013400
 8005a1c:	40014000 	.word	0x40014000
 8005a20:	40014400 	.word	0x40014400
 8005a24:	40014800 	.word	0x40014800

08005a28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	f023 0201 	bic.w	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4a26      	ldr	r2, [pc, #152]	; (8005aec <TIM_TI1_SetConfig+0xc4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d017      	beq.n	8005a86 <TIM_TI1_SetConfig+0x5e>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5c:	d013      	beq.n	8005a86 <TIM_TI1_SetConfig+0x5e>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4a23      	ldr	r2, [pc, #140]	; (8005af0 <TIM_TI1_SetConfig+0xc8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00f      	beq.n	8005a86 <TIM_TI1_SetConfig+0x5e>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4a22      	ldr	r2, [pc, #136]	; (8005af4 <TIM_TI1_SetConfig+0xcc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00b      	beq.n	8005a86 <TIM_TI1_SetConfig+0x5e>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4a21      	ldr	r2, [pc, #132]	; (8005af8 <TIM_TI1_SetConfig+0xd0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d007      	beq.n	8005a86 <TIM_TI1_SetConfig+0x5e>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4a20      	ldr	r2, [pc, #128]	; (8005afc <TIM_TI1_SetConfig+0xd4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d003      	beq.n	8005a86 <TIM_TI1_SetConfig+0x5e>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4a1f      	ldr	r2, [pc, #124]	; (8005b00 <TIM_TI1_SetConfig+0xd8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d101      	bne.n	8005a8a <TIM_TI1_SetConfig+0x62>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <TIM_TI1_SetConfig+0x64>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d008      	beq.n	8005aa2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	e003      	b.n	8005aaa <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f043 0301 	orr.w	r3, r3, #1
 8005aa8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f023 030a 	bic.w	r3, r3, #10
 8005ac4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f003 030a 	and.w	r3, r3, #10
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	621a      	str	r2, [r3, #32]
}
 8005ade:	bf00      	nop
 8005ae0:	371c      	adds	r7, #28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40012c00 	.word	0x40012c00
 8005af0:	40000400 	.word	0x40000400
 8005af4:	40000800 	.word	0x40000800
 8005af8:	40000c00 	.word	0x40000c00
 8005afc:	40013400 	.word	0x40013400
 8005b00:	40014000 	.word	0x40014000

08005b04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f023 0201 	bic.w	r2, r3, #1
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f023 030a 	bic.w	r3, r3, #10
 8005b40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	621a      	str	r2, [r3, #32]
}
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b087      	sub	sp, #28
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
 8005b6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	f023 0210 	bic.w	r2, r3, #16
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	021b      	lsls	r3, r3, #8
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ba0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	031b      	lsls	r3, r3, #12
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bb4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	621a      	str	r2, [r3, #32]
}
 8005bd0:	bf00      	nop
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	f023 0210 	bic.w	r2, r3, #16
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	031b      	lsls	r3, r3, #12
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	011b      	lsls	r3, r3, #4
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	621a      	str	r2, [r3, #32]
}
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f023 0303 	bic.w	r3, r3, #3
 8005c68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005c8c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	021b      	lsls	r3, r3, #8
 8005c92:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	621a      	str	r2, [r3, #32]
}
 8005ca8:	bf00      	nop
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
 8005cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	021b      	lsls	r3, r3, #8
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cf2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	031b      	lsls	r3, r3, #12
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005d06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	031b      	lsls	r3, r3, #12
 8005d0c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b085      	sub	sp, #20
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f043 0307 	orr.w	r3, r3, #7
 8005d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	609a      	str	r2, [r3, #8]
}
 8005d58:	bf00      	nop
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	021a      	lsls	r2, r3, #8
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	431a      	orrs	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	609a      	str	r2, [r3, #8]
}
 8005d98:	bf00      	nop
 8005d9a:	371c      	adds	r7, #28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f003 031f 	and.w	r3, r3, #31
 8005db6:	2201      	movs	r2, #1
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a1a      	ldr	r2, [r3, #32]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	401a      	ands	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a1a      	ldr	r2, [r3, #32]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f003 031f 	and.w	r3, r3, #31
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e068      	b.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a2e      	ldr	r2, [pc, #184]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d004      	beq.n	8005e3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a2d      	ldr	r2, [pc, #180]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d108      	bne.n	8005e4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1e      	ldr	r2, [pc, #120]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d01d      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7a:	d018      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1b      	ldr	r2, [pc, #108]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d013      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1a      	ldr	r2, [pc, #104]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00e      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a18      	ldr	r2, [pc, #96]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d009      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a13      	ldr	r2, [pc, #76]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d004      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a14      	ldr	r2, [pc, #80]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d10c      	bne.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40012c00 	.word	0x40012c00
 8005eec:	40013400 	.word	0x40013400
 8005ef0:	40000400 	.word	0x40000400
 8005ef4:	40000800 	.word	0x40000800
 8005ef8:	40000c00 	.word	0x40000c00
 8005efc:	40014000 	.word	0x40014000

08005f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e040      	b.n	8005f94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fb fef2 	bl	8001d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2224      	movs	r2, #36	; 0x24
 8005f2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0201 	bic.w	r2, r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f992 	bl	8006268 <UART_SetConfig>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e022      	b.n	8005f94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fc3e 	bl	80067d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fcc5 	bl	800691c <UART_CheckIdleState>
 8005f92:	4603      	mov	r3, r0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	; 0x28
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	f040 8082 	bne.w	80060ba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <HAL_UART_Transmit+0x26>
 8005fbc:	88fb      	ldrh	r3, [r7, #6]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e07a      	b.n	80060bc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_UART_Transmit+0x38>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e073      	b.n	80060bc <HAL_UART_Transmit+0x120>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2221      	movs	r2, #33	; 0x21
 8005fe8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fea:	f7fc f86b 	bl	80020c4 <HAL_GetTick>
 8005fee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	88fa      	ldrh	r2, [r7, #6]
 8005ff4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	88fa      	ldrh	r2, [r7, #6]
 8005ffc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006008:	d108      	bne.n	800601c <HAL_UART_Transmit+0x80>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d104      	bne.n	800601c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	e003      	b.n	8006024 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006020:	2300      	movs	r3, #0
 8006022:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800602c:	e02d      	b.n	800608a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2200      	movs	r2, #0
 8006036:	2180      	movs	r1, #128	; 0x80
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 fcb8 	bl	80069ae <UART_WaitOnFlagUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e039      	b.n	80060bc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10b      	bne.n	8006066 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	881a      	ldrh	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800605a:	b292      	uxth	r2, r2
 800605c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	3302      	adds	r3, #2
 8006062:	61bb      	str	r3, [r7, #24]
 8006064:	e008      	b.n	8006078 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	781a      	ldrb	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	b292      	uxth	r2, r2
 8006070:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	3301      	adds	r3, #1
 8006076:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1cb      	bne.n	800602e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2200      	movs	r2, #0
 800609e:	2140      	movs	r1, #64	; 0x40
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 fc84 	bl	80069ae <UART_WaitOnFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e005      	b.n	80060bc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e000      	b.n	80060bc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80060ba:	2302      	movs	r3, #2
  }
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3720      	adds	r7, #32
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08a      	sub	sp, #40	; 0x28
 80060c8:	af02      	add	r7, sp, #8
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	4613      	mov	r3, r2
 80060d2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060d8:	2b20      	cmp	r3, #32
 80060da:	f040 80bf 	bne.w	800625c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_UART_Receive+0x26>
 80060e4:	88fb      	ldrh	r3, [r7, #6]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e0b7      	b.n	800625e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_UART_Receive+0x38>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e0b0      	b.n	800625e <HAL_UART_Receive+0x19a>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2222      	movs	r2, #34	; 0x22
 8006110:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006118:	f7fb ffd4 	bl	80020c4 <HAL_GetTick>
 800611c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	88fa      	ldrh	r2, [r7, #6]
 8006122:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	88fa      	ldrh	r2, [r7, #6]
 800612a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006136:	d10e      	bne.n	8006156 <HAL_UART_Receive+0x92>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d105      	bne.n	800614c <HAL_UART_Receive+0x88>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006146:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800614a:	e02d      	b.n	80061a8 <HAL_UART_Receive+0xe4>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	22ff      	movs	r2, #255	; 0xff
 8006150:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006154:	e028      	b.n	80061a8 <HAL_UART_Receive+0xe4>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10d      	bne.n	800617a <HAL_UART_Receive+0xb6>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d104      	bne.n	8006170 <HAL_UART_Receive+0xac>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	22ff      	movs	r2, #255	; 0xff
 800616a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800616e:	e01b      	b.n	80061a8 <HAL_UART_Receive+0xe4>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	227f      	movs	r2, #127	; 0x7f
 8006174:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006178:	e016      	b.n	80061a8 <HAL_UART_Receive+0xe4>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006182:	d10d      	bne.n	80061a0 <HAL_UART_Receive+0xdc>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d104      	bne.n	8006196 <HAL_UART_Receive+0xd2>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	227f      	movs	r2, #127	; 0x7f
 8006190:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006194:	e008      	b.n	80061a8 <HAL_UART_Receive+0xe4>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	223f      	movs	r2, #63	; 0x3f
 800619a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800619e:	e003      	b.n	80061a8 <HAL_UART_Receive+0xe4>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80061ae:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b8:	d108      	bne.n	80061cc <HAL_UART_Receive+0x108>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d104      	bne.n	80061cc <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	e003      	b.n	80061d4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80061dc:	e033      	b.n	8006246 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2200      	movs	r2, #0
 80061e6:	2120      	movs	r1, #32
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 fbe0 	bl	80069ae <UART_WaitOnFlagUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e032      	b.n	800625e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10c      	bne.n	8006218 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006204:	b29a      	uxth	r2, r3
 8006206:	8a7b      	ldrh	r3, [r7, #18]
 8006208:	4013      	ands	r3, r2
 800620a:	b29a      	uxth	r2, r3
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	3302      	adds	r3, #2
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	e00d      	b.n	8006234 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800621e:	b29b      	uxth	r3, r3
 8006220:	b2da      	uxtb	r2, r3
 8006222:	8a7b      	ldrh	r3, [r7, #18]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	4013      	ands	r3, r2
 8006228:	b2da      	uxtb	r2, r3
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	3301      	adds	r3, #1
 8006232:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1c5      	bne.n	80061de <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2220      	movs	r2, #32
 8006256:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	e000      	b.n	800625e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800625c:	2302      	movs	r3, #2
  }
}
 800625e:	4618      	mov	r0, r3
 8006260:	3720      	adds	r7, #32
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800626c:	b08a      	sub	sp, #40	; 0x28
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	431a      	orrs	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	431a      	orrs	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	4313      	orrs	r3, r2
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4ba4      	ldr	r3, [pc, #656]	; (8006528 <UART_SetConfig+0x2c0>)
 8006298:	4013      	ands	r3, r2
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	6812      	ldr	r2, [r2, #0]
 800629e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062a0:	430b      	orrs	r3, r1
 80062a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a99      	ldr	r2, [pc, #612]	; (800652c <UART_SetConfig+0x2c4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d004      	beq.n	80062d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d0:	4313      	orrs	r3, r2
 80062d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e4:	430a      	orrs	r2, r1
 80062e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a90      	ldr	r2, [pc, #576]	; (8006530 <UART_SetConfig+0x2c8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d126      	bne.n	8006340 <UART_SetConfig+0xd8>
 80062f2:	4b90      	ldr	r3, [pc, #576]	; (8006534 <UART_SetConfig+0x2cc>)
 80062f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d81b      	bhi.n	8006338 <UART_SetConfig+0xd0>
 8006300:	a201      	add	r2, pc, #4	; (adr r2, 8006308 <UART_SetConfig+0xa0>)
 8006302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006306:	bf00      	nop
 8006308:	08006319 	.word	0x08006319
 800630c:	08006329 	.word	0x08006329
 8006310:	08006321 	.word	0x08006321
 8006314:	08006331 	.word	0x08006331
 8006318:	2301      	movs	r3, #1
 800631a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800631e:	e116      	b.n	800654e <UART_SetConfig+0x2e6>
 8006320:	2302      	movs	r3, #2
 8006322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006326:	e112      	b.n	800654e <UART_SetConfig+0x2e6>
 8006328:	2304      	movs	r3, #4
 800632a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800632e:	e10e      	b.n	800654e <UART_SetConfig+0x2e6>
 8006330:	2308      	movs	r3, #8
 8006332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006336:	e10a      	b.n	800654e <UART_SetConfig+0x2e6>
 8006338:	2310      	movs	r3, #16
 800633a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800633e:	e106      	b.n	800654e <UART_SetConfig+0x2e6>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a7c      	ldr	r2, [pc, #496]	; (8006538 <UART_SetConfig+0x2d0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d138      	bne.n	80063bc <UART_SetConfig+0x154>
 800634a:	4b7a      	ldr	r3, [pc, #488]	; (8006534 <UART_SetConfig+0x2cc>)
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006350:	f003 030c 	and.w	r3, r3, #12
 8006354:	2b0c      	cmp	r3, #12
 8006356:	d82d      	bhi.n	80063b4 <UART_SetConfig+0x14c>
 8006358:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <UART_SetConfig+0xf8>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	08006395 	.word	0x08006395
 8006364:	080063b5 	.word	0x080063b5
 8006368:	080063b5 	.word	0x080063b5
 800636c:	080063b5 	.word	0x080063b5
 8006370:	080063a5 	.word	0x080063a5
 8006374:	080063b5 	.word	0x080063b5
 8006378:	080063b5 	.word	0x080063b5
 800637c:	080063b5 	.word	0x080063b5
 8006380:	0800639d 	.word	0x0800639d
 8006384:	080063b5 	.word	0x080063b5
 8006388:	080063b5 	.word	0x080063b5
 800638c:	080063b5 	.word	0x080063b5
 8006390:	080063ad 	.word	0x080063ad
 8006394:	2300      	movs	r3, #0
 8006396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800639a:	e0d8      	b.n	800654e <UART_SetConfig+0x2e6>
 800639c:	2302      	movs	r3, #2
 800639e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063a2:	e0d4      	b.n	800654e <UART_SetConfig+0x2e6>
 80063a4:	2304      	movs	r3, #4
 80063a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063aa:	e0d0      	b.n	800654e <UART_SetConfig+0x2e6>
 80063ac:	2308      	movs	r3, #8
 80063ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063b2:	e0cc      	b.n	800654e <UART_SetConfig+0x2e6>
 80063b4:	2310      	movs	r3, #16
 80063b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ba:	e0c8      	b.n	800654e <UART_SetConfig+0x2e6>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a5e      	ldr	r2, [pc, #376]	; (800653c <UART_SetConfig+0x2d4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d125      	bne.n	8006412 <UART_SetConfig+0x1aa>
 80063c6:	4b5b      	ldr	r3, [pc, #364]	; (8006534 <UART_SetConfig+0x2cc>)
 80063c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063d0:	2b30      	cmp	r3, #48	; 0x30
 80063d2:	d016      	beq.n	8006402 <UART_SetConfig+0x19a>
 80063d4:	2b30      	cmp	r3, #48	; 0x30
 80063d6:	d818      	bhi.n	800640a <UART_SetConfig+0x1a2>
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d00a      	beq.n	80063f2 <UART_SetConfig+0x18a>
 80063dc:	2b20      	cmp	r3, #32
 80063de:	d814      	bhi.n	800640a <UART_SetConfig+0x1a2>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <UART_SetConfig+0x182>
 80063e4:	2b10      	cmp	r3, #16
 80063e6:	d008      	beq.n	80063fa <UART_SetConfig+0x192>
 80063e8:	e00f      	b.n	800640a <UART_SetConfig+0x1a2>
 80063ea:	2300      	movs	r3, #0
 80063ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063f0:	e0ad      	b.n	800654e <UART_SetConfig+0x2e6>
 80063f2:	2302      	movs	r3, #2
 80063f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063f8:	e0a9      	b.n	800654e <UART_SetConfig+0x2e6>
 80063fa:	2304      	movs	r3, #4
 80063fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006400:	e0a5      	b.n	800654e <UART_SetConfig+0x2e6>
 8006402:	2308      	movs	r3, #8
 8006404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006408:	e0a1      	b.n	800654e <UART_SetConfig+0x2e6>
 800640a:	2310      	movs	r3, #16
 800640c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006410:	e09d      	b.n	800654e <UART_SetConfig+0x2e6>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a4a      	ldr	r2, [pc, #296]	; (8006540 <UART_SetConfig+0x2d8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d125      	bne.n	8006468 <UART_SetConfig+0x200>
 800641c:	4b45      	ldr	r3, [pc, #276]	; (8006534 <UART_SetConfig+0x2cc>)
 800641e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006422:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006426:	2bc0      	cmp	r3, #192	; 0xc0
 8006428:	d016      	beq.n	8006458 <UART_SetConfig+0x1f0>
 800642a:	2bc0      	cmp	r3, #192	; 0xc0
 800642c:	d818      	bhi.n	8006460 <UART_SetConfig+0x1f8>
 800642e:	2b80      	cmp	r3, #128	; 0x80
 8006430:	d00a      	beq.n	8006448 <UART_SetConfig+0x1e0>
 8006432:	2b80      	cmp	r3, #128	; 0x80
 8006434:	d814      	bhi.n	8006460 <UART_SetConfig+0x1f8>
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <UART_SetConfig+0x1d8>
 800643a:	2b40      	cmp	r3, #64	; 0x40
 800643c:	d008      	beq.n	8006450 <UART_SetConfig+0x1e8>
 800643e:	e00f      	b.n	8006460 <UART_SetConfig+0x1f8>
 8006440:	2300      	movs	r3, #0
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006446:	e082      	b.n	800654e <UART_SetConfig+0x2e6>
 8006448:	2302      	movs	r3, #2
 800644a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800644e:	e07e      	b.n	800654e <UART_SetConfig+0x2e6>
 8006450:	2304      	movs	r3, #4
 8006452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006456:	e07a      	b.n	800654e <UART_SetConfig+0x2e6>
 8006458:	2308      	movs	r3, #8
 800645a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800645e:	e076      	b.n	800654e <UART_SetConfig+0x2e6>
 8006460:	2310      	movs	r3, #16
 8006462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006466:	e072      	b.n	800654e <UART_SetConfig+0x2e6>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a35      	ldr	r2, [pc, #212]	; (8006544 <UART_SetConfig+0x2dc>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d12a      	bne.n	80064c8 <UART_SetConfig+0x260>
 8006472:	4b30      	ldr	r3, [pc, #192]	; (8006534 <UART_SetConfig+0x2cc>)
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800647c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006480:	d01a      	beq.n	80064b8 <UART_SetConfig+0x250>
 8006482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006486:	d81b      	bhi.n	80064c0 <UART_SetConfig+0x258>
 8006488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800648c:	d00c      	beq.n	80064a8 <UART_SetConfig+0x240>
 800648e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006492:	d815      	bhi.n	80064c0 <UART_SetConfig+0x258>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d003      	beq.n	80064a0 <UART_SetConfig+0x238>
 8006498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800649c:	d008      	beq.n	80064b0 <UART_SetConfig+0x248>
 800649e:	e00f      	b.n	80064c0 <UART_SetConfig+0x258>
 80064a0:	2300      	movs	r3, #0
 80064a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064a6:	e052      	b.n	800654e <UART_SetConfig+0x2e6>
 80064a8:	2302      	movs	r3, #2
 80064aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ae:	e04e      	b.n	800654e <UART_SetConfig+0x2e6>
 80064b0:	2304      	movs	r3, #4
 80064b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064b6:	e04a      	b.n	800654e <UART_SetConfig+0x2e6>
 80064b8:	2308      	movs	r3, #8
 80064ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064be:	e046      	b.n	800654e <UART_SetConfig+0x2e6>
 80064c0:	2310      	movs	r3, #16
 80064c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064c6:	e042      	b.n	800654e <UART_SetConfig+0x2e6>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a17      	ldr	r2, [pc, #92]	; (800652c <UART_SetConfig+0x2c4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d13a      	bne.n	8006548 <UART_SetConfig+0x2e0>
 80064d2:	4b18      	ldr	r3, [pc, #96]	; (8006534 <UART_SetConfig+0x2cc>)
 80064d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064e0:	d01a      	beq.n	8006518 <UART_SetConfig+0x2b0>
 80064e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064e6:	d81b      	bhi.n	8006520 <UART_SetConfig+0x2b8>
 80064e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ec:	d00c      	beq.n	8006508 <UART_SetConfig+0x2a0>
 80064ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f2:	d815      	bhi.n	8006520 <UART_SetConfig+0x2b8>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <UART_SetConfig+0x298>
 80064f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064fc:	d008      	beq.n	8006510 <UART_SetConfig+0x2a8>
 80064fe:	e00f      	b.n	8006520 <UART_SetConfig+0x2b8>
 8006500:	2300      	movs	r3, #0
 8006502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006506:	e022      	b.n	800654e <UART_SetConfig+0x2e6>
 8006508:	2302      	movs	r3, #2
 800650a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800650e:	e01e      	b.n	800654e <UART_SetConfig+0x2e6>
 8006510:	2304      	movs	r3, #4
 8006512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006516:	e01a      	b.n	800654e <UART_SetConfig+0x2e6>
 8006518:	2308      	movs	r3, #8
 800651a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800651e:	e016      	b.n	800654e <UART_SetConfig+0x2e6>
 8006520:	2310      	movs	r3, #16
 8006522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006526:	e012      	b.n	800654e <UART_SetConfig+0x2e6>
 8006528:	efff69f3 	.word	0xefff69f3
 800652c:	40008000 	.word	0x40008000
 8006530:	40013800 	.word	0x40013800
 8006534:	40021000 	.word	0x40021000
 8006538:	40004400 	.word	0x40004400
 800653c:	40004800 	.word	0x40004800
 8006540:	40004c00 	.word	0x40004c00
 8006544:	40005000 	.word	0x40005000
 8006548:	2310      	movs	r3, #16
 800654a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a9f      	ldr	r2, [pc, #636]	; (80067d0 <UART_SetConfig+0x568>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d17a      	bne.n	800664e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006558:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800655c:	2b08      	cmp	r3, #8
 800655e:	d824      	bhi.n	80065aa <UART_SetConfig+0x342>
 8006560:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <UART_SetConfig+0x300>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	0800658d 	.word	0x0800658d
 800656c:	080065ab 	.word	0x080065ab
 8006570:	08006595 	.word	0x08006595
 8006574:	080065ab 	.word	0x080065ab
 8006578:	0800659b 	.word	0x0800659b
 800657c:	080065ab 	.word	0x080065ab
 8006580:	080065ab 	.word	0x080065ab
 8006584:	080065ab 	.word	0x080065ab
 8006588:	080065a3 	.word	0x080065a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800658c:	f7fd f886 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 8006590:	61f8      	str	r0, [r7, #28]
        break;
 8006592:	e010      	b.n	80065b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006594:	4b8f      	ldr	r3, [pc, #572]	; (80067d4 <UART_SetConfig+0x56c>)
 8006596:	61fb      	str	r3, [r7, #28]
        break;
 8006598:	e00d      	b.n	80065b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659a:	f7fc ffe7 	bl	800356c <HAL_RCC_GetSysClockFreq>
 800659e:	61f8      	str	r0, [r7, #28]
        break;
 80065a0:	e009      	b.n	80065b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a6:	61fb      	str	r3, [r7, #28]
        break;
 80065a8:	e005      	b.n	80065b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80fb 	beq.w	80067b4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	4413      	add	r3, r2
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d305      	bcc.n	80065da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d903      	bls.n	80065e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80065e0:	e0e8      	b.n	80067b4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2200      	movs	r2, #0
 80065e6:	461c      	mov	r4, r3
 80065e8:	4615      	mov	r5, r2
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	022b      	lsls	r3, r5, #8
 80065f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80065f8:	0222      	lsls	r2, r4, #8
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	6849      	ldr	r1, [r1, #4]
 80065fe:	0849      	lsrs	r1, r1, #1
 8006600:	2000      	movs	r0, #0
 8006602:	4688      	mov	r8, r1
 8006604:	4681      	mov	r9, r0
 8006606:	eb12 0a08 	adds.w	sl, r2, r8
 800660a:	eb43 0b09 	adc.w	fp, r3, r9
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	603b      	str	r3, [r7, #0]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800661c:	4650      	mov	r0, sl
 800661e:	4659      	mov	r1, fp
 8006620:	f7fa fad2 	bl	8000bc8 <__aeabi_uldivmod>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4613      	mov	r3, r2
 800662a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006632:	d308      	bcc.n	8006646 <UART_SetConfig+0x3de>
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800663a:	d204      	bcs.n	8006646 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	60da      	str	r2, [r3, #12]
 8006644:	e0b6      	b.n	80067b4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800664c:	e0b2      	b.n	80067b4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006656:	d15e      	bne.n	8006716 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006658:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800665c:	2b08      	cmp	r3, #8
 800665e:	d828      	bhi.n	80066b2 <UART_SetConfig+0x44a>
 8006660:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <UART_SetConfig+0x400>)
 8006662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006666:	bf00      	nop
 8006668:	0800668d 	.word	0x0800668d
 800666c:	08006695 	.word	0x08006695
 8006670:	0800669d 	.word	0x0800669d
 8006674:	080066b3 	.word	0x080066b3
 8006678:	080066a3 	.word	0x080066a3
 800667c:	080066b3 	.word	0x080066b3
 8006680:	080066b3 	.word	0x080066b3
 8006684:	080066b3 	.word	0x080066b3
 8006688:	080066ab 	.word	0x080066ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800668c:	f7fd f806 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 8006690:	61f8      	str	r0, [r7, #28]
        break;
 8006692:	e014      	b.n	80066be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006694:	f7fd f818 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 8006698:	61f8      	str	r0, [r7, #28]
        break;
 800669a:	e010      	b.n	80066be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800669c:	4b4d      	ldr	r3, [pc, #308]	; (80067d4 <UART_SetConfig+0x56c>)
 800669e:	61fb      	str	r3, [r7, #28]
        break;
 80066a0:	e00d      	b.n	80066be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a2:	f7fc ff63 	bl	800356c <HAL_RCC_GetSysClockFreq>
 80066a6:	61f8      	str	r0, [r7, #28]
        break;
 80066a8:	e009      	b.n	80066be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ae:	61fb      	str	r3, [r7, #28]
        break;
 80066b0:	e005      	b.n	80066be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d077      	beq.n	80067b4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	005a      	lsls	r2, r3, #1
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	441a      	add	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	2b0f      	cmp	r3, #15
 80066de:	d916      	bls.n	800670e <UART_SetConfig+0x4a6>
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e6:	d212      	bcs.n	800670e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	f023 030f 	bic.w	r3, r3, #15
 80066f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	085b      	lsrs	r3, r3, #1
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	8afb      	ldrh	r3, [r7, #22]
 8006700:	4313      	orrs	r3, r2
 8006702:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	8afa      	ldrh	r2, [r7, #22]
 800670a:	60da      	str	r2, [r3, #12]
 800670c:	e052      	b.n	80067b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006714:	e04e      	b.n	80067b4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006716:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800671a:	2b08      	cmp	r3, #8
 800671c:	d827      	bhi.n	800676e <UART_SetConfig+0x506>
 800671e:	a201      	add	r2, pc, #4	; (adr r2, 8006724 <UART_SetConfig+0x4bc>)
 8006720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006724:	08006749 	.word	0x08006749
 8006728:	08006751 	.word	0x08006751
 800672c:	08006759 	.word	0x08006759
 8006730:	0800676f 	.word	0x0800676f
 8006734:	0800675f 	.word	0x0800675f
 8006738:	0800676f 	.word	0x0800676f
 800673c:	0800676f 	.word	0x0800676f
 8006740:	0800676f 	.word	0x0800676f
 8006744:	08006767 	.word	0x08006767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006748:	f7fc ffa8 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 800674c:	61f8      	str	r0, [r7, #28]
        break;
 800674e:	e014      	b.n	800677a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006750:	f7fc ffba 	bl	80036c8 <HAL_RCC_GetPCLK2Freq>
 8006754:	61f8      	str	r0, [r7, #28]
        break;
 8006756:	e010      	b.n	800677a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006758:	4b1e      	ldr	r3, [pc, #120]	; (80067d4 <UART_SetConfig+0x56c>)
 800675a:	61fb      	str	r3, [r7, #28]
        break;
 800675c:	e00d      	b.n	800677a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800675e:	f7fc ff05 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8006762:	61f8      	str	r0, [r7, #28]
        break;
 8006764:	e009      	b.n	800677a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800676a:	61fb      	str	r3, [r7, #28]
        break;
 800676c:	e005      	b.n	800677a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800676e:	2300      	movs	r3, #0
 8006770:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006778:	bf00      	nop
    }

    if (pclk != 0U)
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d019      	beq.n	80067b4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	085a      	lsrs	r2, r3, #1
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	441a      	add	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006792:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	2b0f      	cmp	r3, #15
 8006798:	d909      	bls.n	80067ae <UART_SetConfig+0x546>
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a0:	d205      	bcs.n	80067ae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60da      	str	r2, [r3, #12]
 80067ac:	e002      	b.n	80067b4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80067c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3728      	adds	r7, #40	; 0x28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067ce:	bf00      	nop
 80067d0:	40008000 	.word	0x40008000
 80067d4:	00f42400 	.word	0x00f42400

080067d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	f003 0304 	and.w	r3, r3, #4
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	f003 0310 	and.w	r3, r3, #16
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01a      	beq.n	80068ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068d6:	d10a      	bne.n	80068ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	605a      	str	r2, [r3, #4]
  }
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af02      	add	r7, sp, #8
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800692c:	f7fb fbca 	bl	80020c4 <HAL_GetTick>
 8006930:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	2b08      	cmp	r3, #8
 800693e:	d10e      	bne.n	800695e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006940:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f82d 	bl	80069ae <UART_WaitOnFlagUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e023      	b.n	80069a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b04      	cmp	r3, #4
 800696a:	d10e      	bne.n	800698a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800696c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f817 	bl	80069ae <UART_WaitOnFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e00d      	b.n	80069a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2220      	movs	r2, #32
 8006994:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b09c      	sub	sp, #112	; 0x70
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	603b      	str	r3, [r7, #0]
 80069ba:	4613      	mov	r3, r2
 80069bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069be:	e0a5      	b.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c6:	f000 80a1 	beq.w	8006b0c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ca:	f7fb fb7b 	bl	80020c4 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d302      	bcc.n	80069e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80069da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d13e      	bne.n	8006a5e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80069ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069f4:	667b      	str	r3, [r7, #100]	; 0x64
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e6      	bne.n	80069e0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3308      	adds	r3, #8
 8006a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a24:	f023 0301 	bic.w	r3, r3, #1
 8006a28:	663b      	str	r3, [r7, #96]	; 0x60
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a32:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e5      	bne.n	8006a12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e067      	b.n	8006b2e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d04f      	beq.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a7a:	d147      	bne.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a84:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e6      	bne.n	8006a86 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3308      	adds	r3, #8
 8006abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f023 0301 	bic.w	r3, r3, #1
 8006ace:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ad8:	623a      	str	r2, [r7, #32]
 8006ada:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	69f9      	ldr	r1, [r7, #28]
 8006ade:	6a3a      	ldr	r2, [r7, #32]
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e5      	bne.n	8006ab8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2220      	movs	r2, #32
 8006af0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2220      	movs	r2, #32
 8006af6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e010      	b.n	8006b2e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	69da      	ldr	r2, [r3, #28]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	4013      	ands	r3, r2
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	bf0c      	ite	eq
 8006b1c:	2301      	moveq	r3, #1
 8006b1e:	2300      	movne	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	f43f af4a 	beq.w	80069c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3770      	adds	r7, #112	; 0x70
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <__errno>:
 8006b38:	4b01      	ldr	r3, [pc, #4]	; (8006b40 <__errno+0x8>)
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	2000003c 	.word	0x2000003c

08006b44 <__libc_init_array>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	4d0d      	ldr	r5, [pc, #52]	; (8006b7c <__libc_init_array+0x38>)
 8006b48:	4c0d      	ldr	r4, [pc, #52]	; (8006b80 <__libc_init_array+0x3c>)
 8006b4a:	1b64      	subs	r4, r4, r5
 8006b4c:	10a4      	asrs	r4, r4, #2
 8006b4e:	2600      	movs	r6, #0
 8006b50:	42a6      	cmp	r6, r4
 8006b52:	d109      	bne.n	8006b68 <__libc_init_array+0x24>
 8006b54:	4d0b      	ldr	r5, [pc, #44]	; (8006b84 <__libc_init_array+0x40>)
 8006b56:	4c0c      	ldr	r4, [pc, #48]	; (8006b88 <__libc_init_array+0x44>)
 8006b58:	f002 fdec 	bl	8009734 <_init>
 8006b5c:	1b64      	subs	r4, r4, r5
 8006b5e:	10a4      	asrs	r4, r4, #2
 8006b60:	2600      	movs	r6, #0
 8006b62:	42a6      	cmp	r6, r4
 8006b64:	d105      	bne.n	8006b72 <__libc_init_array+0x2e>
 8006b66:	bd70      	pop	{r4, r5, r6, pc}
 8006b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b6c:	4798      	blx	r3
 8006b6e:	3601      	adds	r6, #1
 8006b70:	e7ee      	b.n	8006b50 <__libc_init_array+0xc>
 8006b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b76:	4798      	blx	r3
 8006b78:	3601      	adds	r6, #1
 8006b7a:	e7f2      	b.n	8006b62 <__libc_init_array+0x1e>
 8006b7c:	08009cd8 	.word	0x08009cd8
 8006b80:	08009cd8 	.word	0x08009cd8
 8006b84:	08009cd8 	.word	0x08009cd8
 8006b88:	08009cdc 	.word	0x08009cdc

08006b8c <memset>:
 8006b8c:	4402      	add	r2, r0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d100      	bne.n	8006b96 <memset+0xa>
 8006b94:	4770      	bx	lr
 8006b96:	f803 1b01 	strb.w	r1, [r3], #1
 8006b9a:	e7f9      	b.n	8006b90 <memset+0x4>

08006b9c <__cvt>:
 8006b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba0:	ec55 4b10 	vmov	r4, r5, d0
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	460e      	mov	r6, r1
 8006ba8:	4619      	mov	r1, r3
 8006baa:	462b      	mov	r3, r5
 8006bac:	bfbb      	ittet	lt
 8006bae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006bb2:	461d      	movlt	r5, r3
 8006bb4:	2300      	movge	r3, #0
 8006bb6:	232d      	movlt	r3, #45	; 0x2d
 8006bb8:	700b      	strb	r3, [r1, #0]
 8006bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006bc0:	4691      	mov	r9, r2
 8006bc2:	f023 0820 	bic.w	r8, r3, #32
 8006bc6:	bfbc      	itt	lt
 8006bc8:	4622      	movlt	r2, r4
 8006bca:	4614      	movlt	r4, r2
 8006bcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bd0:	d005      	beq.n	8006bde <__cvt+0x42>
 8006bd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006bd6:	d100      	bne.n	8006bda <__cvt+0x3e>
 8006bd8:	3601      	adds	r6, #1
 8006bda:	2102      	movs	r1, #2
 8006bdc:	e000      	b.n	8006be0 <__cvt+0x44>
 8006bde:	2103      	movs	r1, #3
 8006be0:	ab03      	add	r3, sp, #12
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	ab02      	add	r3, sp, #8
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	ec45 4b10 	vmov	d0, r4, r5
 8006bec:	4653      	mov	r3, sl
 8006bee:	4632      	mov	r2, r6
 8006bf0:	f000 fe5e 	bl	80078b0 <_dtoa_r>
 8006bf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	d102      	bne.n	8006c02 <__cvt+0x66>
 8006bfc:	f019 0f01 	tst.w	r9, #1
 8006c00:	d022      	beq.n	8006c48 <__cvt+0xac>
 8006c02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c06:	eb07 0906 	add.w	r9, r7, r6
 8006c0a:	d110      	bne.n	8006c2e <__cvt+0x92>
 8006c0c:	783b      	ldrb	r3, [r7, #0]
 8006c0e:	2b30      	cmp	r3, #48	; 0x30
 8006c10:	d10a      	bne.n	8006c28 <__cvt+0x8c>
 8006c12:	2200      	movs	r2, #0
 8006c14:	2300      	movs	r3, #0
 8006c16:	4620      	mov	r0, r4
 8006c18:	4629      	mov	r1, r5
 8006c1a:	f7f9 ff65 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c1e:	b918      	cbnz	r0, 8006c28 <__cvt+0x8c>
 8006c20:	f1c6 0601 	rsb	r6, r6, #1
 8006c24:	f8ca 6000 	str.w	r6, [sl]
 8006c28:	f8da 3000 	ldr.w	r3, [sl]
 8006c2c:	4499      	add	r9, r3
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2300      	movs	r3, #0
 8006c32:	4620      	mov	r0, r4
 8006c34:	4629      	mov	r1, r5
 8006c36:	f7f9 ff57 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c3a:	b108      	cbz	r0, 8006c40 <__cvt+0xa4>
 8006c3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c40:	2230      	movs	r2, #48	; 0x30
 8006c42:	9b03      	ldr	r3, [sp, #12]
 8006c44:	454b      	cmp	r3, r9
 8006c46:	d307      	bcc.n	8006c58 <__cvt+0xbc>
 8006c48:	9b03      	ldr	r3, [sp, #12]
 8006c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c4c:	1bdb      	subs	r3, r3, r7
 8006c4e:	4638      	mov	r0, r7
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	b004      	add	sp, #16
 8006c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c58:	1c59      	adds	r1, r3, #1
 8006c5a:	9103      	str	r1, [sp, #12]
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	e7f0      	b.n	8006c42 <__cvt+0xa6>

08006c60 <__exponent>:
 8006c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c62:	4603      	mov	r3, r0
 8006c64:	2900      	cmp	r1, #0
 8006c66:	bfb8      	it	lt
 8006c68:	4249      	neglt	r1, r1
 8006c6a:	f803 2b02 	strb.w	r2, [r3], #2
 8006c6e:	bfb4      	ite	lt
 8006c70:	222d      	movlt	r2, #45	; 0x2d
 8006c72:	222b      	movge	r2, #43	; 0x2b
 8006c74:	2909      	cmp	r1, #9
 8006c76:	7042      	strb	r2, [r0, #1]
 8006c78:	dd2a      	ble.n	8006cd0 <__exponent+0x70>
 8006c7a:	f10d 0407 	add.w	r4, sp, #7
 8006c7e:	46a4      	mov	ip, r4
 8006c80:	270a      	movs	r7, #10
 8006c82:	46a6      	mov	lr, r4
 8006c84:	460a      	mov	r2, r1
 8006c86:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c8a:	fb07 1516 	mls	r5, r7, r6, r1
 8006c8e:	3530      	adds	r5, #48	; 0x30
 8006c90:	2a63      	cmp	r2, #99	; 0x63
 8006c92:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	dcf1      	bgt.n	8006c82 <__exponent+0x22>
 8006c9e:	3130      	adds	r1, #48	; 0x30
 8006ca0:	f1ae 0502 	sub.w	r5, lr, #2
 8006ca4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ca8:	1c44      	adds	r4, r0, #1
 8006caa:	4629      	mov	r1, r5
 8006cac:	4561      	cmp	r1, ip
 8006cae:	d30a      	bcc.n	8006cc6 <__exponent+0x66>
 8006cb0:	f10d 0209 	add.w	r2, sp, #9
 8006cb4:	eba2 020e 	sub.w	r2, r2, lr
 8006cb8:	4565      	cmp	r5, ip
 8006cba:	bf88      	it	hi
 8006cbc:	2200      	movhi	r2, #0
 8006cbe:	4413      	add	r3, r2
 8006cc0:	1a18      	subs	r0, r3, r0
 8006cc2:	b003      	add	sp, #12
 8006cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006cce:	e7ed      	b.n	8006cac <__exponent+0x4c>
 8006cd0:	2330      	movs	r3, #48	; 0x30
 8006cd2:	3130      	adds	r1, #48	; 0x30
 8006cd4:	7083      	strb	r3, [r0, #2]
 8006cd6:	70c1      	strb	r1, [r0, #3]
 8006cd8:	1d03      	adds	r3, r0, #4
 8006cda:	e7f1      	b.n	8006cc0 <__exponent+0x60>

08006cdc <_printf_float>:
 8006cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	ed2d 8b02 	vpush	{d8}
 8006ce4:	b08d      	sub	sp, #52	; 0x34
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006cec:	4616      	mov	r6, r2
 8006cee:	461f      	mov	r7, r3
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	f001 fd95 	bl	8008820 <_localeconv_r>
 8006cf6:	f8d0 a000 	ldr.w	sl, [r0]
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	f7f9 fa72 	bl	80001e4 <strlen>
 8006d00:	2300      	movs	r3, #0
 8006d02:	930a      	str	r3, [sp, #40]	; 0x28
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	9305      	str	r3, [sp, #20]
 8006d08:	f8d8 3000 	ldr.w	r3, [r8]
 8006d0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d10:	3307      	adds	r3, #7
 8006d12:	f023 0307 	bic.w	r3, r3, #7
 8006d16:	f103 0208 	add.w	r2, r3, #8
 8006d1a:	f8c8 2000 	str.w	r2, [r8]
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d2e:	9307      	str	r3, [sp, #28]
 8006d30:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d34:	ee08 0a10 	vmov	s16, r0
 8006d38:	4b9f      	ldr	r3, [pc, #636]	; (8006fb8 <_printf_float+0x2dc>)
 8006d3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d42:	f7f9 ff03 	bl	8000b4c <__aeabi_dcmpun>
 8006d46:	bb88      	cbnz	r0, 8006dac <_printf_float+0xd0>
 8006d48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d4c:	4b9a      	ldr	r3, [pc, #616]	; (8006fb8 <_printf_float+0x2dc>)
 8006d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d52:	f7f9 fedd 	bl	8000b10 <__aeabi_dcmple>
 8006d56:	bb48      	cbnz	r0, 8006dac <_printf_float+0xd0>
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	4649      	mov	r1, r9
 8006d60:	f7f9 fecc 	bl	8000afc <__aeabi_dcmplt>
 8006d64:	b110      	cbz	r0, 8006d6c <_printf_float+0x90>
 8006d66:	232d      	movs	r3, #45	; 0x2d
 8006d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d6c:	4b93      	ldr	r3, [pc, #588]	; (8006fbc <_printf_float+0x2e0>)
 8006d6e:	4894      	ldr	r0, [pc, #592]	; (8006fc0 <_printf_float+0x2e4>)
 8006d70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d74:	bf94      	ite	ls
 8006d76:	4698      	movls	r8, r3
 8006d78:	4680      	movhi	r8, r0
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	6123      	str	r3, [r4, #16]
 8006d7e:	9b05      	ldr	r3, [sp, #20]
 8006d80:	f023 0204 	bic.w	r2, r3, #4
 8006d84:	6022      	str	r2, [r4, #0]
 8006d86:	f04f 0900 	mov.w	r9, #0
 8006d8a:	9700      	str	r7, [sp, #0]
 8006d8c:	4633      	mov	r3, r6
 8006d8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d90:	4621      	mov	r1, r4
 8006d92:	4628      	mov	r0, r5
 8006d94:	f000 f9d8 	bl	8007148 <_printf_common>
 8006d98:	3001      	adds	r0, #1
 8006d9a:	f040 8090 	bne.w	8006ebe <_printf_float+0x1e2>
 8006d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006da2:	b00d      	add	sp, #52	; 0x34
 8006da4:	ecbd 8b02 	vpop	{d8}
 8006da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dac:	4642      	mov	r2, r8
 8006dae:	464b      	mov	r3, r9
 8006db0:	4640      	mov	r0, r8
 8006db2:	4649      	mov	r1, r9
 8006db4:	f7f9 feca 	bl	8000b4c <__aeabi_dcmpun>
 8006db8:	b140      	cbz	r0, 8006dcc <_printf_float+0xf0>
 8006dba:	464b      	mov	r3, r9
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bfbc      	itt	lt
 8006dc0:	232d      	movlt	r3, #45	; 0x2d
 8006dc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006dc6:	487f      	ldr	r0, [pc, #508]	; (8006fc4 <_printf_float+0x2e8>)
 8006dc8:	4b7f      	ldr	r3, [pc, #508]	; (8006fc8 <_printf_float+0x2ec>)
 8006dca:	e7d1      	b.n	8006d70 <_printf_float+0x94>
 8006dcc:	6863      	ldr	r3, [r4, #4]
 8006dce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006dd2:	9206      	str	r2, [sp, #24]
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	d13f      	bne.n	8006e58 <_printf_float+0x17c>
 8006dd8:	2306      	movs	r3, #6
 8006dda:	6063      	str	r3, [r4, #4]
 8006ddc:	9b05      	ldr	r3, [sp, #20]
 8006dde:	6861      	ldr	r1, [r4, #4]
 8006de0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006de4:	2300      	movs	r3, #0
 8006de6:	9303      	str	r3, [sp, #12]
 8006de8:	ab0a      	add	r3, sp, #40	; 0x28
 8006dea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006dee:	ab09      	add	r3, sp, #36	; 0x24
 8006df0:	ec49 8b10 	vmov	d0, r8, r9
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	6022      	str	r2, [r4, #0]
 8006df8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	f7ff fecd 	bl	8006b9c <__cvt>
 8006e02:	9b06      	ldr	r3, [sp, #24]
 8006e04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e06:	2b47      	cmp	r3, #71	; 0x47
 8006e08:	4680      	mov	r8, r0
 8006e0a:	d108      	bne.n	8006e1e <_printf_float+0x142>
 8006e0c:	1cc8      	adds	r0, r1, #3
 8006e0e:	db02      	blt.n	8006e16 <_printf_float+0x13a>
 8006e10:	6863      	ldr	r3, [r4, #4]
 8006e12:	4299      	cmp	r1, r3
 8006e14:	dd41      	ble.n	8006e9a <_printf_float+0x1be>
 8006e16:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e1a:	fa5f fb8b 	uxtb.w	fp, fp
 8006e1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e22:	d820      	bhi.n	8006e66 <_printf_float+0x18a>
 8006e24:	3901      	subs	r1, #1
 8006e26:	465a      	mov	r2, fp
 8006e28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e2c:	9109      	str	r1, [sp, #36]	; 0x24
 8006e2e:	f7ff ff17 	bl	8006c60 <__exponent>
 8006e32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e34:	1813      	adds	r3, r2, r0
 8006e36:	2a01      	cmp	r2, #1
 8006e38:	4681      	mov	r9, r0
 8006e3a:	6123      	str	r3, [r4, #16]
 8006e3c:	dc02      	bgt.n	8006e44 <_printf_float+0x168>
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	07d2      	lsls	r2, r2, #31
 8006e42:	d501      	bpl.n	8006e48 <_printf_float+0x16c>
 8006e44:	3301      	adds	r3, #1
 8006e46:	6123      	str	r3, [r4, #16]
 8006e48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d09c      	beq.n	8006d8a <_printf_float+0xae>
 8006e50:	232d      	movs	r3, #45	; 0x2d
 8006e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e56:	e798      	b.n	8006d8a <_printf_float+0xae>
 8006e58:	9a06      	ldr	r2, [sp, #24]
 8006e5a:	2a47      	cmp	r2, #71	; 0x47
 8006e5c:	d1be      	bne.n	8006ddc <_printf_float+0x100>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1bc      	bne.n	8006ddc <_printf_float+0x100>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e7b9      	b.n	8006dda <_printf_float+0xfe>
 8006e66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e6a:	d118      	bne.n	8006e9e <_printf_float+0x1c2>
 8006e6c:	2900      	cmp	r1, #0
 8006e6e:	6863      	ldr	r3, [r4, #4]
 8006e70:	dd0b      	ble.n	8006e8a <_printf_float+0x1ae>
 8006e72:	6121      	str	r1, [r4, #16]
 8006e74:	b913      	cbnz	r3, 8006e7c <_printf_float+0x1a0>
 8006e76:	6822      	ldr	r2, [r4, #0]
 8006e78:	07d0      	lsls	r0, r2, #31
 8006e7a:	d502      	bpl.n	8006e82 <_printf_float+0x1a6>
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	440b      	add	r3, r1
 8006e80:	6123      	str	r3, [r4, #16]
 8006e82:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e84:	f04f 0900 	mov.w	r9, #0
 8006e88:	e7de      	b.n	8006e48 <_printf_float+0x16c>
 8006e8a:	b913      	cbnz	r3, 8006e92 <_printf_float+0x1b6>
 8006e8c:	6822      	ldr	r2, [r4, #0]
 8006e8e:	07d2      	lsls	r2, r2, #31
 8006e90:	d501      	bpl.n	8006e96 <_printf_float+0x1ba>
 8006e92:	3302      	adds	r3, #2
 8006e94:	e7f4      	b.n	8006e80 <_printf_float+0x1a4>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e7f2      	b.n	8006e80 <_printf_float+0x1a4>
 8006e9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea0:	4299      	cmp	r1, r3
 8006ea2:	db05      	blt.n	8006eb0 <_printf_float+0x1d4>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	6121      	str	r1, [r4, #16]
 8006ea8:	07d8      	lsls	r0, r3, #31
 8006eaa:	d5ea      	bpl.n	8006e82 <_printf_float+0x1a6>
 8006eac:	1c4b      	adds	r3, r1, #1
 8006eae:	e7e7      	b.n	8006e80 <_printf_float+0x1a4>
 8006eb0:	2900      	cmp	r1, #0
 8006eb2:	bfd4      	ite	le
 8006eb4:	f1c1 0202 	rsble	r2, r1, #2
 8006eb8:	2201      	movgt	r2, #1
 8006eba:	4413      	add	r3, r2
 8006ebc:	e7e0      	b.n	8006e80 <_printf_float+0x1a4>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	055a      	lsls	r2, r3, #21
 8006ec2:	d407      	bmi.n	8006ed4 <_printf_float+0x1f8>
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	4642      	mov	r2, r8
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4628      	mov	r0, r5
 8006ecc:	47b8      	blx	r7
 8006ece:	3001      	adds	r0, #1
 8006ed0:	d12c      	bne.n	8006f2c <_printf_float+0x250>
 8006ed2:	e764      	b.n	8006d9e <_printf_float+0xc2>
 8006ed4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ed8:	f240 80e0 	bls.w	800709c <_printf_float+0x3c0>
 8006edc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f7f9 fe00 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d034      	beq.n	8006f56 <_printf_float+0x27a>
 8006eec:	4a37      	ldr	r2, [pc, #220]	; (8006fcc <_printf_float+0x2f0>)
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	47b8      	blx	r7
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	f43f af51 	beq.w	8006d9e <_printf_float+0xc2>
 8006efc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f00:	429a      	cmp	r2, r3
 8006f02:	db02      	blt.n	8006f0a <_printf_float+0x22e>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	07d8      	lsls	r0, r3, #31
 8006f08:	d510      	bpl.n	8006f2c <_printf_float+0x250>
 8006f0a:	ee18 3a10 	vmov	r3, s16
 8006f0e:	4652      	mov	r2, sl
 8006f10:	4631      	mov	r1, r6
 8006f12:	4628      	mov	r0, r5
 8006f14:	47b8      	blx	r7
 8006f16:	3001      	adds	r0, #1
 8006f18:	f43f af41 	beq.w	8006d9e <_printf_float+0xc2>
 8006f1c:	f04f 0800 	mov.w	r8, #0
 8006f20:	f104 091a 	add.w	r9, r4, #26
 8006f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f26:	3b01      	subs	r3, #1
 8006f28:	4543      	cmp	r3, r8
 8006f2a:	dc09      	bgt.n	8006f40 <_printf_float+0x264>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	079b      	lsls	r3, r3, #30
 8006f30:	f100 8105 	bmi.w	800713e <_printf_float+0x462>
 8006f34:	68e0      	ldr	r0, [r4, #12]
 8006f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f38:	4298      	cmp	r0, r3
 8006f3a:	bfb8      	it	lt
 8006f3c:	4618      	movlt	r0, r3
 8006f3e:	e730      	b.n	8006da2 <_printf_float+0xc6>
 8006f40:	2301      	movs	r3, #1
 8006f42:	464a      	mov	r2, r9
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f43f af27 	beq.w	8006d9e <_printf_float+0xc2>
 8006f50:	f108 0801 	add.w	r8, r8, #1
 8006f54:	e7e6      	b.n	8006f24 <_printf_float+0x248>
 8006f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	dc39      	bgt.n	8006fd0 <_printf_float+0x2f4>
 8006f5c:	4a1b      	ldr	r2, [pc, #108]	; (8006fcc <_printf_float+0x2f0>)
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4631      	mov	r1, r6
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b8      	blx	r7
 8006f66:	3001      	adds	r0, #1
 8006f68:	f43f af19 	beq.w	8006d9e <_printf_float+0xc2>
 8006f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f70:	4313      	orrs	r3, r2
 8006f72:	d102      	bne.n	8006f7a <_printf_float+0x29e>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	07d9      	lsls	r1, r3, #31
 8006f78:	d5d8      	bpl.n	8006f2c <_printf_float+0x250>
 8006f7a:	ee18 3a10 	vmov	r3, s16
 8006f7e:	4652      	mov	r2, sl
 8006f80:	4631      	mov	r1, r6
 8006f82:	4628      	mov	r0, r5
 8006f84:	47b8      	blx	r7
 8006f86:	3001      	adds	r0, #1
 8006f88:	f43f af09 	beq.w	8006d9e <_printf_float+0xc2>
 8006f8c:	f04f 0900 	mov.w	r9, #0
 8006f90:	f104 0a1a 	add.w	sl, r4, #26
 8006f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f96:	425b      	negs	r3, r3
 8006f98:	454b      	cmp	r3, r9
 8006f9a:	dc01      	bgt.n	8006fa0 <_printf_float+0x2c4>
 8006f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f9e:	e792      	b.n	8006ec6 <_printf_float+0x1ea>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	4652      	mov	r2, sl
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	47b8      	blx	r7
 8006faa:	3001      	adds	r0, #1
 8006fac:	f43f aef7 	beq.w	8006d9e <_printf_float+0xc2>
 8006fb0:	f109 0901 	add.w	r9, r9, #1
 8006fb4:	e7ee      	b.n	8006f94 <_printf_float+0x2b8>
 8006fb6:	bf00      	nop
 8006fb8:	7fefffff 	.word	0x7fefffff
 8006fbc:	0800989c 	.word	0x0800989c
 8006fc0:	080098a0 	.word	0x080098a0
 8006fc4:	080098a8 	.word	0x080098a8
 8006fc8:	080098a4 	.word	0x080098a4
 8006fcc:	080098ac 	.word	0x080098ac
 8006fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	bfa8      	it	ge
 8006fd8:	461a      	movge	r2, r3
 8006fda:	2a00      	cmp	r2, #0
 8006fdc:	4691      	mov	r9, r2
 8006fde:	dc37      	bgt.n	8007050 <_printf_float+0x374>
 8006fe0:	f04f 0b00 	mov.w	fp, #0
 8006fe4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fe8:	f104 021a 	add.w	r2, r4, #26
 8006fec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fee:	9305      	str	r3, [sp, #20]
 8006ff0:	eba3 0309 	sub.w	r3, r3, r9
 8006ff4:	455b      	cmp	r3, fp
 8006ff6:	dc33      	bgt.n	8007060 <_printf_float+0x384>
 8006ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	db3b      	blt.n	8007078 <_printf_float+0x39c>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	07da      	lsls	r2, r3, #31
 8007004:	d438      	bmi.n	8007078 <_printf_float+0x39c>
 8007006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007008:	9a05      	ldr	r2, [sp, #20]
 800700a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800700c:	1a9a      	subs	r2, r3, r2
 800700e:	eba3 0901 	sub.w	r9, r3, r1
 8007012:	4591      	cmp	r9, r2
 8007014:	bfa8      	it	ge
 8007016:	4691      	movge	r9, r2
 8007018:	f1b9 0f00 	cmp.w	r9, #0
 800701c:	dc35      	bgt.n	800708a <_printf_float+0x3ae>
 800701e:	f04f 0800 	mov.w	r8, #0
 8007022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007026:	f104 0a1a 	add.w	sl, r4, #26
 800702a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	eba3 0309 	sub.w	r3, r3, r9
 8007034:	4543      	cmp	r3, r8
 8007036:	f77f af79 	ble.w	8006f2c <_printf_float+0x250>
 800703a:	2301      	movs	r3, #1
 800703c:	4652      	mov	r2, sl
 800703e:	4631      	mov	r1, r6
 8007040:	4628      	mov	r0, r5
 8007042:	47b8      	blx	r7
 8007044:	3001      	adds	r0, #1
 8007046:	f43f aeaa 	beq.w	8006d9e <_printf_float+0xc2>
 800704a:	f108 0801 	add.w	r8, r8, #1
 800704e:	e7ec      	b.n	800702a <_printf_float+0x34e>
 8007050:	4613      	mov	r3, r2
 8007052:	4631      	mov	r1, r6
 8007054:	4642      	mov	r2, r8
 8007056:	4628      	mov	r0, r5
 8007058:	47b8      	blx	r7
 800705a:	3001      	adds	r0, #1
 800705c:	d1c0      	bne.n	8006fe0 <_printf_float+0x304>
 800705e:	e69e      	b.n	8006d9e <_printf_float+0xc2>
 8007060:	2301      	movs	r3, #1
 8007062:	4631      	mov	r1, r6
 8007064:	4628      	mov	r0, r5
 8007066:	9205      	str	r2, [sp, #20]
 8007068:	47b8      	blx	r7
 800706a:	3001      	adds	r0, #1
 800706c:	f43f ae97 	beq.w	8006d9e <_printf_float+0xc2>
 8007070:	9a05      	ldr	r2, [sp, #20]
 8007072:	f10b 0b01 	add.w	fp, fp, #1
 8007076:	e7b9      	b.n	8006fec <_printf_float+0x310>
 8007078:	ee18 3a10 	vmov	r3, s16
 800707c:	4652      	mov	r2, sl
 800707e:	4631      	mov	r1, r6
 8007080:	4628      	mov	r0, r5
 8007082:	47b8      	blx	r7
 8007084:	3001      	adds	r0, #1
 8007086:	d1be      	bne.n	8007006 <_printf_float+0x32a>
 8007088:	e689      	b.n	8006d9e <_printf_float+0xc2>
 800708a:	9a05      	ldr	r2, [sp, #20]
 800708c:	464b      	mov	r3, r9
 800708e:	4442      	add	r2, r8
 8007090:	4631      	mov	r1, r6
 8007092:	4628      	mov	r0, r5
 8007094:	47b8      	blx	r7
 8007096:	3001      	adds	r0, #1
 8007098:	d1c1      	bne.n	800701e <_printf_float+0x342>
 800709a:	e680      	b.n	8006d9e <_printf_float+0xc2>
 800709c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800709e:	2a01      	cmp	r2, #1
 80070a0:	dc01      	bgt.n	80070a6 <_printf_float+0x3ca>
 80070a2:	07db      	lsls	r3, r3, #31
 80070a4:	d538      	bpl.n	8007118 <_printf_float+0x43c>
 80070a6:	2301      	movs	r3, #1
 80070a8:	4642      	mov	r2, r8
 80070aa:	4631      	mov	r1, r6
 80070ac:	4628      	mov	r0, r5
 80070ae:	47b8      	blx	r7
 80070b0:	3001      	adds	r0, #1
 80070b2:	f43f ae74 	beq.w	8006d9e <_printf_float+0xc2>
 80070b6:	ee18 3a10 	vmov	r3, s16
 80070ba:	4652      	mov	r2, sl
 80070bc:	4631      	mov	r1, r6
 80070be:	4628      	mov	r0, r5
 80070c0:	47b8      	blx	r7
 80070c2:	3001      	adds	r0, #1
 80070c4:	f43f ae6b 	beq.w	8006d9e <_printf_float+0xc2>
 80070c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070cc:	2200      	movs	r2, #0
 80070ce:	2300      	movs	r3, #0
 80070d0:	f7f9 fd0a 	bl	8000ae8 <__aeabi_dcmpeq>
 80070d4:	b9d8      	cbnz	r0, 800710e <_printf_float+0x432>
 80070d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d8:	f108 0201 	add.w	r2, r8, #1
 80070dc:	3b01      	subs	r3, #1
 80070de:	4631      	mov	r1, r6
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b8      	blx	r7
 80070e4:	3001      	adds	r0, #1
 80070e6:	d10e      	bne.n	8007106 <_printf_float+0x42a>
 80070e8:	e659      	b.n	8006d9e <_printf_float+0xc2>
 80070ea:	2301      	movs	r3, #1
 80070ec:	4652      	mov	r2, sl
 80070ee:	4631      	mov	r1, r6
 80070f0:	4628      	mov	r0, r5
 80070f2:	47b8      	blx	r7
 80070f4:	3001      	adds	r0, #1
 80070f6:	f43f ae52 	beq.w	8006d9e <_printf_float+0xc2>
 80070fa:	f108 0801 	add.w	r8, r8, #1
 80070fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007100:	3b01      	subs	r3, #1
 8007102:	4543      	cmp	r3, r8
 8007104:	dcf1      	bgt.n	80070ea <_printf_float+0x40e>
 8007106:	464b      	mov	r3, r9
 8007108:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800710c:	e6dc      	b.n	8006ec8 <_printf_float+0x1ec>
 800710e:	f04f 0800 	mov.w	r8, #0
 8007112:	f104 0a1a 	add.w	sl, r4, #26
 8007116:	e7f2      	b.n	80070fe <_printf_float+0x422>
 8007118:	2301      	movs	r3, #1
 800711a:	4642      	mov	r2, r8
 800711c:	e7df      	b.n	80070de <_printf_float+0x402>
 800711e:	2301      	movs	r3, #1
 8007120:	464a      	mov	r2, r9
 8007122:	4631      	mov	r1, r6
 8007124:	4628      	mov	r0, r5
 8007126:	47b8      	blx	r7
 8007128:	3001      	adds	r0, #1
 800712a:	f43f ae38 	beq.w	8006d9e <_printf_float+0xc2>
 800712e:	f108 0801 	add.w	r8, r8, #1
 8007132:	68e3      	ldr	r3, [r4, #12]
 8007134:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007136:	1a5b      	subs	r3, r3, r1
 8007138:	4543      	cmp	r3, r8
 800713a:	dcf0      	bgt.n	800711e <_printf_float+0x442>
 800713c:	e6fa      	b.n	8006f34 <_printf_float+0x258>
 800713e:	f04f 0800 	mov.w	r8, #0
 8007142:	f104 0919 	add.w	r9, r4, #25
 8007146:	e7f4      	b.n	8007132 <_printf_float+0x456>

08007148 <_printf_common>:
 8007148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800714c:	4616      	mov	r6, r2
 800714e:	4699      	mov	r9, r3
 8007150:	688a      	ldr	r2, [r1, #8]
 8007152:	690b      	ldr	r3, [r1, #16]
 8007154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007158:	4293      	cmp	r3, r2
 800715a:	bfb8      	it	lt
 800715c:	4613      	movlt	r3, r2
 800715e:	6033      	str	r3, [r6, #0]
 8007160:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007164:	4607      	mov	r7, r0
 8007166:	460c      	mov	r4, r1
 8007168:	b10a      	cbz	r2, 800716e <_printf_common+0x26>
 800716a:	3301      	adds	r3, #1
 800716c:	6033      	str	r3, [r6, #0]
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	0699      	lsls	r1, r3, #26
 8007172:	bf42      	ittt	mi
 8007174:	6833      	ldrmi	r3, [r6, #0]
 8007176:	3302      	addmi	r3, #2
 8007178:	6033      	strmi	r3, [r6, #0]
 800717a:	6825      	ldr	r5, [r4, #0]
 800717c:	f015 0506 	ands.w	r5, r5, #6
 8007180:	d106      	bne.n	8007190 <_printf_common+0x48>
 8007182:	f104 0a19 	add.w	sl, r4, #25
 8007186:	68e3      	ldr	r3, [r4, #12]
 8007188:	6832      	ldr	r2, [r6, #0]
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	42ab      	cmp	r3, r5
 800718e:	dc26      	bgt.n	80071de <_printf_common+0x96>
 8007190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007194:	1e13      	subs	r3, r2, #0
 8007196:	6822      	ldr	r2, [r4, #0]
 8007198:	bf18      	it	ne
 800719a:	2301      	movne	r3, #1
 800719c:	0692      	lsls	r2, r2, #26
 800719e:	d42b      	bmi.n	80071f8 <_printf_common+0xb0>
 80071a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071a4:	4649      	mov	r1, r9
 80071a6:	4638      	mov	r0, r7
 80071a8:	47c0      	blx	r8
 80071aa:	3001      	adds	r0, #1
 80071ac:	d01e      	beq.n	80071ec <_printf_common+0xa4>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	68e5      	ldr	r5, [r4, #12]
 80071b2:	6832      	ldr	r2, [r6, #0]
 80071b4:	f003 0306 	and.w	r3, r3, #6
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	bf08      	it	eq
 80071bc:	1aad      	subeq	r5, r5, r2
 80071be:	68a3      	ldr	r3, [r4, #8]
 80071c0:	6922      	ldr	r2, [r4, #16]
 80071c2:	bf0c      	ite	eq
 80071c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071c8:	2500      	movne	r5, #0
 80071ca:	4293      	cmp	r3, r2
 80071cc:	bfc4      	itt	gt
 80071ce:	1a9b      	subgt	r3, r3, r2
 80071d0:	18ed      	addgt	r5, r5, r3
 80071d2:	2600      	movs	r6, #0
 80071d4:	341a      	adds	r4, #26
 80071d6:	42b5      	cmp	r5, r6
 80071d8:	d11a      	bne.n	8007210 <_printf_common+0xc8>
 80071da:	2000      	movs	r0, #0
 80071dc:	e008      	b.n	80071f0 <_printf_common+0xa8>
 80071de:	2301      	movs	r3, #1
 80071e0:	4652      	mov	r2, sl
 80071e2:	4649      	mov	r1, r9
 80071e4:	4638      	mov	r0, r7
 80071e6:	47c0      	blx	r8
 80071e8:	3001      	adds	r0, #1
 80071ea:	d103      	bne.n	80071f4 <_printf_common+0xac>
 80071ec:	f04f 30ff 	mov.w	r0, #4294967295
 80071f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f4:	3501      	adds	r5, #1
 80071f6:	e7c6      	b.n	8007186 <_printf_common+0x3e>
 80071f8:	18e1      	adds	r1, r4, r3
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	2030      	movs	r0, #48	; 0x30
 80071fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007202:	4422      	add	r2, r4
 8007204:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007208:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800720c:	3302      	adds	r3, #2
 800720e:	e7c7      	b.n	80071a0 <_printf_common+0x58>
 8007210:	2301      	movs	r3, #1
 8007212:	4622      	mov	r2, r4
 8007214:	4649      	mov	r1, r9
 8007216:	4638      	mov	r0, r7
 8007218:	47c0      	blx	r8
 800721a:	3001      	adds	r0, #1
 800721c:	d0e6      	beq.n	80071ec <_printf_common+0xa4>
 800721e:	3601      	adds	r6, #1
 8007220:	e7d9      	b.n	80071d6 <_printf_common+0x8e>
	...

08007224 <_printf_i>:
 8007224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007228:	7e0f      	ldrb	r7, [r1, #24]
 800722a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800722c:	2f78      	cmp	r7, #120	; 0x78
 800722e:	4691      	mov	r9, r2
 8007230:	4680      	mov	r8, r0
 8007232:	460c      	mov	r4, r1
 8007234:	469a      	mov	sl, r3
 8007236:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800723a:	d807      	bhi.n	800724c <_printf_i+0x28>
 800723c:	2f62      	cmp	r7, #98	; 0x62
 800723e:	d80a      	bhi.n	8007256 <_printf_i+0x32>
 8007240:	2f00      	cmp	r7, #0
 8007242:	f000 80d8 	beq.w	80073f6 <_printf_i+0x1d2>
 8007246:	2f58      	cmp	r7, #88	; 0x58
 8007248:	f000 80a3 	beq.w	8007392 <_printf_i+0x16e>
 800724c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007254:	e03a      	b.n	80072cc <_printf_i+0xa8>
 8007256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800725a:	2b15      	cmp	r3, #21
 800725c:	d8f6      	bhi.n	800724c <_printf_i+0x28>
 800725e:	a101      	add	r1, pc, #4	; (adr r1, 8007264 <_printf_i+0x40>)
 8007260:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007264:	080072bd 	.word	0x080072bd
 8007268:	080072d1 	.word	0x080072d1
 800726c:	0800724d 	.word	0x0800724d
 8007270:	0800724d 	.word	0x0800724d
 8007274:	0800724d 	.word	0x0800724d
 8007278:	0800724d 	.word	0x0800724d
 800727c:	080072d1 	.word	0x080072d1
 8007280:	0800724d 	.word	0x0800724d
 8007284:	0800724d 	.word	0x0800724d
 8007288:	0800724d 	.word	0x0800724d
 800728c:	0800724d 	.word	0x0800724d
 8007290:	080073dd 	.word	0x080073dd
 8007294:	08007301 	.word	0x08007301
 8007298:	080073bf 	.word	0x080073bf
 800729c:	0800724d 	.word	0x0800724d
 80072a0:	0800724d 	.word	0x0800724d
 80072a4:	080073ff 	.word	0x080073ff
 80072a8:	0800724d 	.word	0x0800724d
 80072ac:	08007301 	.word	0x08007301
 80072b0:	0800724d 	.word	0x0800724d
 80072b4:	0800724d 	.word	0x0800724d
 80072b8:	080073c7 	.word	0x080073c7
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	1d1a      	adds	r2, r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	602a      	str	r2, [r5, #0]
 80072c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072cc:	2301      	movs	r3, #1
 80072ce:	e0a3      	b.n	8007418 <_printf_i+0x1f4>
 80072d0:	6820      	ldr	r0, [r4, #0]
 80072d2:	6829      	ldr	r1, [r5, #0]
 80072d4:	0606      	lsls	r6, r0, #24
 80072d6:	f101 0304 	add.w	r3, r1, #4
 80072da:	d50a      	bpl.n	80072f2 <_printf_i+0xce>
 80072dc:	680e      	ldr	r6, [r1, #0]
 80072de:	602b      	str	r3, [r5, #0]
 80072e0:	2e00      	cmp	r6, #0
 80072e2:	da03      	bge.n	80072ec <_printf_i+0xc8>
 80072e4:	232d      	movs	r3, #45	; 0x2d
 80072e6:	4276      	negs	r6, r6
 80072e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ec:	485e      	ldr	r0, [pc, #376]	; (8007468 <_printf_i+0x244>)
 80072ee:	230a      	movs	r3, #10
 80072f0:	e019      	b.n	8007326 <_printf_i+0x102>
 80072f2:	680e      	ldr	r6, [r1, #0]
 80072f4:	602b      	str	r3, [r5, #0]
 80072f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072fa:	bf18      	it	ne
 80072fc:	b236      	sxthne	r6, r6
 80072fe:	e7ef      	b.n	80072e0 <_printf_i+0xbc>
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	6820      	ldr	r0, [r4, #0]
 8007304:	1d19      	adds	r1, r3, #4
 8007306:	6029      	str	r1, [r5, #0]
 8007308:	0601      	lsls	r1, r0, #24
 800730a:	d501      	bpl.n	8007310 <_printf_i+0xec>
 800730c:	681e      	ldr	r6, [r3, #0]
 800730e:	e002      	b.n	8007316 <_printf_i+0xf2>
 8007310:	0646      	lsls	r6, r0, #25
 8007312:	d5fb      	bpl.n	800730c <_printf_i+0xe8>
 8007314:	881e      	ldrh	r6, [r3, #0]
 8007316:	4854      	ldr	r0, [pc, #336]	; (8007468 <_printf_i+0x244>)
 8007318:	2f6f      	cmp	r7, #111	; 0x6f
 800731a:	bf0c      	ite	eq
 800731c:	2308      	moveq	r3, #8
 800731e:	230a      	movne	r3, #10
 8007320:	2100      	movs	r1, #0
 8007322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007326:	6865      	ldr	r5, [r4, #4]
 8007328:	60a5      	str	r5, [r4, #8]
 800732a:	2d00      	cmp	r5, #0
 800732c:	bfa2      	ittt	ge
 800732e:	6821      	ldrge	r1, [r4, #0]
 8007330:	f021 0104 	bicge.w	r1, r1, #4
 8007334:	6021      	strge	r1, [r4, #0]
 8007336:	b90e      	cbnz	r6, 800733c <_printf_i+0x118>
 8007338:	2d00      	cmp	r5, #0
 800733a:	d04d      	beq.n	80073d8 <_printf_i+0x1b4>
 800733c:	4615      	mov	r5, r2
 800733e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007342:	fb03 6711 	mls	r7, r3, r1, r6
 8007346:	5dc7      	ldrb	r7, [r0, r7]
 8007348:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800734c:	4637      	mov	r7, r6
 800734e:	42bb      	cmp	r3, r7
 8007350:	460e      	mov	r6, r1
 8007352:	d9f4      	bls.n	800733e <_printf_i+0x11a>
 8007354:	2b08      	cmp	r3, #8
 8007356:	d10b      	bne.n	8007370 <_printf_i+0x14c>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	07de      	lsls	r6, r3, #31
 800735c:	d508      	bpl.n	8007370 <_printf_i+0x14c>
 800735e:	6923      	ldr	r3, [r4, #16]
 8007360:	6861      	ldr	r1, [r4, #4]
 8007362:	4299      	cmp	r1, r3
 8007364:	bfde      	ittt	le
 8007366:	2330      	movle	r3, #48	; 0x30
 8007368:	f805 3c01 	strble.w	r3, [r5, #-1]
 800736c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007370:	1b52      	subs	r2, r2, r5
 8007372:	6122      	str	r2, [r4, #16]
 8007374:	f8cd a000 	str.w	sl, [sp]
 8007378:	464b      	mov	r3, r9
 800737a:	aa03      	add	r2, sp, #12
 800737c:	4621      	mov	r1, r4
 800737e:	4640      	mov	r0, r8
 8007380:	f7ff fee2 	bl	8007148 <_printf_common>
 8007384:	3001      	adds	r0, #1
 8007386:	d14c      	bne.n	8007422 <_printf_i+0x1fe>
 8007388:	f04f 30ff 	mov.w	r0, #4294967295
 800738c:	b004      	add	sp, #16
 800738e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007392:	4835      	ldr	r0, [pc, #212]	; (8007468 <_printf_i+0x244>)
 8007394:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007398:	6829      	ldr	r1, [r5, #0]
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	f851 6b04 	ldr.w	r6, [r1], #4
 80073a0:	6029      	str	r1, [r5, #0]
 80073a2:	061d      	lsls	r5, r3, #24
 80073a4:	d514      	bpl.n	80073d0 <_printf_i+0x1ac>
 80073a6:	07df      	lsls	r7, r3, #31
 80073a8:	bf44      	itt	mi
 80073aa:	f043 0320 	orrmi.w	r3, r3, #32
 80073ae:	6023      	strmi	r3, [r4, #0]
 80073b0:	b91e      	cbnz	r6, 80073ba <_printf_i+0x196>
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	f023 0320 	bic.w	r3, r3, #32
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	2310      	movs	r3, #16
 80073bc:	e7b0      	b.n	8007320 <_printf_i+0xfc>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	f043 0320 	orr.w	r3, r3, #32
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	2378      	movs	r3, #120	; 0x78
 80073c8:	4828      	ldr	r0, [pc, #160]	; (800746c <_printf_i+0x248>)
 80073ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073ce:	e7e3      	b.n	8007398 <_printf_i+0x174>
 80073d0:	0659      	lsls	r1, r3, #25
 80073d2:	bf48      	it	mi
 80073d4:	b2b6      	uxthmi	r6, r6
 80073d6:	e7e6      	b.n	80073a6 <_printf_i+0x182>
 80073d8:	4615      	mov	r5, r2
 80073da:	e7bb      	b.n	8007354 <_printf_i+0x130>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	6826      	ldr	r6, [r4, #0]
 80073e0:	6961      	ldr	r1, [r4, #20]
 80073e2:	1d18      	adds	r0, r3, #4
 80073e4:	6028      	str	r0, [r5, #0]
 80073e6:	0635      	lsls	r5, r6, #24
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	d501      	bpl.n	80073f0 <_printf_i+0x1cc>
 80073ec:	6019      	str	r1, [r3, #0]
 80073ee:	e002      	b.n	80073f6 <_printf_i+0x1d2>
 80073f0:	0670      	lsls	r0, r6, #25
 80073f2:	d5fb      	bpl.n	80073ec <_printf_i+0x1c8>
 80073f4:	8019      	strh	r1, [r3, #0]
 80073f6:	2300      	movs	r3, #0
 80073f8:	6123      	str	r3, [r4, #16]
 80073fa:	4615      	mov	r5, r2
 80073fc:	e7ba      	b.n	8007374 <_printf_i+0x150>
 80073fe:	682b      	ldr	r3, [r5, #0]
 8007400:	1d1a      	adds	r2, r3, #4
 8007402:	602a      	str	r2, [r5, #0]
 8007404:	681d      	ldr	r5, [r3, #0]
 8007406:	6862      	ldr	r2, [r4, #4]
 8007408:	2100      	movs	r1, #0
 800740a:	4628      	mov	r0, r5
 800740c:	f7f8 fef8 	bl	8000200 <memchr>
 8007410:	b108      	cbz	r0, 8007416 <_printf_i+0x1f2>
 8007412:	1b40      	subs	r0, r0, r5
 8007414:	6060      	str	r0, [r4, #4]
 8007416:	6863      	ldr	r3, [r4, #4]
 8007418:	6123      	str	r3, [r4, #16]
 800741a:	2300      	movs	r3, #0
 800741c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007420:	e7a8      	b.n	8007374 <_printf_i+0x150>
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	462a      	mov	r2, r5
 8007426:	4649      	mov	r1, r9
 8007428:	4640      	mov	r0, r8
 800742a:	47d0      	blx	sl
 800742c:	3001      	adds	r0, #1
 800742e:	d0ab      	beq.n	8007388 <_printf_i+0x164>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	079b      	lsls	r3, r3, #30
 8007434:	d413      	bmi.n	800745e <_printf_i+0x23a>
 8007436:	68e0      	ldr	r0, [r4, #12]
 8007438:	9b03      	ldr	r3, [sp, #12]
 800743a:	4298      	cmp	r0, r3
 800743c:	bfb8      	it	lt
 800743e:	4618      	movlt	r0, r3
 8007440:	e7a4      	b.n	800738c <_printf_i+0x168>
 8007442:	2301      	movs	r3, #1
 8007444:	4632      	mov	r2, r6
 8007446:	4649      	mov	r1, r9
 8007448:	4640      	mov	r0, r8
 800744a:	47d0      	blx	sl
 800744c:	3001      	adds	r0, #1
 800744e:	d09b      	beq.n	8007388 <_printf_i+0x164>
 8007450:	3501      	adds	r5, #1
 8007452:	68e3      	ldr	r3, [r4, #12]
 8007454:	9903      	ldr	r1, [sp, #12]
 8007456:	1a5b      	subs	r3, r3, r1
 8007458:	42ab      	cmp	r3, r5
 800745a:	dcf2      	bgt.n	8007442 <_printf_i+0x21e>
 800745c:	e7eb      	b.n	8007436 <_printf_i+0x212>
 800745e:	2500      	movs	r5, #0
 8007460:	f104 0619 	add.w	r6, r4, #25
 8007464:	e7f5      	b.n	8007452 <_printf_i+0x22e>
 8007466:	bf00      	nop
 8007468:	080098ae 	.word	0x080098ae
 800746c:	080098bf 	.word	0x080098bf

08007470 <_puts_r>:
 8007470:	b570      	push	{r4, r5, r6, lr}
 8007472:	460e      	mov	r6, r1
 8007474:	4605      	mov	r5, r0
 8007476:	b118      	cbz	r0, 8007480 <_puts_r+0x10>
 8007478:	6983      	ldr	r3, [r0, #24]
 800747a:	b90b      	cbnz	r3, 8007480 <_puts_r+0x10>
 800747c:	f001 f920 	bl	80086c0 <__sinit>
 8007480:	69ab      	ldr	r3, [r5, #24]
 8007482:	68ac      	ldr	r4, [r5, #8]
 8007484:	b913      	cbnz	r3, 800748c <_puts_r+0x1c>
 8007486:	4628      	mov	r0, r5
 8007488:	f001 f91a 	bl	80086c0 <__sinit>
 800748c:	4b2c      	ldr	r3, [pc, #176]	; (8007540 <_puts_r+0xd0>)
 800748e:	429c      	cmp	r4, r3
 8007490:	d120      	bne.n	80074d4 <_puts_r+0x64>
 8007492:	686c      	ldr	r4, [r5, #4]
 8007494:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007496:	07db      	lsls	r3, r3, #31
 8007498:	d405      	bmi.n	80074a6 <_puts_r+0x36>
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	0598      	lsls	r0, r3, #22
 800749e:	d402      	bmi.n	80074a6 <_puts_r+0x36>
 80074a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074a2:	f001 f9c2 	bl	800882a <__retarget_lock_acquire_recursive>
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	0719      	lsls	r1, r3, #28
 80074aa:	d51d      	bpl.n	80074e8 <_puts_r+0x78>
 80074ac:	6923      	ldr	r3, [r4, #16]
 80074ae:	b1db      	cbz	r3, 80074e8 <_puts_r+0x78>
 80074b0:	3e01      	subs	r6, #1
 80074b2:	68a3      	ldr	r3, [r4, #8]
 80074b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074b8:	3b01      	subs	r3, #1
 80074ba:	60a3      	str	r3, [r4, #8]
 80074bc:	bb39      	cbnz	r1, 800750e <_puts_r+0x9e>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	da38      	bge.n	8007534 <_puts_r+0xc4>
 80074c2:	4622      	mov	r2, r4
 80074c4:	210a      	movs	r1, #10
 80074c6:	4628      	mov	r0, r5
 80074c8:	f000 f886 	bl	80075d8 <__swbuf_r>
 80074cc:	3001      	adds	r0, #1
 80074ce:	d011      	beq.n	80074f4 <_puts_r+0x84>
 80074d0:	250a      	movs	r5, #10
 80074d2:	e011      	b.n	80074f8 <_puts_r+0x88>
 80074d4:	4b1b      	ldr	r3, [pc, #108]	; (8007544 <_puts_r+0xd4>)
 80074d6:	429c      	cmp	r4, r3
 80074d8:	d101      	bne.n	80074de <_puts_r+0x6e>
 80074da:	68ac      	ldr	r4, [r5, #8]
 80074dc:	e7da      	b.n	8007494 <_puts_r+0x24>
 80074de:	4b1a      	ldr	r3, [pc, #104]	; (8007548 <_puts_r+0xd8>)
 80074e0:	429c      	cmp	r4, r3
 80074e2:	bf08      	it	eq
 80074e4:	68ec      	ldreq	r4, [r5, #12]
 80074e6:	e7d5      	b.n	8007494 <_puts_r+0x24>
 80074e8:	4621      	mov	r1, r4
 80074ea:	4628      	mov	r0, r5
 80074ec:	f000 f8c6 	bl	800767c <__swsetup_r>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d0dd      	beq.n	80074b0 <_puts_r+0x40>
 80074f4:	f04f 35ff 	mov.w	r5, #4294967295
 80074f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074fa:	07da      	lsls	r2, r3, #31
 80074fc:	d405      	bmi.n	800750a <_puts_r+0x9a>
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	059b      	lsls	r3, r3, #22
 8007502:	d402      	bmi.n	800750a <_puts_r+0x9a>
 8007504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007506:	f001 f991 	bl	800882c <__retarget_lock_release_recursive>
 800750a:	4628      	mov	r0, r5
 800750c:	bd70      	pop	{r4, r5, r6, pc}
 800750e:	2b00      	cmp	r3, #0
 8007510:	da04      	bge.n	800751c <_puts_r+0xac>
 8007512:	69a2      	ldr	r2, [r4, #24]
 8007514:	429a      	cmp	r2, r3
 8007516:	dc06      	bgt.n	8007526 <_puts_r+0xb6>
 8007518:	290a      	cmp	r1, #10
 800751a:	d004      	beq.n	8007526 <_puts_r+0xb6>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	6022      	str	r2, [r4, #0]
 8007522:	7019      	strb	r1, [r3, #0]
 8007524:	e7c5      	b.n	80074b2 <_puts_r+0x42>
 8007526:	4622      	mov	r2, r4
 8007528:	4628      	mov	r0, r5
 800752a:	f000 f855 	bl	80075d8 <__swbuf_r>
 800752e:	3001      	adds	r0, #1
 8007530:	d1bf      	bne.n	80074b2 <_puts_r+0x42>
 8007532:	e7df      	b.n	80074f4 <_puts_r+0x84>
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	250a      	movs	r5, #10
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	6022      	str	r2, [r4, #0]
 800753c:	701d      	strb	r5, [r3, #0]
 800753e:	e7db      	b.n	80074f8 <_puts_r+0x88>
 8007540:	08009a18 	.word	0x08009a18
 8007544:	08009a38 	.word	0x08009a38
 8007548:	080099f8 	.word	0x080099f8

0800754c <puts>:
 800754c:	4b02      	ldr	r3, [pc, #8]	; (8007558 <puts+0xc>)
 800754e:	4601      	mov	r1, r0
 8007550:	6818      	ldr	r0, [r3, #0]
 8007552:	f7ff bf8d 	b.w	8007470 <_puts_r>
 8007556:	bf00      	nop
 8007558:	2000003c 	.word	0x2000003c

0800755c <rand>:
 800755c:	4b16      	ldr	r3, [pc, #88]	; (80075b8 <rand+0x5c>)
 800755e:	b510      	push	{r4, lr}
 8007560:	681c      	ldr	r4, [r3, #0]
 8007562:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007564:	b9b3      	cbnz	r3, 8007594 <rand+0x38>
 8007566:	2018      	movs	r0, #24
 8007568:	f001 f9c6 	bl	80088f8 <malloc>
 800756c:	63a0      	str	r0, [r4, #56]	; 0x38
 800756e:	b928      	cbnz	r0, 800757c <rand+0x20>
 8007570:	4602      	mov	r2, r0
 8007572:	4b12      	ldr	r3, [pc, #72]	; (80075bc <rand+0x60>)
 8007574:	4812      	ldr	r0, [pc, #72]	; (80075c0 <rand+0x64>)
 8007576:	214e      	movs	r1, #78	; 0x4e
 8007578:	f000 f8ee 	bl	8007758 <__assert_func>
 800757c:	4a11      	ldr	r2, [pc, #68]	; (80075c4 <rand+0x68>)
 800757e:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <rand+0x6c>)
 8007580:	e9c0 2300 	strd	r2, r3, [r0]
 8007584:	4b11      	ldr	r3, [pc, #68]	; (80075cc <rand+0x70>)
 8007586:	6083      	str	r3, [r0, #8]
 8007588:	230b      	movs	r3, #11
 800758a:	8183      	strh	r3, [r0, #12]
 800758c:	2201      	movs	r2, #1
 800758e:	2300      	movs	r3, #0
 8007590:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007594:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007596:	4a0e      	ldr	r2, [pc, #56]	; (80075d0 <rand+0x74>)
 8007598:	6920      	ldr	r0, [r4, #16]
 800759a:	6963      	ldr	r3, [r4, #20]
 800759c:	490d      	ldr	r1, [pc, #52]	; (80075d4 <rand+0x78>)
 800759e:	4342      	muls	r2, r0
 80075a0:	fb01 2203 	mla	r2, r1, r3, r2
 80075a4:	fba0 0101 	umull	r0, r1, r0, r1
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	eb42 0001 	adc.w	r0, r2, r1
 80075ae:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80075b2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80075b6:	bd10      	pop	{r4, pc}
 80075b8:	2000003c 	.word	0x2000003c
 80075bc:	080098d0 	.word	0x080098d0
 80075c0:	080098e7 	.word	0x080098e7
 80075c4:	abcd330e 	.word	0xabcd330e
 80075c8:	e66d1234 	.word	0xe66d1234
 80075cc:	0005deec 	.word	0x0005deec
 80075d0:	5851f42d 	.word	0x5851f42d
 80075d4:	4c957f2d 	.word	0x4c957f2d

080075d8 <__swbuf_r>:
 80075d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075da:	460e      	mov	r6, r1
 80075dc:	4614      	mov	r4, r2
 80075de:	4605      	mov	r5, r0
 80075e0:	b118      	cbz	r0, 80075ea <__swbuf_r+0x12>
 80075e2:	6983      	ldr	r3, [r0, #24]
 80075e4:	b90b      	cbnz	r3, 80075ea <__swbuf_r+0x12>
 80075e6:	f001 f86b 	bl	80086c0 <__sinit>
 80075ea:	4b21      	ldr	r3, [pc, #132]	; (8007670 <__swbuf_r+0x98>)
 80075ec:	429c      	cmp	r4, r3
 80075ee:	d12b      	bne.n	8007648 <__swbuf_r+0x70>
 80075f0:	686c      	ldr	r4, [r5, #4]
 80075f2:	69a3      	ldr	r3, [r4, #24]
 80075f4:	60a3      	str	r3, [r4, #8]
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	071a      	lsls	r2, r3, #28
 80075fa:	d52f      	bpl.n	800765c <__swbuf_r+0x84>
 80075fc:	6923      	ldr	r3, [r4, #16]
 80075fe:	b36b      	cbz	r3, 800765c <__swbuf_r+0x84>
 8007600:	6923      	ldr	r3, [r4, #16]
 8007602:	6820      	ldr	r0, [r4, #0]
 8007604:	1ac0      	subs	r0, r0, r3
 8007606:	6963      	ldr	r3, [r4, #20]
 8007608:	b2f6      	uxtb	r6, r6
 800760a:	4283      	cmp	r3, r0
 800760c:	4637      	mov	r7, r6
 800760e:	dc04      	bgt.n	800761a <__swbuf_r+0x42>
 8007610:	4621      	mov	r1, r4
 8007612:	4628      	mov	r0, r5
 8007614:	f000 ffc0 	bl	8008598 <_fflush_r>
 8007618:	bb30      	cbnz	r0, 8007668 <__swbuf_r+0x90>
 800761a:	68a3      	ldr	r3, [r4, #8]
 800761c:	3b01      	subs	r3, #1
 800761e:	60a3      	str	r3, [r4, #8]
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	6022      	str	r2, [r4, #0]
 8007626:	701e      	strb	r6, [r3, #0]
 8007628:	6963      	ldr	r3, [r4, #20]
 800762a:	3001      	adds	r0, #1
 800762c:	4283      	cmp	r3, r0
 800762e:	d004      	beq.n	800763a <__swbuf_r+0x62>
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	07db      	lsls	r3, r3, #31
 8007634:	d506      	bpl.n	8007644 <__swbuf_r+0x6c>
 8007636:	2e0a      	cmp	r6, #10
 8007638:	d104      	bne.n	8007644 <__swbuf_r+0x6c>
 800763a:	4621      	mov	r1, r4
 800763c:	4628      	mov	r0, r5
 800763e:	f000 ffab 	bl	8008598 <_fflush_r>
 8007642:	b988      	cbnz	r0, 8007668 <__swbuf_r+0x90>
 8007644:	4638      	mov	r0, r7
 8007646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007648:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <__swbuf_r+0x9c>)
 800764a:	429c      	cmp	r4, r3
 800764c:	d101      	bne.n	8007652 <__swbuf_r+0x7a>
 800764e:	68ac      	ldr	r4, [r5, #8]
 8007650:	e7cf      	b.n	80075f2 <__swbuf_r+0x1a>
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <__swbuf_r+0xa0>)
 8007654:	429c      	cmp	r4, r3
 8007656:	bf08      	it	eq
 8007658:	68ec      	ldreq	r4, [r5, #12]
 800765a:	e7ca      	b.n	80075f2 <__swbuf_r+0x1a>
 800765c:	4621      	mov	r1, r4
 800765e:	4628      	mov	r0, r5
 8007660:	f000 f80c 	bl	800767c <__swsetup_r>
 8007664:	2800      	cmp	r0, #0
 8007666:	d0cb      	beq.n	8007600 <__swbuf_r+0x28>
 8007668:	f04f 37ff 	mov.w	r7, #4294967295
 800766c:	e7ea      	b.n	8007644 <__swbuf_r+0x6c>
 800766e:	bf00      	nop
 8007670:	08009a18 	.word	0x08009a18
 8007674:	08009a38 	.word	0x08009a38
 8007678:	080099f8 	.word	0x080099f8

0800767c <__swsetup_r>:
 800767c:	4b32      	ldr	r3, [pc, #200]	; (8007748 <__swsetup_r+0xcc>)
 800767e:	b570      	push	{r4, r5, r6, lr}
 8007680:	681d      	ldr	r5, [r3, #0]
 8007682:	4606      	mov	r6, r0
 8007684:	460c      	mov	r4, r1
 8007686:	b125      	cbz	r5, 8007692 <__swsetup_r+0x16>
 8007688:	69ab      	ldr	r3, [r5, #24]
 800768a:	b913      	cbnz	r3, 8007692 <__swsetup_r+0x16>
 800768c:	4628      	mov	r0, r5
 800768e:	f001 f817 	bl	80086c0 <__sinit>
 8007692:	4b2e      	ldr	r3, [pc, #184]	; (800774c <__swsetup_r+0xd0>)
 8007694:	429c      	cmp	r4, r3
 8007696:	d10f      	bne.n	80076b8 <__swsetup_r+0x3c>
 8007698:	686c      	ldr	r4, [r5, #4]
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076a0:	0719      	lsls	r1, r3, #28
 80076a2:	d42c      	bmi.n	80076fe <__swsetup_r+0x82>
 80076a4:	06dd      	lsls	r5, r3, #27
 80076a6:	d411      	bmi.n	80076cc <__swsetup_r+0x50>
 80076a8:	2309      	movs	r3, #9
 80076aa:	6033      	str	r3, [r6, #0]
 80076ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076b0:	81a3      	strh	r3, [r4, #12]
 80076b2:	f04f 30ff 	mov.w	r0, #4294967295
 80076b6:	e03e      	b.n	8007736 <__swsetup_r+0xba>
 80076b8:	4b25      	ldr	r3, [pc, #148]	; (8007750 <__swsetup_r+0xd4>)
 80076ba:	429c      	cmp	r4, r3
 80076bc:	d101      	bne.n	80076c2 <__swsetup_r+0x46>
 80076be:	68ac      	ldr	r4, [r5, #8]
 80076c0:	e7eb      	b.n	800769a <__swsetup_r+0x1e>
 80076c2:	4b24      	ldr	r3, [pc, #144]	; (8007754 <__swsetup_r+0xd8>)
 80076c4:	429c      	cmp	r4, r3
 80076c6:	bf08      	it	eq
 80076c8:	68ec      	ldreq	r4, [r5, #12]
 80076ca:	e7e6      	b.n	800769a <__swsetup_r+0x1e>
 80076cc:	0758      	lsls	r0, r3, #29
 80076ce:	d512      	bpl.n	80076f6 <__swsetup_r+0x7a>
 80076d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076d2:	b141      	cbz	r1, 80076e6 <__swsetup_r+0x6a>
 80076d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076d8:	4299      	cmp	r1, r3
 80076da:	d002      	beq.n	80076e2 <__swsetup_r+0x66>
 80076dc:	4630      	mov	r0, r6
 80076de:	f001 fcbb 	bl	8009058 <_free_r>
 80076e2:	2300      	movs	r3, #0
 80076e4:	6363      	str	r3, [r4, #52]	; 0x34
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076ec:	81a3      	strh	r3, [r4, #12]
 80076ee:	2300      	movs	r3, #0
 80076f0:	6063      	str	r3, [r4, #4]
 80076f2:	6923      	ldr	r3, [r4, #16]
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	89a3      	ldrh	r3, [r4, #12]
 80076f8:	f043 0308 	orr.w	r3, r3, #8
 80076fc:	81a3      	strh	r3, [r4, #12]
 80076fe:	6923      	ldr	r3, [r4, #16]
 8007700:	b94b      	cbnz	r3, 8007716 <__swsetup_r+0x9a>
 8007702:	89a3      	ldrh	r3, [r4, #12]
 8007704:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800770c:	d003      	beq.n	8007716 <__swsetup_r+0x9a>
 800770e:	4621      	mov	r1, r4
 8007710:	4630      	mov	r0, r6
 8007712:	f001 f8b1 	bl	8008878 <__smakebuf_r>
 8007716:	89a0      	ldrh	r0, [r4, #12]
 8007718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800771c:	f010 0301 	ands.w	r3, r0, #1
 8007720:	d00a      	beq.n	8007738 <__swsetup_r+0xbc>
 8007722:	2300      	movs	r3, #0
 8007724:	60a3      	str	r3, [r4, #8]
 8007726:	6963      	ldr	r3, [r4, #20]
 8007728:	425b      	negs	r3, r3
 800772a:	61a3      	str	r3, [r4, #24]
 800772c:	6923      	ldr	r3, [r4, #16]
 800772e:	b943      	cbnz	r3, 8007742 <__swsetup_r+0xc6>
 8007730:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007734:	d1ba      	bne.n	80076ac <__swsetup_r+0x30>
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	0781      	lsls	r1, r0, #30
 800773a:	bf58      	it	pl
 800773c:	6963      	ldrpl	r3, [r4, #20]
 800773e:	60a3      	str	r3, [r4, #8]
 8007740:	e7f4      	b.n	800772c <__swsetup_r+0xb0>
 8007742:	2000      	movs	r0, #0
 8007744:	e7f7      	b.n	8007736 <__swsetup_r+0xba>
 8007746:	bf00      	nop
 8007748:	2000003c 	.word	0x2000003c
 800774c:	08009a18 	.word	0x08009a18
 8007750:	08009a38 	.word	0x08009a38
 8007754:	080099f8 	.word	0x080099f8

08007758 <__assert_func>:
 8007758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800775a:	4614      	mov	r4, r2
 800775c:	461a      	mov	r2, r3
 800775e:	4b09      	ldr	r3, [pc, #36]	; (8007784 <__assert_func+0x2c>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4605      	mov	r5, r0
 8007764:	68d8      	ldr	r0, [r3, #12]
 8007766:	b14c      	cbz	r4, 800777c <__assert_func+0x24>
 8007768:	4b07      	ldr	r3, [pc, #28]	; (8007788 <__assert_func+0x30>)
 800776a:	9100      	str	r1, [sp, #0]
 800776c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007770:	4906      	ldr	r1, [pc, #24]	; (800778c <__assert_func+0x34>)
 8007772:	462b      	mov	r3, r5
 8007774:	f001 f822 	bl	80087bc <fiprintf>
 8007778:	f001 ff0e 	bl	8009598 <abort>
 800777c:	4b04      	ldr	r3, [pc, #16]	; (8007790 <__assert_func+0x38>)
 800777e:	461c      	mov	r4, r3
 8007780:	e7f3      	b.n	800776a <__assert_func+0x12>
 8007782:	bf00      	nop
 8007784:	2000003c 	.word	0x2000003c
 8007788:	08009942 	.word	0x08009942
 800778c:	0800994f 	.word	0x0800994f
 8007790:	0800997d 	.word	0x0800997d

08007794 <quorem>:
 8007794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007798:	6903      	ldr	r3, [r0, #16]
 800779a:	690c      	ldr	r4, [r1, #16]
 800779c:	42a3      	cmp	r3, r4
 800779e:	4607      	mov	r7, r0
 80077a0:	f2c0 8081 	blt.w	80078a6 <quorem+0x112>
 80077a4:	3c01      	subs	r4, #1
 80077a6:	f101 0814 	add.w	r8, r1, #20
 80077aa:	f100 0514 	add.w	r5, r0, #20
 80077ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077b2:	9301      	str	r3, [sp, #4]
 80077b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077bc:	3301      	adds	r3, #1
 80077be:	429a      	cmp	r2, r3
 80077c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80077c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80077cc:	d331      	bcc.n	8007832 <quorem+0x9e>
 80077ce:	f04f 0e00 	mov.w	lr, #0
 80077d2:	4640      	mov	r0, r8
 80077d4:	46ac      	mov	ip, r5
 80077d6:	46f2      	mov	sl, lr
 80077d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80077dc:	b293      	uxth	r3, r2
 80077de:	fb06 e303 	mla	r3, r6, r3, lr
 80077e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	ebaa 0303 	sub.w	r3, sl, r3
 80077ec:	f8dc a000 	ldr.w	sl, [ip]
 80077f0:	0c12      	lsrs	r2, r2, #16
 80077f2:	fa13 f38a 	uxtah	r3, r3, sl
 80077f6:	fb06 e202 	mla	r2, r6, r2, lr
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	9b00      	ldr	r3, [sp, #0]
 80077fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007802:	b292      	uxth	r2, r2
 8007804:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007808:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800780c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007810:	4581      	cmp	r9, r0
 8007812:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007816:	f84c 3b04 	str.w	r3, [ip], #4
 800781a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800781e:	d2db      	bcs.n	80077d8 <quorem+0x44>
 8007820:	f855 300b 	ldr.w	r3, [r5, fp]
 8007824:	b92b      	cbnz	r3, 8007832 <quorem+0x9e>
 8007826:	9b01      	ldr	r3, [sp, #4]
 8007828:	3b04      	subs	r3, #4
 800782a:	429d      	cmp	r5, r3
 800782c:	461a      	mov	r2, r3
 800782e:	d32e      	bcc.n	800788e <quorem+0xfa>
 8007830:	613c      	str	r4, [r7, #16]
 8007832:	4638      	mov	r0, r7
 8007834:	f001 faf8 	bl	8008e28 <__mcmp>
 8007838:	2800      	cmp	r0, #0
 800783a:	db24      	blt.n	8007886 <quorem+0xf2>
 800783c:	3601      	adds	r6, #1
 800783e:	4628      	mov	r0, r5
 8007840:	f04f 0c00 	mov.w	ip, #0
 8007844:	f858 2b04 	ldr.w	r2, [r8], #4
 8007848:	f8d0 e000 	ldr.w	lr, [r0]
 800784c:	b293      	uxth	r3, r2
 800784e:	ebac 0303 	sub.w	r3, ip, r3
 8007852:	0c12      	lsrs	r2, r2, #16
 8007854:	fa13 f38e 	uxtah	r3, r3, lr
 8007858:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800785c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007860:	b29b      	uxth	r3, r3
 8007862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007866:	45c1      	cmp	r9, r8
 8007868:	f840 3b04 	str.w	r3, [r0], #4
 800786c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007870:	d2e8      	bcs.n	8007844 <quorem+0xb0>
 8007872:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007876:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800787a:	b922      	cbnz	r2, 8007886 <quorem+0xf2>
 800787c:	3b04      	subs	r3, #4
 800787e:	429d      	cmp	r5, r3
 8007880:	461a      	mov	r2, r3
 8007882:	d30a      	bcc.n	800789a <quorem+0x106>
 8007884:	613c      	str	r4, [r7, #16]
 8007886:	4630      	mov	r0, r6
 8007888:	b003      	add	sp, #12
 800788a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800788e:	6812      	ldr	r2, [r2, #0]
 8007890:	3b04      	subs	r3, #4
 8007892:	2a00      	cmp	r2, #0
 8007894:	d1cc      	bne.n	8007830 <quorem+0x9c>
 8007896:	3c01      	subs	r4, #1
 8007898:	e7c7      	b.n	800782a <quorem+0x96>
 800789a:	6812      	ldr	r2, [r2, #0]
 800789c:	3b04      	subs	r3, #4
 800789e:	2a00      	cmp	r2, #0
 80078a0:	d1f0      	bne.n	8007884 <quorem+0xf0>
 80078a2:	3c01      	subs	r4, #1
 80078a4:	e7eb      	b.n	800787e <quorem+0xea>
 80078a6:	2000      	movs	r0, #0
 80078a8:	e7ee      	b.n	8007888 <quorem+0xf4>
 80078aa:	0000      	movs	r0, r0
 80078ac:	0000      	movs	r0, r0
	...

080078b0 <_dtoa_r>:
 80078b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	ed2d 8b04 	vpush	{d8-d9}
 80078b8:	ec57 6b10 	vmov	r6, r7, d0
 80078bc:	b093      	sub	sp, #76	; 0x4c
 80078be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80078c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80078c4:	9106      	str	r1, [sp, #24]
 80078c6:	ee10 aa10 	vmov	sl, s0
 80078ca:	4604      	mov	r4, r0
 80078cc:	9209      	str	r2, [sp, #36]	; 0x24
 80078ce:	930c      	str	r3, [sp, #48]	; 0x30
 80078d0:	46bb      	mov	fp, r7
 80078d2:	b975      	cbnz	r5, 80078f2 <_dtoa_r+0x42>
 80078d4:	2010      	movs	r0, #16
 80078d6:	f001 f80f 	bl	80088f8 <malloc>
 80078da:	4602      	mov	r2, r0
 80078dc:	6260      	str	r0, [r4, #36]	; 0x24
 80078de:	b920      	cbnz	r0, 80078ea <_dtoa_r+0x3a>
 80078e0:	4ba7      	ldr	r3, [pc, #668]	; (8007b80 <_dtoa_r+0x2d0>)
 80078e2:	21ea      	movs	r1, #234	; 0xea
 80078e4:	48a7      	ldr	r0, [pc, #668]	; (8007b84 <_dtoa_r+0x2d4>)
 80078e6:	f7ff ff37 	bl	8007758 <__assert_func>
 80078ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80078ee:	6005      	str	r5, [r0, #0]
 80078f0:	60c5      	str	r5, [r0, #12]
 80078f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078f4:	6819      	ldr	r1, [r3, #0]
 80078f6:	b151      	cbz	r1, 800790e <_dtoa_r+0x5e>
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	604a      	str	r2, [r1, #4]
 80078fc:	2301      	movs	r3, #1
 80078fe:	4093      	lsls	r3, r2
 8007900:	608b      	str	r3, [r1, #8]
 8007902:	4620      	mov	r0, r4
 8007904:	f001 f84e 	bl	80089a4 <_Bfree>
 8007908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800790a:	2200      	movs	r2, #0
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	1e3b      	subs	r3, r7, #0
 8007910:	bfaa      	itet	ge
 8007912:	2300      	movge	r3, #0
 8007914:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007918:	f8c8 3000 	strge.w	r3, [r8]
 800791c:	4b9a      	ldr	r3, [pc, #616]	; (8007b88 <_dtoa_r+0x2d8>)
 800791e:	bfbc      	itt	lt
 8007920:	2201      	movlt	r2, #1
 8007922:	f8c8 2000 	strlt.w	r2, [r8]
 8007926:	ea33 030b 	bics.w	r3, r3, fp
 800792a:	d11b      	bne.n	8007964 <_dtoa_r+0xb4>
 800792c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800792e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007938:	4333      	orrs	r3, r6
 800793a:	f000 8592 	beq.w	8008462 <_dtoa_r+0xbb2>
 800793e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007940:	b963      	cbnz	r3, 800795c <_dtoa_r+0xac>
 8007942:	4b92      	ldr	r3, [pc, #584]	; (8007b8c <_dtoa_r+0x2dc>)
 8007944:	e022      	b.n	800798c <_dtoa_r+0xdc>
 8007946:	4b92      	ldr	r3, [pc, #584]	; (8007b90 <_dtoa_r+0x2e0>)
 8007948:	9301      	str	r3, [sp, #4]
 800794a:	3308      	adds	r3, #8
 800794c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	9801      	ldr	r0, [sp, #4]
 8007952:	b013      	add	sp, #76	; 0x4c
 8007954:	ecbd 8b04 	vpop	{d8-d9}
 8007958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795c:	4b8b      	ldr	r3, [pc, #556]	; (8007b8c <_dtoa_r+0x2dc>)
 800795e:	9301      	str	r3, [sp, #4]
 8007960:	3303      	adds	r3, #3
 8007962:	e7f3      	b.n	800794c <_dtoa_r+0x9c>
 8007964:	2200      	movs	r2, #0
 8007966:	2300      	movs	r3, #0
 8007968:	4650      	mov	r0, sl
 800796a:	4659      	mov	r1, fp
 800796c:	f7f9 f8bc 	bl	8000ae8 <__aeabi_dcmpeq>
 8007970:	ec4b ab19 	vmov	d9, sl, fp
 8007974:	4680      	mov	r8, r0
 8007976:	b158      	cbz	r0, 8007990 <_dtoa_r+0xe0>
 8007978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800797a:	2301      	movs	r3, #1
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 856b 	beq.w	800845c <_dtoa_r+0xbac>
 8007986:	4883      	ldr	r0, [pc, #524]	; (8007b94 <_dtoa_r+0x2e4>)
 8007988:	6018      	str	r0, [r3, #0]
 800798a:	1e43      	subs	r3, r0, #1
 800798c:	9301      	str	r3, [sp, #4]
 800798e:	e7df      	b.n	8007950 <_dtoa_r+0xa0>
 8007990:	ec4b ab10 	vmov	d0, sl, fp
 8007994:	aa10      	add	r2, sp, #64	; 0x40
 8007996:	a911      	add	r1, sp, #68	; 0x44
 8007998:	4620      	mov	r0, r4
 800799a:	f001 faeb 	bl	8008f74 <__d2b>
 800799e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80079a2:	ee08 0a10 	vmov	s16, r0
 80079a6:	2d00      	cmp	r5, #0
 80079a8:	f000 8084 	beq.w	8007ab4 <_dtoa_r+0x204>
 80079ac:	ee19 3a90 	vmov	r3, s19
 80079b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80079b8:	4656      	mov	r6, sl
 80079ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80079be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80079c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80079c6:	4b74      	ldr	r3, [pc, #464]	; (8007b98 <_dtoa_r+0x2e8>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	4630      	mov	r0, r6
 80079cc:	4639      	mov	r1, r7
 80079ce:	f7f8 fc6b 	bl	80002a8 <__aeabi_dsub>
 80079d2:	a365      	add	r3, pc, #404	; (adr r3, 8007b68 <_dtoa_r+0x2b8>)
 80079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d8:	f7f8 fe1e 	bl	8000618 <__aeabi_dmul>
 80079dc:	a364      	add	r3, pc, #400	; (adr r3, 8007b70 <_dtoa_r+0x2c0>)
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	f7f8 fc63 	bl	80002ac <__adddf3>
 80079e6:	4606      	mov	r6, r0
 80079e8:	4628      	mov	r0, r5
 80079ea:	460f      	mov	r7, r1
 80079ec:	f7f8 fdaa 	bl	8000544 <__aeabi_i2d>
 80079f0:	a361      	add	r3, pc, #388	; (adr r3, 8007b78 <_dtoa_r+0x2c8>)
 80079f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f6:	f7f8 fe0f 	bl	8000618 <__aeabi_dmul>
 80079fa:	4602      	mov	r2, r0
 80079fc:	460b      	mov	r3, r1
 80079fe:	4630      	mov	r0, r6
 8007a00:	4639      	mov	r1, r7
 8007a02:	f7f8 fc53 	bl	80002ac <__adddf3>
 8007a06:	4606      	mov	r6, r0
 8007a08:	460f      	mov	r7, r1
 8007a0a:	f7f9 f8b5 	bl	8000b78 <__aeabi_d2iz>
 8007a0e:	2200      	movs	r2, #0
 8007a10:	9000      	str	r0, [sp, #0]
 8007a12:	2300      	movs	r3, #0
 8007a14:	4630      	mov	r0, r6
 8007a16:	4639      	mov	r1, r7
 8007a18:	f7f9 f870 	bl	8000afc <__aeabi_dcmplt>
 8007a1c:	b150      	cbz	r0, 8007a34 <_dtoa_r+0x184>
 8007a1e:	9800      	ldr	r0, [sp, #0]
 8007a20:	f7f8 fd90 	bl	8000544 <__aeabi_i2d>
 8007a24:	4632      	mov	r2, r6
 8007a26:	463b      	mov	r3, r7
 8007a28:	f7f9 f85e 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a2c:	b910      	cbnz	r0, 8007a34 <_dtoa_r+0x184>
 8007a2e:	9b00      	ldr	r3, [sp, #0]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	9b00      	ldr	r3, [sp, #0]
 8007a36:	2b16      	cmp	r3, #22
 8007a38:	d85a      	bhi.n	8007af0 <_dtoa_r+0x240>
 8007a3a:	9a00      	ldr	r2, [sp, #0]
 8007a3c:	4b57      	ldr	r3, [pc, #348]	; (8007b9c <_dtoa_r+0x2ec>)
 8007a3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a46:	ec51 0b19 	vmov	r0, r1, d9
 8007a4a:	f7f9 f857 	bl	8000afc <__aeabi_dcmplt>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d050      	beq.n	8007af4 <_dtoa_r+0x244>
 8007a52:	9b00      	ldr	r3, [sp, #0]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	2300      	movs	r3, #0
 8007a5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a5e:	1b5d      	subs	r5, r3, r5
 8007a60:	1e6b      	subs	r3, r5, #1
 8007a62:	9305      	str	r3, [sp, #20]
 8007a64:	bf45      	ittet	mi
 8007a66:	f1c5 0301 	rsbmi	r3, r5, #1
 8007a6a:	9304      	strmi	r3, [sp, #16]
 8007a6c:	2300      	movpl	r3, #0
 8007a6e:	2300      	movmi	r3, #0
 8007a70:	bf4c      	ite	mi
 8007a72:	9305      	strmi	r3, [sp, #20]
 8007a74:	9304      	strpl	r3, [sp, #16]
 8007a76:	9b00      	ldr	r3, [sp, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	db3d      	blt.n	8007af8 <_dtoa_r+0x248>
 8007a7c:	9b05      	ldr	r3, [sp, #20]
 8007a7e:	9a00      	ldr	r2, [sp, #0]
 8007a80:	920a      	str	r2, [sp, #40]	; 0x28
 8007a82:	4413      	add	r3, r2
 8007a84:	9305      	str	r3, [sp, #20]
 8007a86:	2300      	movs	r3, #0
 8007a88:	9307      	str	r3, [sp, #28]
 8007a8a:	9b06      	ldr	r3, [sp, #24]
 8007a8c:	2b09      	cmp	r3, #9
 8007a8e:	f200 8089 	bhi.w	8007ba4 <_dtoa_r+0x2f4>
 8007a92:	2b05      	cmp	r3, #5
 8007a94:	bfc4      	itt	gt
 8007a96:	3b04      	subgt	r3, #4
 8007a98:	9306      	strgt	r3, [sp, #24]
 8007a9a:	9b06      	ldr	r3, [sp, #24]
 8007a9c:	f1a3 0302 	sub.w	r3, r3, #2
 8007aa0:	bfcc      	ite	gt
 8007aa2:	2500      	movgt	r5, #0
 8007aa4:	2501      	movle	r5, #1
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	f200 8087 	bhi.w	8007bba <_dtoa_r+0x30a>
 8007aac:	e8df f003 	tbb	[pc, r3]
 8007ab0:	59383a2d 	.word	0x59383a2d
 8007ab4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ab8:	441d      	add	r5, r3
 8007aba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007abe:	2b20      	cmp	r3, #32
 8007ac0:	bfc1      	itttt	gt
 8007ac2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ac6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007aca:	fa0b f303 	lslgt.w	r3, fp, r3
 8007ace:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ad2:	bfda      	itte	le
 8007ad4:	f1c3 0320 	rsble	r3, r3, #32
 8007ad8:	fa06 f003 	lslle.w	r0, r6, r3
 8007adc:	4318      	orrgt	r0, r3
 8007ade:	f7f8 fd21 	bl	8000524 <__aeabi_ui2d>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	4606      	mov	r6, r0
 8007ae6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007aea:	3d01      	subs	r5, #1
 8007aec:	930e      	str	r3, [sp, #56]	; 0x38
 8007aee:	e76a      	b.n	80079c6 <_dtoa_r+0x116>
 8007af0:	2301      	movs	r3, #1
 8007af2:	e7b2      	b.n	8007a5a <_dtoa_r+0x1aa>
 8007af4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007af6:	e7b1      	b.n	8007a5c <_dtoa_r+0x1ac>
 8007af8:	9b04      	ldr	r3, [sp, #16]
 8007afa:	9a00      	ldr	r2, [sp, #0]
 8007afc:	1a9b      	subs	r3, r3, r2
 8007afe:	9304      	str	r3, [sp, #16]
 8007b00:	4253      	negs	r3, r2
 8007b02:	9307      	str	r3, [sp, #28]
 8007b04:	2300      	movs	r3, #0
 8007b06:	930a      	str	r3, [sp, #40]	; 0x28
 8007b08:	e7bf      	b.n	8007a8a <_dtoa_r+0x1da>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	9308      	str	r3, [sp, #32]
 8007b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	dc55      	bgt.n	8007bc0 <_dtoa_r+0x310>
 8007b14:	2301      	movs	r3, #1
 8007b16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b1e:	e00c      	b.n	8007b3a <_dtoa_r+0x28a>
 8007b20:	2301      	movs	r3, #1
 8007b22:	e7f3      	b.n	8007b0c <_dtoa_r+0x25c>
 8007b24:	2300      	movs	r3, #0
 8007b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b28:	9308      	str	r3, [sp, #32]
 8007b2a:	9b00      	ldr	r3, [sp, #0]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	9302      	str	r3, [sp, #8]
 8007b30:	3301      	adds	r3, #1
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	9303      	str	r3, [sp, #12]
 8007b36:	bfb8      	it	lt
 8007b38:	2301      	movlt	r3, #1
 8007b3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	6042      	str	r2, [r0, #4]
 8007b40:	2204      	movs	r2, #4
 8007b42:	f102 0614 	add.w	r6, r2, #20
 8007b46:	429e      	cmp	r6, r3
 8007b48:	6841      	ldr	r1, [r0, #4]
 8007b4a:	d93d      	bls.n	8007bc8 <_dtoa_r+0x318>
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f000 fee9 	bl	8008924 <_Balloc>
 8007b52:	9001      	str	r0, [sp, #4]
 8007b54:	2800      	cmp	r0, #0
 8007b56:	d13b      	bne.n	8007bd0 <_dtoa_r+0x320>
 8007b58:	4b11      	ldr	r3, [pc, #68]	; (8007ba0 <_dtoa_r+0x2f0>)
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007b60:	e6c0      	b.n	80078e4 <_dtoa_r+0x34>
 8007b62:	2301      	movs	r3, #1
 8007b64:	e7df      	b.n	8007b26 <_dtoa_r+0x276>
 8007b66:	bf00      	nop
 8007b68:	636f4361 	.word	0x636f4361
 8007b6c:	3fd287a7 	.word	0x3fd287a7
 8007b70:	8b60c8b3 	.word	0x8b60c8b3
 8007b74:	3fc68a28 	.word	0x3fc68a28
 8007b78:	509f79fb 	.word	0x509f79fb
 8007b7c:	3fd34413 	.word	0x3fd34413
 8007b80:	080098d0 	.word	0x080098d0
 8007b84:	0800998b 	.word	0x0800998b
 8007b88:	7ff00000 	.word	0x7ff00000
 8007b8c:	08009987 	.word	0x08009987
 8007b90:	0800997e 	.word	0x0800997e
 8007b94:	080098ad 	.word	0x080098ad
 8007b98:	3ff80000 	.word	0x3ff80000
 8007b9c:	08009ae0 	.word	0x08009ae0
 8007ba0:	080099e6 	.word	0x080099e6
 8007ba4:	2501      	movs	r5, #1
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	9306      	str	r3, [sp, #24]
 8007baa:	9508      	str	r5, [sp, #32]
 8007bac:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	2312      	movs	r3, #18
 8007bb8:	e7b0      	b.n	8007b1c <_dtoa_r+0x26c>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	9308      	str	r3, [sp, #32]
 8007bbe:	e7f5      	b.n	8007bac <_dtoa_r+0x2fc>
 8007bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007bc6:	e7b8      	b.n	8007b3a <_dtoa_r+0x28a>
 8007bc8:	3101      	adds	r1, #1
 8007bca:	6041      	str	r1, [r0, #4]
 8007bcc:	0052      	lsls	r2, r2, #1
 8007bce:	e7b8      	b.n	8007b42 <_dtoa_r+0x292>
 8007bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bd2:	9a01      	ldr	r2, [sp, #4]
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	9b03      	ldr	r3, [sp, #12]
 8007bd8:	2b0e      	cmp	r3, #14
 8007bda:	f200 809d 	bhi.w	8007d18 <_dtoa_r+0x468>
 8007bde:	2d00      	cmp	r5, #0
 8007be0:	f000 809a 	beq.w	8007d18 <_dtoa_r+0x468>
 8007be4:	9b00      	ldr	r3, [sp, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	dd32      	ble.n	8007c50 <_dtoa_r+0x3a0>
 8007bea:	4ab7      	ldr	r2, [pc, #732]	; (8007ec8 <_dtoa_r+0x618>)
 8007bec:	f003 030f 	and.w	r3, r3, #15
 8007bf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007bf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bf8:	9b00      	ldr	r3, [sp, #0]
 8007bfa:	05d8      	lsls	r0, r3, #23
 8007bfc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007c00:	d516      	bpl.n	8007c30 <_dtoa_r+0x380>
 8007c02:	4bb2      	ldr	r3, [pc, #712]	; (8007ecc <_dtoa_r+0x61c>)
 8007c04:	ec51 0b19 	vmov	r0, r1, d9
 8007c08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c0c:	f7f8 fe2e 	bl	800086c <__aeabi_ddiv>
 8007c10:	f007 070f 	and.w	r7, r7, #15
 8007c14:	4682      	mov	sl, r0
 8007c16:	468b      	mov	fp, r1
 8007c18:	2503      	movs	r5, #3
 8007c1a:	4eac      	ldr	r6, [pc, #688]	; (8007ecc <_dtoa_r+0x61c>)
 8007c1c:	b957      	cbnz	r7, 8007c34 <_dtoa_r+0x384>
 8007c1e:	4642      	mov	r2, r8
 8007c20:	464b      	mov	r3, r9
 8007c22:	4650      	mov	r0, sl
 8007c24:	4659      	mov	r1, fp
 8007c26:	f7f8 fe21 	bl	800086c <__aeabi_ddiv>
 8007c2a:	4682      	mov	sl, r0
 8007c2c:	468b      	mov	fp, r1
 8007c2e:	e028      	b.n	8007c82 <_dtoa_r+0x3d2>
 8007c30:	2502      	movs	r5, #2
 8007c32:	e7f2      	b.n	8007c1a <_dtoa_r+0x36a>
 8007c34:	07f9      	lsls	r1, r7, #31
 8007c36:	d508      	bpl.n	8007c4a <_dtoa_r+0x39a>
 8007c38:	4640      	mov	r0, r8
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c40:	f7f8 fcea 	bl	8000618 <__aeabi_dmul>
 8007c44:	3501      	adds	r5, #1
 8007c46:	4680      	mov	r8, r0
 8007c48:	4689      	mov	r9, r1
 8007c4a:	107f      	asrs	r7, r7, #1
 8007c4c:	3608      	adds	r6, #8
 8007c4e:	e7e5      	b.n	8007c1c <_dtoa_r+0x36c>
 8007c50:	f000 809b 	beq.w	8007d8a <_dtoa_r+0x4da>
 8007c54:	9b00      	ldr	r3, [sp, #0]
 8007c56:	4f9d      	ldr	r7, [pc, #628]	; (8007ecc <_dtoa_r+0x61c>)
 8007c58:	425e      	negs	r6, r3
 8007c5a:	4b9b      	ldr	r3, [pc, #620]	; (8007ec8 <_dtoa_r+0x618>)
 8007c5c:	f006 020f 	and.w	r2, r6, #15
 8007c60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	ec51 0b19 	vmov	r0, r1, d9
 8007c6c:	f7f8 fcd4 	bl	8000618 <__aeabi_dmul>
 8007c70:	1136      	asrs	r6, r6, #4
 8007c72:	4682      	mov	sl, r0
 8007c74:	468b      	mov	fp, r1
 8007c76:	2300      	movs	r3, #0
 8007c78:	2502      	movs	r5, #2
 8007c7a:	2e00      	cmp	r6, #0
 8007c7c:	d17a      	bne.n	8007d74 <_dtoa_r+0x4c4>
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1d3      	bne.n	8007c2a <_dtoa_r+0x37a>
 8007c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 8082 	beq.w	8007d8e <_dtoa_r+0x4de>
 8007c8a:	4b91      	ldr	r3, [pc, #580]	; (8007ed0 <_dtoa_r+0x620>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	4650      	mov	r0, sl
 8007c90:	4659      	mov	r1, fp
 8007c92:	f7f8 ff33 	bl	8000afc <__aeabi_dcmplt>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d079      	beq.n	8007d8e <_dtoa_r+0x4de>
 8007c9a:	9b03      	ldr	r3, [sp, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d076      	beq.n	8007d8e <_dtoa_r+0x4de>
 8007ca0:	9b02      	ldr	r3, [sp, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	dd36      	ble.n	8007d14 <_dtoa_r+0x464>
 8007ca6:	9b00      	ldr	r3, [sp, #0]
 8007ca8:	4650      	mov	r0, sl
 8007caa:	4659      	mov	r1, fp
 8007cac:	1e5f      	subs	r7, r3, #1
 8007cae:	2200      	movs	r2, #0
 8007cb0:	4b88      	ldr	r3, [pc, #544]	; (8007ed4 <_dtoa_r+0x624>)
 8007cb2:	f7f8 fcb1 	bl	8000618 <__aeabi_dmul>
 8007cb6:	9e02      	ldr	r6, [sp, #8]
 8007cb8:	4682      	mov	sl, r0
 8007cba:	468b      	mov	fp, r1
 8007cbc:	3501      	adds	r5, #1
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f7f8 fc40 	bl	8000544 <__aeabi_i2d>
 8007cc4:	4652      	mov	r2, sl
 8007cc6:	465b      	mov	r3, fp
 8007cc8:	f7f8 fca6 	bl	8000618 <__aeabi_dmul>
 8007ccc:	4b82      	ldr	r3, [pc, #520]	; (8007ed8 <_dtoa_r+0x628>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f7f8 faec 	bl	80002ac <__adddf3>
 8007cd4:	46d0      	mov	r8, sl
 8007cd6:	46d9      	mov	r9, fp
 8007cd8:	4682      	mov	sl, r0
 8007cda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007cde:	2e00      	cmp	r6, #0
 8007ce0:	d158      	bne.n	8007d94 <_dtoa_r+0x4e4>
 8007ce2:	4b7e      	ldr	r3, [pc, #504]	; (8007edc <_dtoa_r+0x62c>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	4649      	mov	r1, r9
 8007cea:	f7f8 fadd 	bl	80002a8 <__aeabi_dsub>
 8007cee:	4652      	mov	r2, sl
 8007cf0:	465b      	mov	r3, fp
 8007cf2:	4680      	mov	r8, r0
 8007cf4:	4689      	mov	r9, r1
 8007cf6:	f7f8 ff1f 	bl	8000b38 <__aeabi_dcmpgt>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	f040 8295 	bne.w	800822a <_dtoa_r+0x97a>
 8007d00:	4652      	mov	r2, sl
 8007d02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d06:	4640      	mov	r0, r8
 8007d08:	4649      	mov	r1, r9
 8007d0a:	f7f8 fef7 	bl	8000afc <__aeabi_dcmplt>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	f040 8289 	bne.w	8008226 <_dtoa_r+0x976>
 8007d14:	ec5b ab19 	vmov	sl, fp, d9
 8007d18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f2c0 8148 	blt.w	8007fb0 <_dtoa_r+0x700>
 8007d20:	9a00      	ldr	r2, [sp, #0]
 8007d22:	2a0e      	cmp	r2, #14
 8007d24:	f300 8144 	bgt.w	8007fb0 <_dtoa_r+0x700>
 8007d28:	4b67      	ldr	r3, [pc, #412]	; (8007ec8 <_dtoa_r+0x618>)
 8007d2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f280 80d5 	bge.w	8007ee4 <_dtoa_r+0x634>
 8007d3a:	9b03      	ldr	r3, [sp, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f300 80d1 	bgt.w	8007ee4 <_dtoa_r+0x634>
 8007d42:	f040 826f 	bne.w	8008224 <_dtoa_r+0x974>
 8007d46:	4b65      	ldr	r3, [pc, #404]	; (8007edc <_dtoa_r+0x62c>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	4649      	mov	r1, r9
 8007d4e:	f7f8 fc63 	bl	8000618 <__aeabi_dmul>
 8007d52:	4652      	mov	r2, sl
 8007d54:	465b      	mov	r3, fp
 8007d56:	f7f8 fee5 	bl	8000b24 <__aeabi_dcmpge>
 8007d5a:	9e03      	ldr	r6, [sp, #12]
 8007d5c:	4637      	mov	r7, r6
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	f040 8245 	bne.w	80081ee <_dtoa_r+0x93e>
 8007d64:	9d01      	ldr	r5, [sp, #4]
 8007d66:	2331      	movs	r3, #49	; 0x31
 8007d68:	f805 3b01 	strb.w	r3, [r5], #1
 8007d6c:	9b00      	ldr	r3, [sp, #0]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	e240      	b.n	80081f6 <_dtoa_r+0x946>
 8007d74:	07f2      	lsls	r2, r6, #31
 8007d76:	d505      	bpl.n	8007d84 <_dtoa_r+0x4d4>
 8007d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d7c:	f7f8 fc4c 	bl	8000618 <__aeabi_dmul>
 8007d80:	3501      	adds	r5, #1
 8007d82:	2301      	movs	r3, #1
 8007d84:	1076      	asrs	r6, r6, #1
 8007d86:	3708      	adds	r7, #8
 8007d88:	e777      	b.n	8007c7a <_dtoa_r+0x3ca>
 8007d8a:	2502      	movs	r5, #2
 8007d8c:	e779      	b.n	8007c82 <_dtoa_r+0x3d2>
 8007d8e:	9f00      	ldr	r7, [sp, #0]
 8007d90:	9e03      	ldr	r6, [sp, #12]
 8007d92:	e794      	b.n	8007cbe <_dtoa_r+0x40e>
 8007d94:	9901      	ldr	r1, [sp, #4]
 8007d96:	4b4c      	ldr	r3, [pc, #304]	; (8007ec8 <_dtoa_r+0x618>)
 8007d98:	4431      	add	r1, r6
 8007d9a:	910d      	str	r1, [sp, #52]	; 0x34
 8007d9c:	9908      	ldr	r1, [sp, #32]
 8007d9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007da2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007da6:	2900      	cmp	r1, #0
 8007da8:	d043      	beq.n	8007e32 <_dtoa_r+0x582>
 8007daa:	494d      	ldr	r1, [pc, #308]	; (8007ee0 <_dtoa_r+0x630>)
 8007dac:	2000      	movs	r0, #0
 8007dae:	f7f8 fd5d 	bl	800086c <__aeabi_ddiv>
 8007db2:	4652      	mov	r2, sl
 8007db4:	465b      	mov	r3, fp
 8007db6:	f7f8 fa77 	bl	80002a8 <__aeabi_dsub>
 8007dba:	9d01      	ldr	r5, [sp, #4]
 8007dbc:	4682      	mov	sl, r0
 8007dbe:	468b      	mov	fp, r1
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	f7f8 fed8 	bl	8000b78 <__aeabi_d2iz>
 8007dc8:	4606      	mov	r6, r0
 8007dca:	f7f8 fbbb 	bl	8000544 <__aeabi_i2d>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4640      	mov	r0, r8
 8007dd4:	4649      	mov	r1, r9
 8007dd6:	f7f8 fa67 	bl	80002a8 <__aeabi_dsub>
 8007dda:	3630      	adds	r6, #48	; 0x30
 8007ddc:	f805 6b01 	strb.w	r6, [r5], #1
 8007de0:	4652      	mov	r2, sl
 8007de2:	465b      	mov	r3, fp
 8007de4:	4680      	mov	r8, r0
 8007de6:	4689      	mov	r9, r1
 8007de8:	f7f8 fe88 	bl	8000afc <__aeabi_dcmplt>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d163      	bne.n	8007eb8 <_dtoa_r+0x608>
 8007df0:	4642      	mov	r2, r8
 8007df2:	464b      	mov	r3, r9
 8007df4:	4936      	ldr	r1, [pc, #216]	; (8007ed0 <_dtoa_r+0x620>)
 8007df6:	2000      	movs	r0, #0
 8007df8:	f7f8 fa56 	bl	80002a8 <__aeabi_dsub>
 8007dfc:	4652      	mov	r2, sl
 8007dfe:	465b      	mov	r3, fp
 8007e00:	f7f8 fe7c 	bl	8000afc <__aeabi_dcmplt>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	f040 80b5 	bne.w	8007f74 <_dtoa_r+0x6c4>
 8007e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e0c:	429d      	cmp	r5, r3
 8007e0e:	d081      	beq.n	8007d14 <_dtoa_r+0x464>
 8007e10:	4b30      	ldr	r3, [pc, #192]	; (8007ed4 <_dtoa_r+0x624>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	4650      	mov	r0, sl
 8007e16:	4659      	mov	r1, fp
 8007e18:	f7f8 fbfe 	bl	8000618 <__aeabi_dmul>
 8007e1c:	4b2d      	ldr	r3, [pc, #180]	; (8007ed4 <_dtoa_r+0x624>)
 8007e1e:	4682      	mov	sl, r0
 8007e20:	468b      	mov	fp, r1
 8007e22:	4640      	mov	r0, r8
 8007e24:	4649      	mov	r1, r9
 8007e26:	2200      	movs	r2, #0
 8007e28:	f7f8 fbf6 	bl	8000618 <__aeabi_dmul>
 8007e2c:	4680      	mov	r8, r0
 8007e2e:	4689      	mov	r9, r1
 8007e30:	e7c6      	b.n	8007dc0 <_dtoa_r+0x510>
 8007e32:	4650      	mov	r0, sl
 8007e34:	4659      	mov	r1, fp
 8007e36:	f7f8 fbef 	bl	8000618 <__aeabi_dmul>
 8007e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e3c:	9d01      	ldr	r5, [sp, #4]
 8007e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e40:	4682      	mov	sl, r0
 8007e42:	468b      	mov	fp, r1
 8007e44:	4649      	mov	r1, r9
 8007e46:	4640      	mov	r0, r8
 8007e48:	f7f8 fe96 	bl	8000b78 <__aeabi_d2iz>
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	f7f8 fb79 	bl	8000544 <__aeabi_i2d>
 8007e52:	3630      	adds	r6, #48	; 0x30
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4640      	mov	r0, r8
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	f7f8 fa24 	bl	80002a8 <__aeabi_dsub>
 8007e60:	f805 6b01 	strb.w	r6, [r5], #1
 8007e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e66:	429d      	cmp	r5, r3
 8007e68:	4680      	mov	r8, r0
 8007e6a:	4689      	mov	r9, r1
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	d124      	bne.n	8007ebc <_dtoa_r+0x60c>
 8007e72:	4b1b      	ldr	r3, [pc, #108]	; (8007ee0 <_dtoa_r+0x630>)
 8007e74:	4650      	mov	r0, sl
 8007e76:	4659      	mov	r1, fp
 8007e78:	f7f8 fa18 	bl	80002ac <__adddf3>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4640      	mov	r0, r8
 8007e82:	4649      	mov	r1, r9
 8007e84:	f7f8 fe58 	bl	8000b38 <__aeabi_dcmpgt>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d173      	bne.n	8007f74 <_dtoa_r+0x6c4>
 8007e8c:	4652      	mov	r2, sl
 8007e8e:	465b      	mov	r3, fp
 8007e90:	4913      	ldr	r1, [pc, #76]	; (8007ee0 <_dtoa_r+0x630>)
 8007e92:	2000      	movs	r0, #0
 8007e94:	f7f8 fa08 	bl	80002a8 <__aeabi_dsub>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4640      	mov	r0, r8
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	f7f8 fe2c 	bl	8000afc <__aeabi_dcmplt>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	f43f af35 	beq.w	8007d14 <_dtoa_r+0x464>
 8007eaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007eac:	1e6b      	subs	r3, r5, #1
 8007eae:	930f      	str	r3, [sp, #60]	; 0x3c
 8007eb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007eb4:	2b30      	cmp	r3, #48	; 0x30
 8007eb6:	d0f8      	beq.n	8007eaa <_dtoa_r+0x5fa>
 8007eb8:	9700      	str	r7, [sp, #0]
 8007eba:	e049      	b.n	8007f50 <_dtoa_r+0x6a0>
 8007ebc:	4b05      	ldr	r3, [pc, #20]	; (8007ed4 <_dtoa_r+0x624>)
 8007ebe:	f7f8 fbab 	bl	8000618 <__aeabi_dmul>
 8007ec2:	4680      	mov	r8, r0
 8007ec4:	4689      	mov	r9, r1
 8007ec6:	e7bd      	b.n	8007e44 <_dtoa_r+0x594>
 8007ec8:	08009ae0 	.word	0x08009ae0
 8007ecc:	08009ab8 	.word	0x08009ab8
 8007ed0:	3ff00000 	.word	0x3ff00000
 8007ed4:	40240000 	.word	0x40240000
 8007ed8:	401c0000 	.word	0x401c0000
 8007edc:	40140000 	.word	0x40140000
 8007ee0:	3fe00000 	.word	0x3fe00000
 8007ee4:	9d01      	ldr	r5, [sp, #4]
 8007ee6:	4656      	mov	r6, sl
 8007ee8:	465f      	mov	r7, fp
 8007eea:	4642      	mov	r2, r8
 8007eec:	464b      	mov	r3, r9
 8007eee:	4630      	mov	r0, r6
 8007ef0:	4639      	mov	r1, r7
 8007ef2:	f7f8 fcbb 	bl	800086c <__aeabi_ddiv>
 8007ef6:	f7f8 fe3f 	bl	8000b78 <__aeabi_d2iz>
 8007efa:	4682      	mov	sl, r0
 8007efc:	f7f8 fb22 	bl	8000544 <__aeabi_i2d>
 8007f00:	4642      	mov	r2, r8
 8007f02:	464b      	mov	r3, r9
 8007f04:	f7f8 fb88 	bl	8000618 <__aeabi_dmul>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	4639      	mov	r1, r7
 8007f10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007f14:	f7f8 f9c8 	bl	80002a8 <__aeabi_dsub>
 8007f18:	f805 6b01 	strb.w	r6, [r5], #1
 8007f1c:	9e01      	ldr	r6, [sp, #4]
 8007f1e:	9f03      	ldr	r7, [sp, #12]
 8007f20:	1bae      	subs	r6, r5, r6
 8007f22:	42b7      	cmp	r7, r6
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	d135      	bne.n	8007f96 <_dtoa_r+0x6e6>
 8007f2a:	f7f8 f9bf 	bl	80002ac <__adddf3>
 8007f2e:	4642      	mov	r2, r8
 8007f30:	464b      	mov	r3, r9
 8007f32:	4606      	mov	r6, r0
 8007f34:	460f      	mov	r7, r1
 8007f36:	f7f8 fdff 	bl	8000b38 <__aeabi_dcmpgt>
 8007f3a:	b9d0      	cbnz	r0, 8007f72 <_dtoa_r+0x6c2>
 8007f3c:	4642      	mov	r2, r8
 8007f3e:	464b      	mov	r3, r9
 8007f40:	4630      	mov	r0, r6
 8007f42:	4639      	mov	r1, r7
 8007f44:	f7f8 fdd0 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f48:	b110      	cbz	r0, 8007f50 <_dtoa_r+0x6a0>
 8007f4a:	f01a 0f01 	tst.w	sl, #1
 8007f4e:	d110      	bne.n	8007f72 <_dtoa_r+0x6c2>
 8007f50:	4620      	mov	r0, r4
 8007f52:	ee18 1a10 	vmov	r1, s16
 8007f56:	f000 fd25 	bl	80089a4 <_Bfree>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	9800      	ldr	r0, [sp, #0]
 8007f5e:	702b      	strb	r3, [r5, #0]
 8007f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f62:	3001      	adds	r0, #1
 8007f64:	6018      	str	r0, [r3, #0]
 8007f66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f43f acf1 	beq.w	8007950 <_dtoa_r+0xa0>
 8007f6e:	601d      	str	r5, [r3, #0]
 8007f70:	e4ee      	b.n	8007950 <_dtoa_r+0xa0>
 8007f72:	9f00      	ldr	r7, [sp, #0]
 8007f74:	462b      	mov	r3, r5
 8007f76:	461d      	mov	r5, r3
 8007f78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f7c:	2a39      	cmp	r2, #57	; 0x39
 8007f7e:	d106      	bne.n	8007f8e <_dtoa_r+0x6de>
 8007f80:	9a01      	ldr	r2, [sp, #4]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d1f7      	bne.n	8007f76 <_dtoa_r+0x6c6>
 8007f86:	9901      	ldr	r1, [sp, #4]
 8007f88:	2230      	movs	r2, #48	; 0x30
 8007f8a:	3701      	adds	r7, #1
 8007f8c:	700a      	strb	r2, [r1, #0]
 8007f8e:	781a      	ldrb	r2, [r3, #0]
 8007f90:	3201      	adds	r2, #1
 8007f92:	701a      	strb	r2, [r3, #0]
 8007f94:	e790      	b.n	8007eb8 <_dtoa_r+0x608>
 8007f96:	4ba6      	ldr	r3, [pc, #664]	; (8008230 <_dtoa_r+0x980>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f7f8 fb3d 	bl	8000618 <__aeabi_dmul>
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	460f      	mov	r7, r1
 8007fa6:	f7f8 fd9f 	bl	8000ae8 <__aeabi_dcmpeq>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d09d      	beq.n	8007eea <_dtoa_r+0x63a>
 8007fae:	e7cf      	b.n	8007f50 <_dtoa_r+0x6a0>
 8007fb0:	9a08      	ldr	r2, [sp, #32]
 8007fb2:	2a00      	cmp	r2, #0
 8007fb4:	f000 80d7 	beq.w	8008166 <_dtoa_r+0x8b6>
 8007fb8:	9a06      	ldr	r2, [sp, #24]
 8007fba:	2a01      	cmp	r2, #1
 8007fbc:	f300 80ba 	bgt.w	8008134 <_dtoa_r+0x884>
 8007fc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fc2:	2a00      	cmp	r2, #0
 8007fc4:	f000 80b2 	beq.w	800812c <_dtoa_r+0x87c>
 8007fc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007fcc:	9e07      	ldr	r6, [sp, #28]
 8007fce:	9d04      	ldr	r5, [sp, #16]
 8007fd0:	9a04      	ldr	r2, [sp, #16]
 8007fd2:	441a      	add	r2, r3
 8007fd4:	9204      	str	r2, [sp, #16]
 8007fd6:	9a05      	ldr	r2, [sp, #20]
 8007fd8:	2101      	movs	r1, #1
 8007fda:	441a      	add	r2, r3
 8007fdc:	4620      	mov	r0, r4
 8007fde:	9205      	str	r2, [sp, #20]
 8007fe0:	f000 fd98 	bl	8008b14 <__i2b>
 8007fe4:	4607      	mov	r7, r0
 8007fe6:	2d00      	cmp	r5, #0
 8007fe8:	dd0c      	ble.n	8008004 <_dtoa_r+0x754>
 8007fea:	9b05      	ldr	r3, [sp, #20]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	dd09      	ble.n	8008004 <_dtoa_r+0x754>
 8007ff0:	42ab      	cmp	r3, r5
 8007ff2:	9a04      	ldr	r2, [sp, #16]
 8007ff4:	bfa8      	it	ge
 8007ff6:	462b      	movge	r3, r5
 8007ff8:	1ad2      	subs	r2, r2, r3
 8007ffa:	9204      	str	r2, [sp, #16]
 8007ffc:	9a05      	ldr	r2, [sp, #20]
 8007ffe:	1aed      	subs	r5, r5, r3
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	9305      	str	r3, [sp, #20]
 8008004:	9b07      	ldr	r3, [sp, #28]
 8008006:	b31b      	cbz	r3, 8008050 <_dtoa_r+0x7a0>
 8008008:	9b08      	ldr	r3, [sp, #32]
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 80af 	beq.w	800816e <_dtoa_r+0x8be>
 8008010:	2e00      	cmp	r6, #0
 8008012:	dd13      	ble.n	800803c <_dtoa_r+0x78c>
 8008014:	4639      	mov	r1, r7
 8008016:	4632      	mov	r2, r6
 8008018:	4620      	mov	r0, r4
 800801a:	f000 fe3b 	bl	8008c94 <__pow5mult>
 800801e:	ee18 2a10 	vmov	r2, s16
 8008022:	4601      	mov	r1, r0
 8008024:	4607      	mov	r7, r0
 8008026:	4620      	mov	r0, r4
 8008028:	f000 fd8a 	bl	8008b40 <__multiply>
 800802c:	ee18 1a10 	vmov	r1, s16
 8008030:	4680      	mov	r8, r0
 8008032:	4620      	mov	r0, r4
 8008034:	f000 fcb6 	bl	80089a4 <_Bfree>
 8008038:	ee08 8a10 	vmov	s16, r8
 800803c:	9b07      	ldr	r3, [sp, #28]
 800803e:	1b9a      	subs	r2, r3, r6
 8008040:	d006      	beq.n	8008050 <_dtoa_r+0x7a0>
 8008042:	ee18 1a10 	vmov	r1, s16
 8008046:	4620      	mov	r0, r4
 8008048:	f000 fe24 	bl	8008c94 <__pow5mult>
 800804c:	ee08 0a10 	vmov	s16, r0
 8008050:	2101      	movs	r1, #1
 8008052:	4620      	mov	r0, r4
 8008054:	f000 fd5e 	bl	8008b14 <__i2b>
 8008058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800805a:	2b00      	cmp	r3, #0
 800805c:	4606      	mov	r6, r0
 800805e:	f340 8088 	ble.w	8008172 <_dtoa_r+0x8c2>
 8008062:	461a      	mov	r2, r3
 8008064:	4601      	mov	r1, r0
 8008066:	4620      	mov	r0, r4
 8008068:	f000 fe14 	bl	8008c94 <__pow5mult>
 800806c:	9b06      	ldr	r3, [sp, #24]
 800806e:	2b01      	cmp	r3, #1
 8008070:	4606      	mov	r6, r0
 8008072:	f340 8081 	ble.w	8008178 <_dtoa_r+0x8c8>
 8008076:	f04f 0800 	mov.w	r8, #0
 800807a:	6933      	ldr	r3, [r6, #16]
 800807c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008080:	6918      	ldr	r0, [r3, #16]
 8008082:	f000 fcf7 	bl	8008a74 <__hi0bits>
 8008086:	f1c0 0020 	rsb	r0, r0, #32
 800808a:	9b05      	ldr	r3, [sp, #20]
 800808c:	4418      	add	r0, r3
 800808e:	f010 001f 	ands.w	r0, r0, #31
 8008092:	f000 8092 	beq.w	80081ba <_dtoa_r+0x90a>
 8008096:	f1c0 0320 	rsb	r3, r0, #32
 800809a:	2b04      	cmp	r3, #4
 800809c:	f340 808a 	ble.w	80081b4 <_dtoa_r+0x904>
 80080a0:	f1c0 001c 	rsb	r0, r0, #28
 80080a4:	9b04      	ldr	r3, [sp, #16]
 80080a6:	4403      	add	r3, r0
 80080a8:	9304      	str	r3, [sp, #16]
 80080aa:	9b05      	ldr	r3, [sp, #20]
 80080ac:	4403      	add	r3, r0
 80080ae:	4405      	add	r5, r0
 80080b0:	9305      	str	r3, [sp, #20]
 80080b2:	9b04      	ldr	r3, [sp, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	dd07      	ble.n	80080c8 <_dtoa_r+0x818>
 80080b8:	ee18 1a10 	vmov	r1, s16
 80080bc:	461a      	mov	r2, r3
 80080be:	4620      	mov	r0, r4
 80080c0:	f000 fe42 	bl	8008d48 <__lshift>
 80080c4:	ee08 0a10 	vmov	s16, r0
 80080c8:	9b05      	ldr	r3, [sp, #20]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	dd05      	ble.n	80080da <_dtoa_r+0x82a>
 80080ce:	4631      	mov	r1, r6
 80080d0:	461a      	mov	r2, r3
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 fe38 	bl	8008d48 <__lshift>
 80080d8:	4606      	mov	r6, r0
 80080da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d06e      	beq.n	80081be <_dtoa_r+0x90e>
 80080e0:	ee18 0a10 	vmov	r0, s16
 80080e4:	4631      	mov	r1, r6
 80080e6:	f000 fe9f 	bl	8008e28 <__mcmp>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	da67      	bge.n	80081be <_dtoa_r+0x90e>
 80080ee:	9b00      	ldr	r3, [sp, #0]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	ee18 1a10 	vmov	r1, s16
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	220a      	movs	r2, #10
 80080fa:	2300      	movs	r3, #0
 80080fc:	4620      	mov	r0, r4
 80080fe:	f000 fc73 	bl	80089e8 <__multadd>
 8008102:	9b08      	ldr	r3, [sp, #32]
 8008104:	ee08 0a10 	vmov	s16, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 81b1 	beq.w	8008470 <_dtoa_r+0xbc0>
 800810e:	2300      	movs	r3, #0
 8008110:	4639      	mov	r1, r7
 8008112:	220a      	movs	r2, #10
 8008114:	4620      	mov	r0, r4
 8008116:	f000 fc67 	bl	80089e8 <__multadd>
 800811a:	9b02      	ldr	r3, [sp, #8]
 800811c:	2b00      	cmp	r3, #0
 800811e:	4607      	mov	r7, r0
 8008120:	f300 808e 	bgt.w	8008240 <_dtoa_r+0x990>
 8008124:	9b06      	ldr	r3, [sp, #24]
 8008126:	2b02      	cmp	r3, #2
 8008128:	dc51      	bgt.n	80081ce <_dtoa_r+0x91e>
 800812a:	e089      	b.n	8008240 <_dtoa_r+0x990>
 800812c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800812e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008132:	e74b      	b.n	8007fcc <_dtoa_r+0x71c>
 8008134:	9b03      	ldr	r3, [sp, #12]
 8008136:	1e5e      	subs	r6, r3, #1
 8008138:	9b07      	ldr	r3, [sp, #28]
 800813a:	42b3      	cmp	r3, r6
 800813c:	bfbf      	itttt	lt
 800813e:	9b07      	ldrlt	r3, [sp, #28]
 8008140:	9607      	strlt	r6, [sp, #28]
 8008142:	1af2      	sublt	r2, r6, r3
 8008144:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008146:	bfb6      	itet	lt
 8008148:	189b      	addlt	r3, r3, r2
 800814a:	1b9e      	subge	r6, r3, r6
 800814c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800814e:	9b03      	ldr	r3, [sp, #12]
 8008150:	bfb8      	it	lt
 8008152:	2600      	movlt	r6, #0
 8008154:	2b00      	cmp	r3, #0
 8008156:	bfb7      	itett	lt
 8008158:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800815c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008160:	1a9d      	sublt	r5, r3, r2
 8008162:	2300      	movlt	r3, #0
 8008164:	e734      	b.n	8007fd0 <_dtoa_r+0x720>
 8008166:	9e07      	ldr	r6, [sp, #28]
 8008168:	9d04      	ldr	r5, [sp, #16]
 800816a:	9f08      	ldr	r7, [sp, #32]
 800816c:	e73b      	b.n	8007fe6 <_dtoa_r+0x736>
 800816e:	9a07      	ldr	r2, [sp, #28]
 8008170:	e767      	b.n	8008042 <_dtoa_r+0x792>
 8008172:	9b06      	ldr	r3, [sp, #24]
 8008174:	2b01      	cmp	r3, #1
 8008176:	dc18      	bgt.n	80081aa <_dtoa_r+0x8fa>
 8008178:	f1ba 0f00 	cmp.w	sl, #0
 800817c:	d115      	bne.n	80081aa <_dtoa_r+0x8fa>
 800817e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008182:	b993      	cbnz	r3, 80081aa <_dtoa_r+0x8fa>
 8008184:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008188:	0d1b      	lsrs	r3, r3, #20
 800818a:	051b      	lsls	r3, r3, #20
 800818c:	b183      	cbz	r3, 80081b0 <_dtoa_r+0x900>
 800818e:	9b04      	ldr	r3, [sp, #16]
 8008190:	3301      	adds	r3, #1
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	9b05      	ldr	r3, [sp, #20]
 8008196:	3301      	adds	r3, #1
 8008198:	9305      	str	r3, [sp, #20]
 800819a:	f04f 0801 	mov.w	r8, #1
 800819e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f47f af6a 	bne.w	800807a <_dtoa_r+0x7ca>
 80081a6:	2001      	movs	r0, #1
 80081a8:	e76f      	b.n	800808a <_dtoa_r+0x7da>
 80081aa:	f04f 0800 	mov.w	r8, #0
 80081ae:	e7f6      	b.n	800819e <_dtoa_r+0x8ee>
 80081b0:	4698      	mov	r8, r3
 80081b2:	e7f4      	b.n	800819e <_dtoa_r+0x8ee>
 80081b4:	f43f af7d 	beq.w	80080b2 <_dtoa_r+0x802>
 80081b8:	4618      	mov	r0, r3
 80081ba:	301c      	adds	r0, #28
 80081bc:	e772      	b.n	80080a4 <_dtoa_r+0x7f4>
 80081be:	9b03      	ldr	r3, [sp, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	dc37      	bgt.n	8008234 <_dtoa_r+0x984>
 80081c4:	9b06      	ldr	r3, [sp, #24]
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	dd34      	ble.n	8008234 <_dtoa_r+0x984>
 80081ca:	9b03      	ldr	r3, [sp, #12]
 80081cc:	9302      	str	r3, [sp, #8]
 80081ce:	9b02      	ldr	r3, [sp, #8]
 80081d0:	b96b      	cbnz	r3, 80081ee <_dtoa_r+0x93e>
 80081d2:	4631      	mov	r1, r6
 80081d4:	2205      	movs	r2, #5
 80081d6:	4620      	mov	r0, r4
 80081d8:	f000 fc06 	bl	80089e8 <__multadd>
 80081dc:	4601      	mov	r1, r0
 80081de:	4606      	mov	r6, r0
 80081e0:	ee18 0a10 	vmov	r0, s16
 80081e4:	f000 fe20 	bl	8008e28 <__mcmp>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	f73f adbb 	bgt.w	8007d64 <_dtoa_r+0x4b4>
 80081ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f0:	9d01      	ldr	r5, [sp, #4]
 80081f2:	43db      	mvns	r3, r3
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	f04f 0800 	mov.w	r8, #0
 80081fa:	4631      	mov	r1, r6
 80081fc:	4620      	mov	r0, r4
 80081fe:	f000 fbd1 	bl	80089a4 <_Bfree>
 8008202:	2f00      	cmp	r7, #0
 8008204:	f43f aea4 	beq.w	8007f50 <_dtoa_r+0x6a0>
 8008208:	f1b8 0f00 	cmp.w	r8, #0
 800820c:	d005      	beq.n	800821a <_dtoa_r+0x96a>
 800820e:	45b8      	cmp	r8, r7
 8008210:	d003      	beq.n	800821a <_dtoa_r+0x96a>
 8008212:	4641      	mov	r1, r8
 8008214:	4620      	mov	r0, r4
 8008216:	f000 fbc5 	bl	80089a4 <_Bfree>
 800821a:	4639      	mov	r1, r7
 800821c:	4620      	mov	r0, r4
 800821e:	f000 fbc1 	bl	80089a4 <_Bfree>
 8008222:	e695      	b.n	8007f50 <_dtoa_r+0x6a0>
 8008224:	2600      	movs	r6, #0
 8008226:	4637      	mov	r7, r6
 8008228:	e7e1      	b.n	80081ee <_dtoa_r+0x93e>
 800822a:	9700      	str	r7, [sp, #0]
 800822c:	4637      	mov	r7, r6
 800822e:	e599      	b.n	8007d64 <_dtoa_r+0x4b4>
 8008230:	40240000 	.word	0x40240000
 8008234:	9b08      	ldr	r3, [sp, #32]
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 80ca 	beq.w	80083d0 <_dtoa_r+0xb20>
 800823c:	9b03      	ldr	r3, [sp, #12]
 800823e:	9302      	str	r3, [sp, #8]
 8008240:	2d00      	cmp	r5, #0
 8008242:	dd05      	ble.n	8008250 <_dtoa_r+0x9a0>
 8008244:	4639      	mov	r1, r7
 8008246:	462a      	mov	r2, r5
 8008248:	4620      	mov	r0, r4
 800824a:	f000 fd7d 	bl	8008d48 <__lshift>
 800824e:	4607      	mov	r7, r0
 8008250:	f1b8 0f00 	cmp.w	r8, #0
 8008254:	d05b      	beq.n	800830e <_dtoa_r+0xa5e>
 8008256:	6879      	ldr	r1, [r7, #4]
 8008258:	4620      	mov	r0, r4
 800825a:	f000 fb63 	bl	8008924 <_Balloc>
 800825e:	4605      	mov	r5, r0
 8008260:	b928      	cbnz	r0, 800826e <_dtoa_r+0x9be>
 8008262:	4b87      	ldr	r3, [pc, #540]	; (8008480 <_dtoa_r+0xbd0>)
 8008264:	4602      	mov	r2, r0
 8008266:	f240 21ea 	movw	r1, #746	; 0x2ea
 800826a:	f7ff bb3b 	b.w	80078e4 <_dtoa_r+0x34>
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	3202      	adds	r2, #2
 8008272:	0092      	lsls	r2, r2, #2
 8008274:	f107 010c 	add.w	r1, r7, #12
 8008278:	300c      	adds	r0, #12
 800827a:	f000 fb45 	bl	8008908 <memcpy>
 800827e:	2201      	movs	r2, #1
 8008280:	4629      	mov	r1, r5
 8008282:	4620      	mov	r0, r4
 8008284:	f000 fd60 	bl	8008d48 <__lshift>
 8008288:	9b01      	ldr	r3, [sp, #4]
 800828a:	f103 0901 	add.w	r9, r3, #1
 800828e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008292:	4413      	add	r3, r2
 8008294:	9305      	str	r3, [sp, #20]
 8008296:	f00a 0301 	and.w	r3, sl, #1
 800829a:	46b8      	mov	r8, r7
 800829c:	9304      	str	r3, [sp, #16]
 800829e:	4607      	mov	r7, r0
 80082a0:	4631      	mov	r1, r6
 80082a2:	ee18 0a10 	vmov	r0, s16
 80082a6:	f7ff fa75 	bl	8007794 <quorem>
 80082aa:	4641      	mov	r1, r8
 80082ac:	9002      	str	r0, [sp, #8]
 80082ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80082b2:	ee18 0a10 	vmov	r0, s16
 80082b6:	f000 fdb7 	bl	8008e28 <__mcmp>
 80082ba:	463a      	mov	r2, r7
 80082bc:	9003      	str	r0, [sp, #12]
 80082be:	4631      	mov	r1, r6
 80082c0:	4620      	mov	r0, r4
 80082c2:	f000 fdcd 	bl	8008e60 <__mdiff>
 80082c6:	68c2      	ldr	r2, [r0, #12]
 80082c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80082cc:	4605      	mov	r5, r0
 80082ce:	bb02      	cbnz	r2, 8008312 <_dtoa_r+0xa62>
 80082d0:	4601      	mov	r1, r0
 80082d2:	ee18 0a10 	vmov	r0, s16
 80082d6:	f000 fda7 	bl	8008e28 <__mcmp>
 80082da:	4602      	mov	r2, r0
 80082dc:	4629      	mov	r1, r5
 80082de:	4620      	mov	r0, r4
 80082e0:	9207      	str	r2, [sp, #28]
 80082e2:	f000 fb5f 	bl	80089a4 <_Bfree>
 80082e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80082ea:	ea43 0102 	orr.w	r1, r3, r2
 80082ee:	9b04      	ldr	r3, [sp, #16]
 80082f0:	430b      	orrs	r3, r1
 80082f2:	464d      	mov	r5, r9
 80082f4:	d10f      	bne.n	8008316 <_dtoa_r+0xa66>
 80082f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80082fa:	d02a      	beq.n	8008352 <_dtoa_r+0xaa2>
 80082fc:	9b03      	ldr	r3, [sp, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	dd02      	ble.n	8008308 <_dtoa_r+0xa58>
 8008302:	9b02      	ldr	r3, [sp, #8]
 8008304:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008308:	f88b a000 	strb.w	sl, [fp]
 800830c:	e775      	b.n	80081fa <_dtoa_r+0x94a>
 800830e:	4638      	mov	r0, r7
 8008310:	e7ba      	b.n	8008288 <_dtoa_r+0x9d8>
 8008312:	2201      	movs	r2, #1
 8008314:	e7e2      	b.n	80082dc <_dtoa_r+0xa2c>
 8008316:	9b03      	ldr	r3, [sp, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	db04      	blt.n	8008326 <_dtoa_r+0xa76>
 800831c:	9906      	ldr	r1, [sp, #24]
 800831e:	430b      	orrs	r3, r1
 8008320:	9904      	ldr	r1, [sp, #16]
 8008322:	430b      	orrs	r3, r1
 8008324:	d122      	bne.n	800836c <_dtoa_r+0xabc>
 8008326:	2a00      	cmp	r2, #0
 8008328:	ddee      	ble.n	8008308 <_dtoa_r+0xa58>
 800832a:	ee18 1a10 	vmov	r1, s16
 800832e:	2201      	movs	r2, #1
 8008330:	4620      	mov	r0, r4
 8008332:	f000 fd09 	bl	8008d48 <__lshift>
 8008336:	4631      	mov	r1, r6
 8008338:	ee08 0a10 	vmov	s16, r0
 800833c:	f000 fd74 	bl	8008e28 <__mcmp>
 8008340:	2800      	cmp	r0, #0
 8008342:	dc03      	bgt.n	800834c <_dtoa_r+0xa9c>
 8008344:	d1e0      	bne.n	8008308 <_dtoa_r+0xa58>
 8008346:	f01a 0f01 	tst.w	sl, #1
 800834a:	d0dd      	beq.n	8008308 <_dtoa_r+0xa58>
 800834c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008350:	d1d7      	bne.n	8008302 <_dtoa_r+0xa52>
 8008352:	2339      	movs	r3, #57	; 0x39
 8008354:	f88b 3000 	strb.w	r3, [fp]
 8008358:	462b      	mov	r3, r5
 800835a:	461d      	mov	r5, r3
 800835c:	3b01      	subs	r3, #1
 800835e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008362:	2a39      	cmp	r2, #57	; 0x39
 8008364:	d071      	beq.n	800844a <_dtoa_r+0xb9a>
 8008366:	3201      	adds	r2, #1
 8008368:	701a      	strb	r2, [r3, #0]
 800836a:	e746      	b.n	80081fa <_dtoa_r+0x94a>
 800836c:	2a00      	cmp	r2, #0
 800836e:	dd07      	ble.n	8008380 <_dtoa_r+0xad0>
 8008370:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008374:	d0ed      	beq.n	8008352 <_dtoa_r+0xaa2>
 8008376:	f10a 0301 	add.w	r3, sl, #1
 800837a:	f88b 3000 	strb.w	r3, [fp]
 800837e:	e73c      	b.n	80081fa <_dtoa_r+0x94a>
 8008380:	9b05      	ldr	r3, [sp, #20]
 8008382:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008386:	4599      	cmp	r9, r3
 8008388:	d047      	beq.n	800841a <_dtoa_r+0xb6a>
 800838a:	ee18 1a10 	vmov	r1, s16
 800838e:	2300      	movs	r3, #0
 8008390:	220a      	movs	r2, #10
 8008392:	4620      	mov	r0, r4
 8008394:	f000 fb28 	bl	80089e8 <__multadd>
 8008398:	45b8      	cmp	r8, r7
 800839a:	ee08 0a10 	vmov	s16, r0
 800839e:	f04f 0300 	mov.w	r3, #0
 80083a2:	f04f 020a 	mov.w	r2, #10
 80083a6:	4641      	mov	r1, r8
 80083a8:	4620      	mov	r0, r4
 80083aa:	d106      	bne.n	80083ba <_dtoa_r+0xb0a>
 80083ac:	f000 fb1c 	bl	80089e8 <__multadd>
 80083b0:	4680      	mov	r8, r0
 80083b2:	4607      	mov	r7, r0
 80083b4:	f109 0901 	add.w	r9, r9, #1
 80083b8:	e772      	b.n	80082a0 <_dtoa_r+0x9f0>
 80083ba:	f000 fb15 	bl	80089e8 <__multadd>
 80083be:	4639      	mov	r1, r7
 80083c0:	4680      	mov	r8, r0
 80083c2:	2300      	movs	r3, #0
 80083c4:	220a      	movs	r2, #10
 80083c6:	4620      	mov	r0, r4
 80083c8:	f000 fb0e 	bl	80089e8 <__multadd>
 80083cc:	4607      	mov	r7, r0
 80083ce:	e7f1      	b.n	80083b4 <_dtoa_r+0xb04>
 80083d0:	9b03      	ldr	r3, [sp, #12]
 80083d2:	9302      	str	r3, [sp, #8]
 80083d4:	9d01      	ldr	r5, [sp, #4]
 80083d6:	ee18 0a10 	vmov	r0, s16
 80083da:	4631      	mov	r1, r6
 80083dc:	f7ff f9da 	bl	8007794 <quorem>
 80083e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80083e4:	9b01      	ldr	r3, [sp, #4]
 80083e6:	f805 ab01 	strb.w	sl, [r5], #1
 80083ea:	1aea      	subs	r2, r5, r3
 80083ec:	9b02      	ldr	r3, [sp, #8]
 80083ee:	4293      	cmp	r3, r2
 80083f0:	dd09      	ble.n	8008406 <_dtoa_r+0xb56>
 80083f2:	ee18 1a10 	vmov	r1, s16
 80083f6:	2300      	movs	r3, #0
 80083f8:	220a      	movs	r2, #10
 80083fa:	4620      	mov	r0, r4
 80083fc:	f000 faf4 	bl	80089e8 <__multadd>
 8008400:	ee08 0a10 	vmov	s16, r0
 8008404:	e7e7      	b.n	80083d6 <_dtoa_r+0xb26>
 8008406:	9b02      	ldr	r3, [sp, #8]
 8008408:	2b00      	cmp	r3, #0
 800840a:	bfc8      	it	gt
 800840c:	461d      	movgt	r5, r3
 800840e:	9b01      	ldr	r3, [sp, #4]
 8008410:	bfd8      	it	le
 8008412:	2501      	movle	r5, #1
 8008414:	441d      	add	r5, r3
 8008416:	f04f 0800 	mov.w	r8, #0
 800841a:	ee18 1a10 	vmov	r1, s16
 800841e:	2201      	movs	r2, #1
 8008420:	4620      	mov	r0, r4
 8008422:	f000 fc91 	bl	8008d48 <__lshift>
 8008426:	4631      	mov	r1, r6
 8008428:	ee08 0a10 	vmov	s16, r0
 800842c:	f000 fcfc 	bl	8008e28 <__mcmp>
 8008430:	2800      	cmp	r0, #0
 8008432:	dc91      	bgt.n	8008358 <_dtoa_r+0xaa8>
 8008434:	d102      	bne.n	800843c <_dtoa_r+0xb8c>
 8008436:	f01a 0f01 	tst.w	sl, #1
 800843a:	d18d      	bne.n	8008358 <_dtoa_r+0xaa8>
 800843c:	462b      	mov	r3, r5
 800843e:	461d      	mov	r5, r3
 8008440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008444:	2a30      	cmp	r2, #48	; 0x30
 8008446:	d0fa      	beq.n	800843e <_dtoa_r+0xb8e>
 8008448:	e6d7      	b.n	80081fa <_dtoa_r+0x94a>
 800844a:	9a01      	ldr	r2, [sp, #4]
 800844c:	429a      	cmp	r2, r3
 800844e:	d184      	bne.n	800835a <_dtoa_r+0xaaa>
 8008450:	9b00      	ldr	r3, [sp, #0]
 8008452:	3301      	adds	r3, #1
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	2331      	movs	r3, #49	; 0x31
 8008458:	7013      	strb	r3, [r2, #0]
 800845a:	e6ce      	b.n	80081fa <_dtoa_r+0x94a>
 800845c:	4b09      	ldr	r3, [pc, #36]	; (8008484 <_dtoa_r+0xbd4>)
 800845e:	f7ff ba95 	b.w	800798c <_dtoa_r+0xdc>
 8008462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008464:	2b00      	cmp	r3, #0
 8008466:	f47f aa6e 	bne.w	8007946 <_dtoa_r+0x96>
 800846a:	4b07      	ldr	r3, [pc, #28]	; (8008488 <_dtoa_r+0xbd8>)
 800846c:	f7ff ba8e 	b.w	800798c <_dtoa_r+0xdc>
 8008470:	9b02      	ldr	r3, [sp, #8]
 8008472:	2b00      	cmp	r3, #0
 8008474:	dcae      	bgt.n	80083d4 <_dtoa_r+0xb24>
 8008476:	9b06      	ldr	r3, [sp, #24]
 8008478:	2b02      	cmp	r3, #2
 800847a:	f73f aea8 	bgt.w	80081ce <_dtoa_r+0x91e>
 800847e:	e7a9      	b.n	80083d4 <_dtoa_r+0xb24>
 8008480:	080099e6 	.word	0x080099e6
 8008484:	080098ac 	.word	0x080098ac
 8008488:	0800997e 	.word	0x0800997e

0800848c <__sflush_r>:
 800848c:	898a      	ldrh	r2, [r1, #12]
 800848e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008492:	4605      	mov	r5, r0
 8008494:	0710      	lsls	r0, r2, #28
 8008496:	460c      	mov	r4, r1
 8008498:	d458      	bmi.n	800854c <__sflush_r+0xc0>
 800849a:	684b      	ldr	r3, [r1, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	dc05      	bgt.n	80084ac <__sflush_r+0x20>
 80084a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	dc02      	bgt.n	80084ac <__sflush_r+0x20>
 80084a6:	2000      	movs	r0, #0
 80084a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084ae:	2e00      	cmp	r6, #0
 80084b0:	d0f9      	beq.n	80084a6 <__sflush_r+0x1a>
 80084b2:	2300      	movs	r3, #0
 80084b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084b8:	682f      	ldr	r7, [r5, #0]
 80084ba:	602b      	str	r3, [r5, #0]
 80084bc:	d032      	beq.n	8008524 <__sflush_r+0x98>
 80084be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084c0:	89a3      	ldrh	r3, [r4, #12]
 80084c2:	075a      	lsls	r2, r3, #29
 80084c4:	d505      	bpl.n	80084d2 <__sflush_r+0x46>
 80084c6:	6863      	ldr	r3, [r4, #4]
 80084c8:	1ac0      	subs	r0, r0, r3
 80084ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084cc:	b10b      	cbz	r3, 80084d2 <__sflush_r+0x46>
 80084ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084d0:	1ac0      	subs	r0, r0, r3
 80084d2:	2300      	movs	r3, #0
 80084d4:	4602      	mov	r2, r0
 80084d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084d8:	6a21      	ldr	r1, [r4, #32]
 80084da:	4628      	mov	r0, r5
 80084dc:	47b0      	blx	r6
 80084de:	1c43      	adds	r3, r0, #1
 80084e0:	89a3      	ldrh	r3, [r4, #12]
 80084e2:	d106      	bne.n	80084f2 <__sflush_r+0x66>
 80084e4:	6829      	ldr	r1, [r5, #0]
 80084e6:	291d      	cmp	r1, #29
 80084e8:	d82c      	bhi.n	8008544 <__sflush_r+0xb8>
 80084ea:	4a2a      	ldr	r2, [pc, #168]	; (8008594 <__sflush_r+0x108>)
 80084ec:	40ca      	lsrs	r2, r1
 80084ee:	07d6      	lsls	r6, r2, #31
 80084f0:	d528      	bpl.n	8008544 <__sflush_r+0xb8>
 80084f2:	2200      	movs	r2, #0
 80084f4:	6062      	str	r2, [r4, #4]
 80084f6:	04d9      	lsls	r1, r3, #19
 80084f8:	6922      	ldr	r2, [r4, #16]
 80084fa:	6022      	str	r2, [r4, #0]
 80084fc:	d504      	bpl.n	8008508 <__sflush_r+0x7c>
 80084fe:	1c42      	adds	r2, r0, #1
 8008500:	d101      	bne.n	8008506 <__sflush_r+0x7a>
 8008502:	682b      	ldr	r3, [r5, #0]
 8008504:	b903      	cbnz	r3, 8008508 <__sflush_r+0x7c>
 8008506:	6560      	str	r0, [r4, #84]	; 0x54
 8008508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800850a:	602f      	str	r7, [r5, #0]
 800850c:	2900      	cmp	r1, #0
 800850e:	d0ca      	beq.n	80084a6 <__sflush_r+0x1a>
 8008510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008514:	4299      	cmp	r1, r3
 8008516:	d002      	beq.n	800851e <__sflush_r+0x92>
 8008518:	4628      	mov	r0, r5
 800851a:	f000 fd9d 	bl	8009058 <_free_r>
 800851e:	2000      	movs	r0, #0
 8008520:	6360      	str	r0, [r4, #52]	; 0x34
 8008522:	e7c1      	b.n	80084a8 <__sflush_r+0x1c>
 8008524:	6a21      	ldr	r1, [r4, #32]
 8008526:	2301      	movs	r3, #1
 8008528:	4628      	mov	r0, r5
 800852a:	47b0      	blx	r6
 800852c:	1c41      	adds	r1, r0, #1
 800852e:	d1c7      	bne.n	80084c0 <__sflush_r+0x34>
 8008530:	682b      	ldr	r3, [r5, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0c4      	beq.n	80084c0 <__sflush_r+0x34>
 8008536:	2b1d      	cmp	r3, #29
 8008538:	d001      	beq.n	800853e <__sflush_r+0xb2>
 800853a:	2b16      	cmp	r3, #22
 800853c:	d101      	bne.n	8008542 <__sflush_r+0xb6>
 800853e:	602f      	str	r7, [r5, #0]
 8008540:	e7b1      	b.n	80084a6 <__sflush_r+0x1a>
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008548:	81a3      	strh	r3, [r4, #12]
 800854a:	e7ad      	b.n	80084a8 <__sflush_r+0x1c>
 800854c:	690f      	ldr	r7, [r1, #16]
 800854e:	2f00      	cmp	r7, #0
 8008550:	d0a9      	beq.n	80084a6 <__sflush_r+0x1a>
 8008552:	0793      	lsls	r3, r2, #30
 8008554:	680e      	ldr	r6, [r1, #0]
 8008556:	bf08      	it	eq
 8008558:	694b      	ldreq	r3, [r1, #20]
 800855a:	600f      	str	r7, [r1, #0]
 800855c:	bf18      	it	ne
 800855e:	2300      	movne	r3, #0
 8008560:	eba6 0807 	sub.w	r8, r6, r7
 8008564:	608b      	str	r3, [r1, #8]
 8008566:	f1b8 0f00 	cmp.w	r8, #0
 800856a:	dd9c      	ble.n	80084a6 <__sflush_r+0x1a>
 800856c:	6a21      	ldr	r1, [r4, #32]
 800856e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008570:	4643      	mov	r3, r8
 8008572:	463a      	mov	r2, r7
 8008574:	4628      	mov	r0, r5
 8008576:	47b0      	blx	r6
 8008578:	2800      	cmp	r0, #0
 800857a:	dc06      	bgt.n	800858a <__sflush_r+0xfe>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008582:	81a3      	strh	r3, [r4, #12]
 8008584:	f04f 30ff 	mov.w	r0, #4294967295
 8008588:	e78e      	b.n	80084a8 <__sflush_r+0x1c>
 800858a:	4407      	add	r7, r0
 800858c:	eba8 0800 	sub.w	r8, r8, r0
 8008590:	e7e9      	b.n	8008566 <__sflush_r+0xda>
 8008592:	bf00      	nop
 8008594:	20400001 	.word	0x20400001

08008598 <_fflush_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	690b      	ldr	r3, [r1, #16]
 800859c:	4605      	mov	r5, r0
 800859e:	460c      	mov	r4, r1
 80085a0:	b913      	cbnz	r3, 80085a8 <_fflush_r+0x10>
 80085a2:	2500      	movs	r5, #0
 80085a4:	4628      	mov	r0, r5
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
 80085a8:	b118      	cbz	r0, 80085b2 <_fflush_r+0x1a>
 80085aa:	6983      	ldr	r3, [r0, #24]
 80085ac:	b90b      	cbnz	r3, 80085b2 <_fflush_r+0x1a>
 80085ae:	f000 f887 	bl	80086c0 <__sinit>
 80085b2:	4b14      	ldr	r3, [pc, #80]	; (8008604 <_fflush_r+0x6c>)
 80085b4:	429c      	cmp	r4, r3
 80085b6:	d11b      	bne.n	80085f0 <_fflush_r+0x58>
 80085b8:	686c      	ldr	r4, [r5, #4]
 80085ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d0ef      	beq.n	80085a2 <_fflush_r+0xa>
 80085c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085c4:	07d0      	lsls	r0, r2, #31
 80085c6:	d404      	bmi.n	80085d2 <_fflush_r+0x3a>
 80085c8:	0599      	lsls	r1, r3, #22
 80085ca:	d402      	bmi.n	80085d2 <_fflush_r+0x3a>
 80085cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085ce:	f000 f92c 	bl	800882a <__retarget_lock_acquire_recursive>
 80085d2:	4628      	mov	r0, r5
 80085d4:	4621      	mov	r1, r4
 80085d6:	f7ff ff59 	bl	800848c <__sflush_r>
 80085da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085dc:	07da      	lsls	r2, r3, #31
 80085de:	4605      	mov	r5, r0
 80085e0:	d4e0      	bmi.n	80085a4 <_fflush_r+0xc>
 80085e2:	89a3      	ldrh	r3, [r4, #12]
 80085e4:	059b      	lsls	r3, r3, #22
 80085e6:	d4dd      	bmi.n	80085a4 <_fflush_r+0xc>
 80085e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085ea:	f000 f91f 	bl	800882c <__retarget_lock_release_recursive>
 80085ee:	e7d9      	b.n	80085a4 <_fflush_r+0xc>
 80085f0:	4b05      	ldr	r3, [pc, #20]	; (8008608 <_fflush_r+0x70>)
 80085f2:	429c      	cmp	r4, r3
 80085f4:	d101      	bne.n	80085fa <_fflush_r+0x62>
 80085f6:	68ac      	ldr	r4, [r5, #8]
 80085f8:	e7df      	b.n	80085ba <_fflush_r+0x22>
 80085fa:	4b04      	ldr	r3, [pc, #16]	; (800860c <_fflush_r+0x74>)
 80085fc:	429c      	cmp	r4, r3
 80085fe:	bf08      	it	eq
 8008600:	68ec      	ldreq	r4, [r5, #12]
 8008602:	e7da      	b.n	80085ba <_fflush_r+0x22>
 8008604:	08009a18 	.word	0x08009a18
 8008608:	08009a38 	.word	0x08009a38
 800860c:	080099f8 	.word	0x080099f8

08008610 <std>:
 8008610:	2300      	movs	r3, #0
 8008612:	b510      	push	{r4, lr}
 8008614:	4604      	mov	r4, r0
 8008616:	e9c0 3300 	strd	r3, r3, [r0]
 800861a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800861e:	6083      	str	r3, [r0, #8]
 8008620:	8181      	strh	r1, [r0, #12]
 8008622:	6643      	str	r3, [r0, #100]	; 0x64
 8008624:	81c2      	strh	r2, [r0, #14]
 8008626:	6183      	str	r3, [r0, #24]
 8008628:	4619      	mov	r1, r3
 800862a:	2208      	movs	r2, #8
 800862c:	305c      	adds	r0, #92	; 0x5c
 800862e:	f7fe faad 	bl	8006b8c <memset>
 8008632:	4b05      	ldr	r3, [pc, #20]	; (8008648 <std+0x38>)
 8008634:	6263      	str	r3, [r4, #36]	; 0x24
 8008636:	4b05      	ldr	r3, [pc, #20]	; (800864c <std+0x3c>)
 8008638:	62a3      	str	r3, [r4, #40]	; 0x28
 800863a:	4b05      	ldr	r3, [pc, #20]	; (8008650 <std+0x40>)
 800863c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800863e:	4b05      	ldr	r3, [pc, #20]	; (8008654 <std+0x44>)
 8008640:	6224      	str	r4, [r4, #32]
 8008642:	6323      	str	r3, [r4, #48]	; 0x30
 8008644:	bd10      	pop	{r4, pc}
 8008646:	bf00      	nop
 8008648:	080094ed 	.word	0x080094ed
 800864c:	0800950f 	.word	0x0800950f
 8008650:	08009547 	.word	0x08009547
 8008654:	0800956b 	.word	0x0800956b

08008658 <_cleanup_r>:
 8008658:	4901      	ldr	r1, [pc, #4]	; (8008660 <_cleanup_r+0x8>)
 800865a:	f000 b8c1 	b.w	80087e0 <_fwalk_reent>
 800865e:	bf00      	nop
 8008660:	08008599 	.word	0x08008599

08008664 <__sfmoreglue>:
 8008664:	b570      	push	{r4, r5, r6, lr}
 8008666:	2268      	movs	r2, #104	; 0x68
 8008668:	1e4d      	subs	r5, r1, #1
 800866a:	4355      	muls	r5, r2
 800866c:	460e      	mov	r6, r1
 800866e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008672:	f000 fd5d 	bl	8009130 <_malloc_r>
 8008676:	4604      	mov	r4, r0
 8008678:	b140      	cbz	r0, 800868c <__sfmoreglue+0x28>
 800867a:	2100      	movs	r1, #0
 800867c:	e9c0 1600 	strd	r1, r6, [r0]
 8008680:	300c      	adds	r0, #12
 8008682:	60a0      	str	r0, [r4, #8]
 8008684:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008688:	f7fe fa80 	bl	8006b8c <memset>
 800868c:	4620      	mov	r0, r4
 800868e:	bd70      	pop	{r4, r5, r6, pc}

08008690 <__sfp_lock_acquire>:
 8008690:	4801      	ldr	r0, [pc, #4]	; (8008698 <__sfp_lock_acquire+0x8>)
 8008692:	f000 b8ca 	b.w	800882a <__retarget_lock_acquire_recursive>
 8008696:	bf00      	nop
 8008698:	2000054d 	.word	0x2000054d

0800869c <__sfp_lock_release>:
 800869c:	4801      	ldr	r0, [pc, #4]	; (80086a4 <__sfp_lock_release+0x8>)
 800869e:	f000 b8c5 	b.w	800882c <__retarget_lock_release_recursive>
 80086a2:	bf00      	nop
 80086a4:	2000054d 	.word	0x2000054d

080086a8 <__sinit_lock_acquire>:
 80086a8:	4801      	ldr	r0, [pc, #4]	; (80086b0 <__sinit_lock_acquire+0x8>)
 80086aa:	f000 b8be 	b.w	800882a <__retarget_lock_acquire_recursive>
 80086ae:	bf00      	nop
 80086b0:	2000054e 	.word	0x2000054e

080086b4 <__sinit_lock_release>:
 80086b4:	4801      	ldr	r0, [pc, #4]	; (80086bc <__sinit_lock_release+0x8>)
 80086b6:	f000 b8b9 	b.w	800882c <__retarget_lock_release_recursive>
 80086ba:	bf00      	nop
 80086bc:	2000054e 	.word	0x2000054e

080086c0 <__sinit>:
 80086c0:	b510      	push	{r4, lr}
 80086c2:	4604      	mov	r4, r0
 80086c4:	f7ff fff0 	bl	80086a8 <__sinit_lock_acquire>
 80086c8:	69a3      	ldr	r3, [r4, #24]
 80086ca:	b11b      	cbz	r3, 80086d4 <__sinit+0x14>
 80086cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086d0:	f7ff bff0 	b.w	80086b4 <__sinit_lock_release>
 80086d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80086d8:	6523      	str	r3, [r4, #80]	; 0x50
 80086da:	4b13      	ldr	r3, [pc, #76]	; (8008728 <__sinit+0x68>)
 80086dc:	4a13      	ldr	r2, [pc, #76]	; (800872c <__sinit+0x6c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80086e2:	42a3      	cmp	r3, r4
 80086e4:	bf04      	itt	eq
 80086e6:	2301      	moveq	r3, #1
 80086e8:	61a3      	streq	r3, [r4, #24]
 80086ea:	4620      	mov	r0, r4
 80086ec:	f000 f820 	bl	8008730 <__sfp>
 80086f0:	6060      	str	r0, [r4, #4]
 80086f2:	4620      	mov	r0, r4
 80086f4:	f000 f81c 	bl	8008730 <__sfp>
 80086f8:	60a0      	str	r0, [r4, #8]
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 f818 	bl	8008730 <__sfp>
 8008700:	2200      	movs	r2, #0
 8008702:	60e0      	str	r0, [r4, #12]
 8008704:	2104      	movs	r1, #4
 8008706:	6860      	ldr	r0, [r4, #4]
 8008708:	f7ff ff82 	bl	8008610 <std>
 800870c:	68a0      	ldr	r0, [r4, #8]
 800870e:	2201      	movs	r2, #1
 8008710:	2109      	movs	r1, #9
 8008712:	f7ff ff7d 	bl	8008610 <std>
 8008716:	68e0      	ldr	r0, [r4, #12]
 8008718:	2202      	movs	r2, #2
 800871a:	2112      	movs	r1, #18
 800871c:	f7ff ff78 	bl	8008610 <std>
 8008720:	2301      	movs	r3, #1
 8008722:	61a3      	str	r3, [r4, #24]
 8008724:	e7d2      	b.n	80086cc <__sinit+0xc>
 8008726:	bf00      	nop
 8008728:	08009898 	.word	0x08009898
 800872c:	08008659 	.word	0x08008659

08008730 <__sfp>:
 8008730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008732:	4607      	mov	r7, r0
 8008734:	f7ff ffac 	bl	8008690 <__sfp_lock_acquire>
 8008738:	4b1e      	ldr	r3, [pc, #120]	; (80087b4 <__sfp+0x84>)
 800873a:	681e      	ldr	r6, [r3, #0]
 800873c:	69b3      	ldr	r3, [r6, #24]
 800873e:	b913      	cbnz	r3, 8008746 <__sfp+0x16>
 8008740:	4630      	mov	r0, r6
 8008742:	f7ff ffbd 	bl	80086c0 <__sinit>
 8008746:	3648      	adds	r6, #72	; 0x48
 8008748:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800874c:	3b01      	subs	r3, #1
 800874e:	d503      	bpl.n	8008758 <__sfp+0x28>
 8008750:	6833      	ldr	r3, [r6, #0]
 8008752:	b30b      	cbz	r3, 8008798 <__sfp+0x68>
 8008754:	6836      	ldr	r6, [r6, #0]
 8008756:	e7f7      	b.n	8008748 <__sfp+0x18>
 8008758:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800875c:	b9d5      	cbnz	r5, 8008794 <__sfp+0x64>
 800875e:	4b16      	ldr	r3, [pc, #88]	; (80087b8 <__sfp+0x88>)
 8008760:	60e3      	str	r3, [r4, #12]
 8008762:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008766:	6665      	str	r5, [r4, #100]	; 0x64
 8008768:	f000 f85e 	bl	8008828 <__retarget_lock_init_recursive>
 800876c:	f7ff ff96 	bl	800869c <__sfp_lock_release>
 8008770:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008774:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008778:	6025      	str	r5, [r4, #0]
 800877a:	61a5      	str	r5, [r4, #24]
 800877c:	2208      	movs	r2, #8
 800877e:	4629      	mov	r1, r5
 8008780:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008784:	f7fe fa02 	bl	8006b8c <memset>
 8008788:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800878c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008790:	4620      	mov	r0, r4
 8008792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008794:	3468      	adds	r4, #104	; 0x68
 8008796:	e7d9      	b.n	800874c <__sfp+0x1c>
 8008798:	2104      	movs	r1, #4
 800879a:	4638      	mov	r0, r7
 800879c:	f7ff ff62 	bl	8008664 <__sfmoreglue>
 80087a0:	4604      	mov	r4, r0
 80087a2:	6030      	str	r0, [r6, #0]
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d1d5      	bne.n	8008754 <__sfp+0x24>
 80087a8:	f7ff ff78 	bl	800869c <__sfp_lock_release>
 80087ac:	230c      	movs	r3, #12
 80087ae:	603b      	str	r3, [r7, #0]
 80087b0:	e7ee      	b.n	8008790 <__sfp+0x60>
 80087b2:	bf00      	nop
 80087b4:	08009898 	.word	0x08009898
 80087b8:	ffff0001 	.word	0xffff0001

080087bc <fiprintf>:
 80087bc:	b40e      	push	{r1, r2, r3}
 80087be:	b503      	push	{r0, r1, lr}
 80087c0:	4601      	mov	r1, r0
 80087c2:	ab03      	add	r3, sp, #12
 80087c4:	4805      	ldr	r0, [pc, #20]	; (80087dc <fiprintf+0x20>)
 80087c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ca:	6800      	ldr	r0, [r0, #0]
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	f000 fd4d 	bl	800926c <_vfiprintf_r>
 80087d2:	b002      	add	sp, #8
 80087d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80087d8:	b003      	add	sp, #12
 80087da:	4770      	bx	lr
 80087dc:	2000003c 	.word	0x2000003c

080087e0 <_fwalk_reent>:
 80087e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087e4:	4606      	mov	r6, r0
 80087e6:	4688      	mov	r8, r1
 80087e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087ec:	2700      	movs	r7, #0
 80087ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087f2:	f1b9 0901 	subs.w	r9, r9, #1
 80087f6:	d505      	bpl.n	8008804 <_fwalk_reent+0x24>
 80087f8:	6824      	ldr	r4, [r4, #0]
 80087fa:	2c00      	cmp	r4, #0
 80087fc:	d1f7      	bne.n	80087ee <_fwalk_reent+0xe>
 80087fe:	4638      	mov	r0, r7
 8008800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008804:	89ab      	ldrh	r3, [r5, #12]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d907      	bls.n	800881a <_fwalk_reent+0x3a>
 800880a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800880e:	3301      	adds	r3, #1
 8008810:	d003      	beq.n	800881a <_fwalk_reent+0x3a>
 8008812:	4629      	mov	r1, r5
 8008814:	4630      	mov	r0, r6
 8008816:	47c0      	blx	r8
 8008818:	4307      	orrs	r7, r0
 800881a:	3568      	adds	r5, #104	; 0x68
 800881c:	e7e9      	b.n	80087f2 <_fwalk_reent+0x12>
	...

08008820 <_localeconv_r>:
 8008820:	4800      	ldr	r0, [pc, #0]	; (8008824 <_localeconv_r+0x4>)
 8008822:	4770      	bx	lr
 8008824:	20000190 	.word	0x20000190

08008828 <__retarget_lock_init_recursive>:
 8008828:	4770      	bx	lr

0800882a <__retarget_lock_acquire_recursive>:
 800882a:	4770      	bx	lr

0800882c <__retarget_lock_release_recursive>:
 800882c:	4770      	bx	lr

0800882e <__swhatbuf_r>:
 800882e:	b570      	push	{r4, r5, r6, lr}
 8008830:	460e      	mov	r6, r1
 8008832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008836:	2900      	cmp	r1, #0
 8008838:	b096      	sub	sp, #88	; 0x58
 800883a:	4614      	mov	r4, r2
 800883c:	461d      	mov	r5, r3
 800883e:	da08      	bge.n	8008852 <__swhatbuf_r+0x24>
 8008840:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	602a      	str	r2, [r5, #0]
 8008848:	061a      	lsls	r2, r3, #24
 800884a:	d410      	bmi.n	800886e <__swhatbuf_r+0x40>
 800884c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008850:	e00e      	b.n	8008870 <__swhatbuf_r+0x42>
 8008852:	466a      	mov	r2, sp
 8008854:	f000 feb8 	bl	80095c8 <_fstat_r>
 8008858:	2800      	cmp	r0, #0
 800885a:	dbf1      	blt.n	8008840 <__swhatbuf_r+0x12>
 800885c:	9a01      	ldr	r2, [sp, #4]
 800885e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008862:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008866:	425a      	negs	r2, r3
 8008868:	415a      	adcs	r2, r3
 800886a:	602a      	str	r2, [r5, #0]
 800886c:	e7ee      	b.n	800884c <__swhatbuf_r+0x1e>
 800886e:	2340      	movs	r3, #64	; 0x40
 8008870:	2000      	movs	r0, #0
 8008872:	6023      	str	r3, [r4, #0]
 8008874:	b016      	add	sp, #88	; 0x58
 8008876:	bd70      	pop	{r4, r5, r6, pc}

08008878 <__smakebuf_r>:
 8008878:	898b      	ldrh	r3, [r1, #12]
 800887a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800887c:	079d      	lsls	r5, r3, #30
 800887e:	4606      	mov	r6, r0
 8008880:	460c      	mov	r4, r1
 8008882:	d507      	bpl.n	8008894 <__smakebuf_r+0x1c>
 8008884:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	6123      	str	r3, [r4, #16]
 800888c:	2301      	movs	r3, #1
 800888e:	6163      	str	r3, [r4, #20]
 8008890:	b002      	add	sp, #8
 8008892:	bd70      	pop	{r4, r5, r6, pc}
 8008894:	ab01      	add	r3, sp, #4
 8008896:	466a      	mov	r2, sp
 8008898:	f7ff ffc9 	bl	800882e <__swhatbuf_r>
 800889c:	9900      	ldr	r1, [sp, #0]
 800889e:	4605      	mov	r5, r0
 80088a0:	4630      	mov	r0, r6
 80088a2:	f000 fc45 	bl	8009130 <_malloc_r>
 80088a6:	b948      	cbnz	r0, 80088bc <__smakebuf_r+0x44>
 80088a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ac:	059a      	lsls	r2, r3, #22
 80088ae:	d4ef      	bmi.n	8008890 <__smakebuf_r+0x18>
 80088b0:	f023 0303 	bic.w	r3, r3, #3
 80088b4:	f043 0302 	orr.w	r3, r3, #2
 80088b8:	81a3      	strh	r3, [r4, #12]
 80088ba:	e7e3      	b.n	8008884 <__smakebuf_r+0xc>
 80088bc:	4b0d      	ldr	r3, [pc, #52]	; (80088f4 <__smakebuf_r+0x7c>)
 80088be:	62b3      	str	r3, [r6, #40]	; 0x28
 80088c0:	89a3      	ldrh	r3, [r4, #12]
 80088c2:	6020      	str	r0, [r4, #0]
 80088c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c8:	81a3      	strh	r3, [r4, #12]
 80088ca:	9b00      	ldr	r3, [sp, #0]
 80088cc:	6163      	str	r3, [r4, #20]
 80088ce:	9b01      	ldr	r3, [sp, #4]
 80088d0:	6120      	str	r0, [r4, #16]
 80088d2:	b15b      	cbz	r3, 80088ec <__smakebuf_r+0x74>
 80088d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088d8:	4630      	mov	r0, r6
 80088da:	f000 fe87 	bl	80095ec <_isatty_r>
 80088de:	b128      	cbz	r0, 80088ec <__smakebuf_r+0x74>
 80088e0:	89a3      	ldrh	r3, [r4, #12]
 80088e2:	f023 0303 	bic.w	r3, r3, #3
 80088e6:	f043 0301 	orr.w	r3, r3, #1
 80088ea:	81a3      	strh	r3, [r4, #12]
 80088ec:	89a0      	ldrh	r0, [r4, #12]
 80088ee:	4305      	orrs	r5, r0
 80088f0:	81a5      	strh	r5, [r4, #12]
 80088f2:	e7cd      	b.n	8008890 <__smakebuf_r+0x18>
 80088f4:	08008659 	.word	0x08008659

080088f8 <malloc>:
 80088f8:	4b02      	ldr	r3, [pc, #8]	; (8008904 <malloc+0xc>)
 80088fa:	4601      	mov	r1, r0
 80088fc:	6818      	ldr	r0, [r3, #0]
 80088fe:	f000 bc17 	b.w	8009130 <_malloc_r>
 8008902:	bf00      	nop
 8008904:	2000003c 	.word	0x2000003c

08008908 <memcpy>:
 8008908:	440a      	add	r2, r1
 800890a:	4291      	cmp	r1, r2
 800890c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008910:	d100      	bne.n	8008914 <memcpy+0xc>
 8008912:	4770      	bx	lr
 8008914:	b510      	push	{r4, lr}
 8008916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800891a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800891e:	4291      	cmp	r1, r2
 8008920:	d1f9      	bne.n	8008916 <memcpy+0xe>
 8008922:	bd10      	pop	{r4, pc}

08008924 <_Balloc>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008928:	4604      	mov	r4, r0
 800892a:	460d      	mov	r5, r1
 800892c:	b976      	cbnz	r6, 800894c <_Balloc+0x28>
 800892e:	2010      	movs	r0, #16
 8008930:	f7ff ffe2 	bl	80088f8 <malloc>
 8008934:	4602      	mov	r2, r0
 8008936:	6260      	str	r0, [r4, #36]	; 0x24
 8008938:	b920      	cbnz	r0, 8008944 <_Balloc+0x20>
 800893a:	4b18      	ldr	r3, [pc, #96]	; (800899c <_Balloc+0x78>)
 800893c:	4818      	ldr	r0, [pc, #96]	; (80089a0 <_Balloc+0x7c>)
 800893e:	2166      	movs	r1, #102	; 0x66
 8008940:	f7fe ff0a 	bl	8007758 <__assert_func>
 8008944:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008948:	6006      	str	r6, [r0, #0]
 800894a:	60c6      	str	r6, [r0, #12]
 800894c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800894e:	68f3      	ldr	r3, [r6, #12]
 8008950:	b183      	cbz	r3, 8008974 <_Balloc+0x50>
 8008952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800895a:	b9b8      	cbnz	r0, 800898c <_Balloc+0x68>
 800895c:	2101      	movs	r1, #1
 800895e:	fa01 f605 	lsl.w	r6, r1, r5
 8008962:	1d72      	adds	r2, r6, #5
 8008964:	0092      	lsls	r2, r2, #2
 8008966:	4620      	mov	r0, r4
 8008968:	f000 fb60 	bl	800902c <_calloc_r>
 800896c:	b160      	cbz	r0, 8008988 <_Balloc+0x64>
 800896e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008972:	e00e      	b.n	8008992 <_Balloc+0x6e>
 8008974:	2221      	movs	r2, #33	; 0x21
 8008976:	2104      	movs	r1, #4
 8008978:	4620      	mov	r0, r4
 800897a:	f000 fb57 	bl	800902c <_calloc_r>
 800897e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008980:	60f0      	str	r0, [r6, #12]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e4      	bne.n	8008952 <_Balloc+0x2e>
 8008988:	2000      	movs	r0, #0
 800898a:	bd70      	pop	{r4, r5, r6, pc}
 800898c:	6802      	ldr	r2, [r0, #0]
 800898e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008992:	2300      	movs	r3, #0
 8008994:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008998:	e7f7      	b.n	800898a <_Balloc+0x66>
 800899a:	bf00      	nop
 800899c:	080098d0 	.word	0x080098d0
 80089a0:	08009a58 	.word	0x08009a58

080089a4 <_Bfree>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089a8:	4605      	mov	r5, r0
 80089aa:	460c      	mov	r4, r1
 80089ac:	b976      	cbnz	r6, 80089cc <_Bfree+0x28>
 80089ae:	2010      	movs	r0, #16
 80089b0:	f7ff ffa2 	bl	80088f8 <malloc>
 80089b4:	4602      	mov	r2, r0
 80089b6:	6268      	str	r0, [r5, #36]	; 0x24
 80089b8:	b920      	cbnz	r0, 80089c4 <_Bfree+0x20>
 80089ba:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <_Bfree+0x3c>)
 80089bc:	4809      	ldr	r0, [pc, #36]	; (80089e4 <_Bfree+0x40>)
 80089be:	218a      	movs	r1, #138	; 0x8a
 80089c0:	f7fe feca 	bl	8007758 <__assert_func>
 80089c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089c8:	6006      	str	r6, [r0, #0]
 80089ca:	60c6      	str	r6, [r0, #12]
 80089cc:	b13c      	cbz	r4, 80089de <_Bfree+0x3a>
 80089ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089d0:	6862      	ldr	r2, [r4, #4]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089d8:	6021      	str	r1, [r4, #0]
 80089da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089de:	bd70      	pop	{r4, r5, r6, pc}
 80089e0:	080098d0 	.word	0x080098d0
 80089e4:	08009a58 	.word	0x08009a58

080089e8 <__multadd>:
 80089e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ec:	690d      	ldr	r5, [r1, #16]
 80089ee:	4607      	mov	r7, r0
 80089f0:	460c      	mov	r4, r1
 80089f2:	461e      	mov	r6, r3
 80089f4:	f101 0c14 	add.w	ip, r1, #20
 80089f8:	2000      	movs	r0, #0
 80089fa:	f8dc 3000 	ldr.w	r3, [ip]
 80089fe:	b299      	uxth	r1, r3
 8008a00:	fb02 6101 	mla	r1, r2, r1, r6
 8008a04:	0c1e      	lsrs	r6, r3, #16
 8008a06:	0c0b      	lsrs	r3, r1, #16
 8008a08:	fb02 3306 	mla	r3, r2, r6, r3
 8008a0c:	b289      	uxth	r1, r1
 8008a0e:	3001      	adds	r0, #1
 8008a10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a14:	4285      	cmp	r5, r0
 8008a16:	f84c 1b04 	str.w	r1, [ip], #4
 8008a1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a1e:	dcec      	bgt.n	80089fa <__multadd+0x12>
 8008a20:	b30e      	cbz	r6, 8008a66 <__multadd+0x7e>
 8008a22:	68a3      	ldr	r3, [r4, #8]
 8008a24:	42ab      	cmp	r3, r5
 8008a26:	dc19      	bgt.n	8008a5c <__multadd+0x74>
 8008a28:	6861      	ldr	r1, [r4, #4]
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	3101      	adds	r1, #1
 8008a2e:	f7ff ff79 	bl	8008924 <_Balloc>
 8008a32:	4680      	mov	r8, r0
 8008a34:	b928      	cbnz	r0, 8008a42 <__multadd+0x5a>
 8008a36:	4602      	mov	r2, r0
 8008a38:	4b0c      	ldr	r3, [pc, #48]	; (8008a6c <__multadd+0x84>)
 8008a3a:	480d      	ldr	r0, [pc, #52]	; (8008a70 <__multadd+0x88>)
 8008a3c:	21b5      	movs	r1, #181	; 0xb5
 8008a3e:	f7fe fe8b 	bl	8007758 <__assert_func>
 8008a42:	6922      	ldr	r2, [r4, #16]
 8008a44:	3202      	adds	r2, #2
 8008a46:	f104 010c 	add.w	r1, r4, #12
 8008a4a:	0092      	lsls	r2, r2, #2
 8008a4c:	300c      	adds	r0, #12
 8008a4e:	f7ff ff5b 	bl	8008908 <memcpy>
 8008a52:	4621      	mov	r1, r4
 8008a54:	4638      	mov	r0, r7
 8008a56:	f7ff ffa5 	bl	80089a4 <_Bfree>
 8008a5a:	4644      	mov	r4, r8
 8008a5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a60:	3501      	adds	r5, #1
 8008a62:	615e      	str	r6, [r3, #20]
 8008a64:	6125      	str	r5, [r4, #16]
 8008a66:	4620      	mov	r0, r4
 8008a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a6c:	080099e6 	.word	0x080099e6
 8008a70:	08009a58 	.word	0x08009a58

08008a74 <__hi0bits>:
 8008a74:	0c03      	lsrs	r3, r0, #16
 8008a76:	041b      	lsls	r3, r3, #16
 8008a78:	b9d3      	cbnz	r3, 8008ab0 <__hi0bits+0x3c>
 8008a7a:	0400      	lsls	r0, r0, #16
 8008a7c:	2310      	movs	r3, #16
 8008a7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a82:	bf04      	itt	eq
 8008a84:	0200      	lsleq	r0, r0, #8
 8008a86:	3308      	addeq	r3, #8
 8008a88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a8c:	bf04      	itt	eq
 8008a8e:	0100      	lsleq	r0, r0, #4
 8008a90:	3304      	addeq	r3, #4
 8008a92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a96:	bf04      	itt	eq
 8008a98:	0080      	lsleq	r0, r0, #2
 8008a9a:	3302      	addeq	r3, #2
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	db05      	blt.n	8008aac <__hi0bits+0x38>
 8008aa0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008aa4:	f103 0301 	add.w	r3, r3, #1
 8008aa8:	bf08      	it	eq
 8008aaa:	2320      	moveq	r3, #32
 8008aac:	4618      	mov	r0, r3
 8008aae:	4770      	bx	lr
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e7e4      	b.n	8008a7e <__hi0bits+0xa>

08008ab4 <__lo0bits>:
 8008ab4:	6803      	ldr	r3, [r0, #0]
 8008ab6:	f013 0207 	ands.w	r2, r3, #7
 8008aba:	4601      	mov	r1, r0
 8008abc:	d00b      	beq.n	8008ad6 <__lo0bits+0x22>
 8008abe:	07da      	lsls	r2, r3, #31
 8008ac0:	d423      	bmi.n	8008b0a <__lo0bits+0x56>
 8008ac2:	0798      	lsls	r0, r3, #30
 8008ac4:	bf49      	itett	mi
 8008ac6:	085b      	lsrmi	r3, r3, #1
 8008ac8:	089b      	lsrpl	r3, r3, #2
 8008aca:	2001      	movmi	r0, #1
 8008acc:	600b      	strmi	r3, [r1, #0]
 8008ace:	bf5c      	itt	pl
 8008ad0:	600b      	strpl	r3, [r1, #0]
 8008ad2:	2002      	movpl	r0, #2
 8008ad4:	4770      	bx	lr
 8008ad6:	b298      	uxth	r0, r3
 8008ad8:	b9a8      	cbnz	r0, 8008b06 <__lo0bits+0x52>
 8008ada:	0c1b      	lsrs	r3, r3, #16
 8008adc:	2010      	movs	r0, #16
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	b90a      	cbnz	r2, 8008ae6 <__lo0bits+0x32>
 8008ae2:	3008      	adds	r0, #8
 8008ae4:	0a1b      	lsrs	r3, r3, #8
 8008ae6:	071a      	lsls	r2, r3, #28
 8008ae8:	bf04      	itt	eq
 8008aea:	091b      	lsreq	r3, r3, #4
 8008aec:	3004      	addeq	r0, #4
 8008aee:	079a      	lsls	r2, r3, #30
 8008af0:	bf04      	itt	eq
 8008af2:	089b      	lsreq	r3, r3, #2
 8008af4:	3002      	addeq	r0, #2
 8008af6:	07da      	lsls	r2, r3, #31
 8008af8:	d403      	bmi.n	8008b02 <__lo0bits+0x4e>
 8008afa:	085b      	lsrs	r3, r3, #1
 8008afc:	f100 0001 	add.w	r0, r0, #1
 8008b00:	d005      	beq.n	8008b0e <__lo0bits+0x5a>
 8008b02:	600b      	str	r3, [r1, #0]
 8008b04:	4770      	bx	lr
 8008b06:	4610      	mov	r0, r2
 8008b08:	e7e9      	b.n	8008ade <__lo0bits+0x2a>
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	4770      	bx	lr
 8008b0e:	2020      	movs	r0, #32
 8008b10:	4770      	bx	lr
	...

08008b14 <__i2b>:
 8008b14:	b510      	push	{r4, lr}
 8008b16:	460c      	mov	r4, r1
 8008b18:	2101      	movs	r1, #1
 8008b1a:	f7ff ff03 	bl	8008924 <_Balloc>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	b928      	cbnz	r0, 8008b2e <__i2b+0x1a>
 8008b22:	4b05      	ldr	r3, [pc, #20]	; (8008b38 <__i2b+0x24>)
 8008b24:	4805      	ldr	r0, [pc, #20]	; (8008b3c <__i2b+0x28>)
 8008b26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b2a:	f7fe fe15 	bl	8007758 <__assert_func>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	6144      	str	r4, [r0, #20]
 8008b32:	6103      	str	r3, [r0, #16]
 8008b34:	bd10      	pop	{r4, pc}
 8008b36:	bf00      	nop
 8008b38:	080099e6 	.word	0x080099e6
 8008b3c:	08009a58 	.word	0x08009a58

08008b40 <__multiply>:
 8008b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	4691      	mov	r9, r2
 8008b46:	690a      	ldr	r2, [r1, #16]
 8008b48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	bfb8      	it	lt
 8008b50:	460b      	movlt	r3, r1
 8008b52:	460c      	mov	r4, r1
 8008b54:	bfbc      	itt	lt
 8008b56:	464c      	movlt	r4, r9
 8008b58:	4699      	movlt	r9, r3
 8008b5a:	6927      	ldr	r7, [r4, #16]
 8008b5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b60:	68a3      	ldr	r3, [r4, #8]
 8008b62:	6861      	ldr	r1, [r4, #4]
 8008b64:	eb07 060a 	add.w	r6, r7, sl
 8008b68:	42b3      	cmp	r3, r6
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	bfb8      	it	lt
 8008b6e:	3101      	addlt	r1, #1
 8008b70:	f7ff fed8 	bl	8008924 <_Balloc>
 8008b74:	b930      	cbnz	r0, 8008b84 <__multiply+0x44>
 8008b76:	4602      	mov	r2, r0
 8008b78:	4b44      	ldr	r3, [pc, #272]	; (8008c8c <__multiply+0x14c>)
 8008b7a:	4845      	ldr	r0, [pc, #276]	; (8008c90 <__multiply+0x150>)
 8008b7c:	f240 115d 	movw	r1, #349	; 0x15d
 8008b80:	f7fe fdea 	bl	8007758 <__assert_func>
 8008b84:	f100 0514 	add.w	r5, r0, #20
 8008b88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b8c:	462b      	mov	r3, r5
 8008b8e:	2200      	movs	r2, #0
 8008b90:	4543      	cmp	r3, r8
 8008b92:	d321      	bcc.n	8008bd8 <__multiply+0x98>
 8008b94:	f104 0314 	add.w	r3, r4, #20
 8008b98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b9c:	f109 0314 	add.w	r3, r9, #20
 8008ba0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ba4:	9202      	str	r2, [sp, #8]
 8008ba6:	1b3a      	subs	r2, r7, r4
 8008ba8:	3a15      	subs	r2, #21
 8008baa:	f022 0203 	bic.w	r2, r2, #3
 8008bae:	3204      	adds	r2, #4
 8008bb0:	f104 0115 	add.w	r1, r4, #21
 8008bb4:	428f      	cmp	r7, r1
 8008bb6:	bf38      	it	cc
 8008bb8:	2204      	movcc	r2, #4
 8008bba:	9201      	str	r2, [sp, #4]
 8008bbc:	9a02      	ldr	r2, [sp, #8]
 8008bbe:	9303      	str	r3, [sp, #12]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d80c      	bhi.n	8008bde <__multiply+0x9e>
 8008bc4:	2e00      	cmp	r6, #0
 8008bc6:	dd03      	ble.n	8008bd0 <__multiply+0x90>
 8008bc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d05a      	beq.n	8008c86 <__multiply+0x146>
 8008bd0:	6106      	str	r6, [r0, #16]
 8008bd2:	b005      	add	sp, #20
 8008bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd8:	f843 2b04 	str.w	r2, [r3], #4
 8008bdc:	e7d8      	b.n	8008b90 <__multiply+0x50>
 8008bde:	f8b3 a000 	ldrh.w	sl, [r3]
 8008be2:	f1ba 0f00 	cmp.w	sl, #0
 8008be6:	d024      	beq.n	8008c32 <__multiply+0xf2>
 8008be8:	f104 0e14 	add.w	lr, r4, #20
 8008bec:	46a9      	mov	r9, r5
 8008bee:	f04f 0c00 	mov.w	ip, #0
 8008bf2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008bf6:	f8d9 1000 	ldr.w	r1, [r9]
 8008bfa:	fa1f fb82 	uxth.w	fp, r2
 8008bfe:	b289      	uxth	r1, r1
 8008c00:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c04:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c08:	f8d9 2000 	ldr.w	r2, [r9]
 8008c0c:	4461      	add	r1, ip
 8008c0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c12:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c1a:	b289      	uxth	r1, r1
 8008c1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c20:	4577      	cmp	r7, lr
 8008c22:	f849 1b04 	str.w	r1, [r9], #4
 8008c26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c2a:	d8e2      	bhi.n	8008bf2 <__multiply+0xb2>
 8008c2c:	9a01      	ldr	r2, [sp, #4]
 8008c2e:	f845 c002 	str.w	ip, [r5, r2]
 8008c32:	9a03      	ldr	r2, [sp, #12]
 8008c34:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c38:	3304      	adds	r3, #4
 8008c3a:	f1b9 0f00 	cmp.w	r9, #0
 8008c3e:	d020      	beq.n	8008c82 <__multiply+0x142>
 8008c40:	6829      	ldr	r1, [r5, #0]
 8008c42:	f104 0c14 	add.w	ip, r4, #20
 8008c46:	46ae      	mov	lr, r5
 8008c48:	f04f 0a00 	mov.w	sl, #0
 8008c4c:	f8bc b000 	ldrh.w	fp, [ip]
 8008c50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008c54:	fb09 220b 	mla	r2, r9, fp, r2
 8008c58:	4492      	add	sl, r2
 8008c5a:	b289      	uxth	r1, r1
 8008c5c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008c60:	f84e 1b04 	str.w	r1, [lr], #4
 8008c64:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c68:	f8be 1000 	ldrh.w	r1, [lr]
 8008c6c:	0c12      	lsrs	r2, r2, #16
 8008c6e:	fb09 1102 	mla	r1, r9, r2, r1
 8008c72:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008c76:	4567      	cmp	r7, ip
 8008c78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c7c:	d8e6      	bhi.n	8008c4c <__multiply+0x10c>
 8008c7e:	9a01      	ldr	r2, [sp, #4]
 8008c80:	50a9      	str	r1, [r5, r2]
 8008c82:	3504      	adds	r5, #4
 8008c84:	e79a      	b.n	8008bbc <__multiply+0x7c>
 8008c86:	3e01      	subs	r6, #1
 8008c88:	e79c      	b.n	8008bc4 <__multiply+0x84>
 8008c8a:	bf00      	nop
 8008c8c:	080099e6 	.word	0x080099e6
 8008c90:	08009a58 	.word	0x08009a58

08008c94 <__pow5mult>:
 8008c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c98:	4615      	mov	r5, r2
 8008c9a:	f012 0203 	ands.w	r2, r2, #3
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	460f      	mov	r7, r1
 8008ca2:	d007      	beq.n	8008cb4 <__pow5mult+0x20>
 8008ca4:	4c25      	ldr	r4, [pc, #148]	; (8008d3c <__pow5mult+0xa8>)
 8008ca6:	3a01      	subs	r2, #1
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cae:	f7ff fe9b 	bl	80089e8 <__multadd>
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	10ad      	asrs	r5, r5, #2
 8008cb6:	d03d      	beq.n	8008d34 <__pow5mult+0xa0>
 8008cb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008cba:	b97c      	cbnz	r4, 8008cdc <__pow5mult+0x48>
 8008cbc:	2010      	movs	r0, #16
 8008cbe:	f7ff fe1b 	bl	80088f8 <malloc>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	6270      	str	r0, [r6, #36]	; 0x24
 8008cc6:	b928      	cbnz	r0, 8008cd4 <__pow5mult+0x40>
 8008cc8:	4b1d      	ldr	r3, [pc, #116]	; (8008d40 <__pow5mult+0xac>)
 8008cca:	481e      	ldr	r0, [pc, #120]	; (8008d44 <__pow5mult+0xb0>)
 8008ccc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008cd0:	f7fe fd42 	bl	8007758 <__assert_func>
 8008cd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cd8:	6004      	str	r4, [r0, #0]
 8008cda:	60c4      	str	r4, [r0, #12]
 8008cdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ce0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ce4:	b94c      	cbnz	r4, 8008cfa <__pow5mult+0x66>
 8008ce6:	f240 2171 	movw	r1, #625	; 0x271
 8008cea:	4630      	mov	r0, r6
 8008cec:	f7ff ff12 	bl	8008b14 <__i2b>
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	6003      	str	r3, [r0, #0]
 8008cfa:	f04f 0900 	mov.w	r9, #0
 8008cfe:	07eb      	lsls	r3, r5, #31
 8008d00:	d50a      	bpl.n	8008d18 <__pow5mult+0x84>
 8008d02:	4639      	mov	r1, r7
 8008d04:	4622      	mov	r2, r4
 8008d06:	4630      	mov	r0, r6
 8008d08:	f7ff ff1a 	bl	8008b40 <__multiply>
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	4680      	mov	r8, r0
 8008d10:	4630      	mov	r0, r6
 8008d12:	f7ff fe47 	bl	80089a4 <_Bfree>
 8008d16:	4647      	mov	r7, r8
 8008d18:	106d      	asrs	r5, r5, #1
 8008d1a:	d00b      	beq.n	8008d34 <__pow5mult+0xa0>
 8008d1c:	6820      	ldr	r0, [r4, #0]
 8008d1e:	b938      	cbnz	r0, 8008d30 <__pow5mult+0x9c>
 8008d20:	4622      	mov	r2, r4
 8008d22:	4621      	mov	r1, r4
 8008d24:	4630      	mov	r0, r6
 8008d26:	f7ff ff0b 	bl	8008b40 <__multiply>
 8008d2a:	6020      	str	r0, [r4, #0]
 8008d2c:	f8c0 9000 	str.w	r9, [r0]
 8008d30:	4604      	mov	r4, r0
 8008d32:	e7e4      	b.n	8008cfe <__pow5mult+0x6a>
 8008d34:	4638      	mov	r0, r7
 8008d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d3a:	bf00      	nop
 8008d3c:	08009ba8 	.word	0x08009ba8
 8008d40:	080098d0 	.word	0x080098d0
 8008d44:	08009a58 	.word	0x08009a58

08008d48 <__lshift>:
 8008d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	6849      	ldr	r1, [r1, #4]
 8008d50:	6923      	ldr	r3, [r4, #16]
 8008d52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d56:	68a3      	ldr	r3, [r4, #8]
 8008d58:	4607      	mov	r7, r0
 8008d5a:	4691      	mov	r9, r2
 8008d5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d60:	f108 0601 	add.w	r6, r8, #1
 8008d64:	42b3      	cmp	r3, r6
 8008d66:	db0b      	blt.n	8008d80 <__lshift+0x38>
 8008d68:	4638      	mov	r0, r7
 8008d6a:	f7ff fddb 	bl	8008924 <_Balloc>
 8008d6e:	4605      	mov	r5, r0
 8008d70:	b948      	cbnz	r0, 8008d86 <__lshift+0x3e>
 8008d72:	4602      	mov	r2, r0
 8008d74:	4b2a      	ldr	r3, [pc, #168]	; (8008e20 <__lshift+0xd8>)
 8008d76:	482b      	ldr	r0, [pc, #172]	; (8008e24 <__lshift+0xdc>)
 8008d78:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d7c:	f7fe fcec 	bl	8007758 <__assert_func>
 8008d80:	3101      	adds	r1, #1
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	e7ee      	b.n	8008d64 <__lshift+0x1c>
 8008d86:	2300      	movs	r3, #0
 8008d88:	f100 0114 	add.w	r1, r0, #20
 8008d8c:	f100 0210 	add.w	r2, r0, #16
 8008d90:	4618      	mov	r0, r3
 8008d92:	4553      	cmp	r3, sl
 8008d94:	db37      	blt.n	8008e06 <__lshift+0xbe>
 8008d96:	6920      	ldr	r0, [r4, #16]
 8008d98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d9c:	f104 0314 	add.w	r3, r4, #20
 8008da0:	f019 091f 	ands.w	r9, r9, #31
 8008da4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008da8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008dac:	d02f      	beq.n	8008e0e <__lshift+0xc6>
 8008dae:	f1c9 0e20 	rsb	lr, r9, #32
 8008db2:	468a      	mov	sl, r1
 8008db4:	f04f 0c00 	mov.w	ip, #0
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	fa02 f209 	lsl.w	r2, r2, r9
 8008dbe:	ea42 020c 	orr.w	r2, r2, ip
 8008dc2:	f84a 2b04 	str.w	r2, [sl], #4
 8008dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dca:	4298      	cmp	r0, r3
 8008dcc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008dd0:	d8f2      	bhi.n	8008db8 <__lshift+0x70>
 8008dd2:	1b03      	subs	r3, r0, r4
 8008dd4:	3b15      	subs	r3, #21
 8008dd6:	f023 0303 	bic.w	r3, r3, #3
 8008dda:	3304      	adds	r3, #4
 8008ddc:	f104 0215 	add.w	r2, r4, #21
 8008de0:	4290      	cmp	r0, r2
 8008de2:	bf38      	it	cc
 8008de4:	2304      	movcc	r3, #4
 8008de6:	f841 c003 	str.w	ip, [r1, r3]
 8008dea:	f1bc 0f00 	cmp.w	ip, #0
 8008dee:	d001      	beq.n	8008df4 <__lshift+0xac>
 8008df0:	f108 0602 	add.w	r6, r8, #2
 8008df4:	3e01      	subs	r6, #1
 8008df6:	4638      	mov	r0, r7
 8008df8:	612e      	str	r6, [r5, #16]
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	f7ff fdd2 	bl	80089a4 <_Bfree>
 8008e00:	4628      	mov	r0, r5
 8008e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e06:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	e7c1      	b.n	8008d92 <__lshift+0x4a>
 8008e0e:	3904      	subs	r1, #4
 8008e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e14:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e18:	4298      	cmp	r0, r3
 8008e1a:	d8f9      	bhi.n	8008e10 <__lshift+0xc8>
 8008e1c:	e7ea      	b.n	8008df4 <__lshift+0xac>
 8008e1e:	bf00      	nop
 8008e20:	080099e6 	.word	0x080099e6
 8008e24:	08009a58 	.word	0x08009a58

08008e28 <__mcmp>:
 8008e28:	b530      	push	{r4, r5, lr}
 8008e2a:	6902      	ldr	r2, [r0, #16]
 8008e2c:	690c      	ldr	r4, [r1, #16]
 8008e2e:	1b12      	subs	r2, r2, r4
 8008e30:	d10e      	bne.n	8008e50 <__mcmp+0x28>
 8008e32:	f100 0314 	add.w	r3, r0, #20
 8008e36:	3114      	adds	r1, #20
 8008e38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e48:	42a5      	cmp	r5, r4
 8008e4a:	d003      	beq.n	8008e54 <__mcmp+0x2c>
 8008e4c:	d305      	bcc.n	8008e5a <__mcmp+0x32>
 8008e4e:	2201      	movs	r2, #1
 8008e50:	4610      	mov	r0, r2
 8008e52:	bd30      	pop	{r4, r5, pc}
 8008e54:	4283      	cmp	r3, r0
 8008e56:	d3f3      	bcc.n	8008e40 <__mcmp+0x18>
 8008e58:	e7fa      	b.n	8008e50 <__mcmp+0x28>
 8008e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e5e:	e7f7      	b.n	8008e50 <__mcmp+0x28>

08008e60 <__mdiff>:
 8008e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	460c      	mov	r4, r1
 8008e66:	4606      	mov	r6, r0
 8008e68:	4611      	mov	r1, r2
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	4690      	mov	r8, r2
 8008e6e:	f7ff ffdb 	bl	8008e28 <__mcmp>
 8008e72:	1e05      	subs	r5, r0, #0
 8008e74:	d110      	bne.n	8008e98 <__mdiff+0x38>
 8008e76:	4629      	mov	r1, r5
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f7ff fd53 	bl	8008924 <_Balloc>
 8008e7e:	b930      	cbnz	r0, 8008e8e <__mdiff+0x2e>
 8008e80:	4b3a      	ldr	r3, [pc, #232]	; (8008f6c <__mdiff+0x10c>)
 8008e82:	4602      	mov	r2, r0
 8008e84:	f240 2132 	movw	r1, #562	; 0x232
 8008e88:	4839      	ldr	r0, [pc, #228]	; (8008f70 <__mdiff+0x110>)
 8008e8a:	f7fe fc65 	bl	8007758 <__assert_func>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e98:	bfa4      	itt	ge
 8008e9a:	4643      	movge	r3, r8
 8008e9c:	46a0      	movge	r8, r4
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ea4:	bfa6      	itte	ge
 8008ea6:	461c      	movge	r4, r3
 8008ea8:	2500      	movge	r5, #0
 8008eaa:	2501      	movlt	r5, #1
 8008eac:	f7ff fd3a 	bl	8008924 <_Balloc>
 8008eb0:	b920      	cbnz	r0, 8008ebc <__mdiff+0x5c>
 8008eb2:	4b2e      	ldr	r3, [pc, #184]	; (8008f6c <__mdiff+0x10c>)
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008eba:	e7e5      	b.n	8008e88 <__mdiff+0x28>
 8008ebc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ec0:	6926      	ldr	r6, [r4, #16]
 8008ec2:	60c5      	str	r5, [r0, #12]
 8008ec4:	f104 0914 	add.w	r9, r4, #20
 8008ec8:	f108 0514 	add.w	r5, r8, #20
 8008ecc:	f100 0e14 	add.w	lr, r0, #20
 8008ed0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ed4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ed8:	f108 0210 	add.w	r2, r8, #16
 8008edc:	46f2      	mov	sl, lr
 8008ede:	2100      	movs	r1, #0
 8008ee0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ee4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ee8:	fa1f f883 	uxth.w	r8, r3
 8008eec:	fa11 f18b 	uxtah	r1, r1, fp
 8008ef0:	0c1b      	lsrs	r3, r3, #16
 8008ef2:	eba1 0808 	sub.w	r8, r1, r8
 8008ef6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008efa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008efe:	fa1f f888 	uxth.w	r8, r8
 8008f02:	1419      	asrs	r1, r3, #16
 8008f04:	454e      	cmp	r6, r9
 8008f06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f0a:	f84a 3b04 	str.w	r3, [sl], #4
 8008f0e:	d8e7      	bhi.n	8008ee0 <__mdiff+0x80>
 8008f10:	1b33      	subs	r3, r6, r4
 8008f12:	3b15      	subs	r3, #21
 8008f14:	f023 0303 	bic.w	r3, r3, #3
 8008f18:	3304      	adds	r3, #4
 8008f1a:	3415      	adds	r4, #21
 8008f1c:	42a6      	cmp	r6, r4
 8008f1e:	bf38      	it	cc
 8008f20:	2304      	movcc	r3, #4
 8008f22:	441d      	add	r5, r3
 8008f24:	4473      	add	r3, lr
 8008f26:	469e      	mov	lr, r3
 8008f28:	462e      	mov	r6, r5
 8008f2a:	4566      	cmp	r6, ip
 8008f2c:	d30e      	bcc.n	8008f4c <__mdiff+0xec>
 8008f2e:	f10c 0203 	add.w	r2, ip, #3
 8008f32:	1b52      	subs	r2, r2, r5
 8008f34:	f022 0203 	bic.w	r2, r2, #3
 8008f38:	3d03      	subs	r5, #3
 8008f3a:	45ac      	cmp	ip, r5
 8008f3c:	bf38      	it	cc
 8008f3e:	2200      	movcc	r2, #0
 8008f40:	441a      	add	r2, r3
 8008f42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f46:	b17b      	cbz	r3, 8008f68 <__mdiff+0x108>
 8008f48:	6107      	str	r7, [r0, #16]
 8008f4a:	e7a3      	b.n	8008e94 <__mdiff+0x34>
 8008f4c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f50:	fa11 f288 	uxtah	r2, r1, r8
 8008f54:	1414      	asrs	r4, r2, #16
 8008f56:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008f5a:	b292      	uxth	r2, r2
 8008f5c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f60:	f84e 2b04 	str.w	r2, [lr], #4
 8008f64:	1421      	asrs	r1, r4, #16
 8008f66:	e7e0      	b.n	8008f2a <__mdiff+0xca>
 8008f68:	3f01      	subs	r7, #1
 8008f6a:	e7ea      	b.n	8008f42 <__mdiff+0xe2>
 8008f6c:	080099e6 	.word	0x080099e6
 8008f70:	08009a58 	.word	0x08009a58

08008f74 <__d2b>:
 8008f74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f78:	4689      	mov	r9, r1
 8008f7a:	2101      	movs	r1, #1
 8008f7c:	ec57 6b10 	vmov	r6, r7, d0
 8008f80:	4690      	mov	r8, r2
 8008f82:	f7ff fccf 	bl	8008924 <_Balloc>
 8008f86:	4604      	mov	r4, r0
 8008f88:	b930      	cbnz	r0, 8008f98 <__d2b+0x24>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	4b25      	ldr	r3, [pc, #148]	; (8009024 <__d2b+0xb0>)
 8008f8e:	4826      	ldr	r0, [pc, #152]	; (8009028 <__d2b+0xb4>)
 8008f90:	f240 310a 	movw	r1, #778	; 0x30a
 8008f94:	f7fe fbe0 	bl	8007758 <__assert_func>
 8008f98:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fa0:	bb35      	cbnz	r5, 8008ff0 <__d2b+0x7c>
 8008fa2:	2e00      	cmp	r6, #0
 8008fa4:	9301      	str	r3, [sp, #4]
 8008fa6:	d028      	beq.n	8008ffa <__d2b+0x86>
 8008fa8:	4668      	mov	r0, sp
 8008faa:	9600      	str	r6, [sp, #0]
 8008fac:	f7ff fd82 	bl	8008ab4 <__lo0bits>
 8008fb0:	9900      	ldr	r1, [sp, #0]
 8008fb2:	b300      	cbz	r0, 8008ff6 <__d2b+0x82>
 8008fb4:	9a01      	ldr	r2, [sp, #4]
 8008fb6:	f1c0 0320 	rsb	r3, r0, #32
 8008fba:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbe:	430b      	orrs	r3, r1
 8008fc0:	40c2      	lsrs	r2, r0
 8008fc2:	6163      	str	r3, [r4, #20]
 8008fc4:	9201      	str	r2, [sp, #4]
 8008fc6:	9b01      	ldr	r3, [sp, #4]
 8008fc8:	61a3      	str	r3, [r4, #24]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	bf14      	ite	ne
 8008fce:	2202      	movne	r2, #2
 8008fd0:	2201      	moveq	r2, #1
 8008fd2:	6122      	str	r2, [r4, #16]
 8008fd4:	b1d5      	cbz	r5, 800900c <__d2b+0x98>
 8008fd6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008fda:	4405      	add	r5, r0
 8008fdc:	f8c9 5000 	str.w	r5, [r9]
 8008fe0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008fe4:	f8c8 0000 	str.w	r0, [r8]
 8008fe8:	4620      	mov	r0, r4
 8008fea:	b003      	add	sp, #12
 8008fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ff4:	e7d5      	b.n	8008fa2 <__d2b+0x2e>
 8008ff6:	6161      	str	r1, [r4, #20]
 8008ff8:	e7e5      	b.n	8008fc6 <__d2b+0x52>
 8008ffa:	a801      	add	r0, sp, #4
 8008ffc:	f7ff fd5a 	bl	8008ab4 <__lo0bits>
 8009000:	9b01      	ldr	r3, [sp, #4]
 8009002:	6163      	str	r3, [r4, #20]
 8009004:	2201      	movs	r2, #1
 8009006:	6122      	str	r2, [r4, #16]
 8009008:	3020      	adds	r0, #32
 800900a:	e7e3      	b.n	8008fd4 <__d2b+0x60>
 800900c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009010:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009014:	f8c9 0000 	str.w	r0, [r9]
 8009018:	6918      	ldr	r0, [r3, #16]
 800901a:	f7ff fd2b 	bl	8008a74 <__hi0bits>
 800901e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009022:	e7df      	b.n	8008fe4 <__d2b+0x70>
 8009024:	080099e6 	.word	0x080099e6
 8009028:	08009a58 	.word	0x08009a58

0800902c <_calloc_r>:
 800902c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800902e:	fba1 2402 	umull	r2, r4, r1, r2
 8009032:	b94c      	cbnz	r4, 8009048 <_calloc_r+0x1c>
 8009034:	4611      	mov	r1, r2
 8009036:	9201      	str	r2, [sp, #4]
 8009038:	f000 f87a 	bl	8009130 <_malloc_r>
 800903c:	9a01      	ldr	r2, [sp, #4]
 800903e:	4605      	mov	r5, r0
 8009040:	b930      	cbnz	r0, 8009050 <_calloc_r+0x24>
 8009042:	4628      	mov	r0, r5
 8009044:	b003      	add	sp, #12
 8009046:	bd30      	pop	{r4, r5, pc}
 8009048:	220c      	movs	r2, #12
 800904a:	6002      	str	r2, [r0, #0]
 800904c:	2500      	movs	r5, #0
 800904e:	e7f8      	b.n	8009042 <_calloc_r+0x16>
 8009050:	4621      	mov	r1, r4
 8009052:	f7fd fd9b 	bl	8006b8c <memset>
 8009056:	e7f4      	b.n	8009042 <_calloc_r+0x16>

08009058 <_free_r>:
 8009058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800905a:	2900      	cmp	r1, #0
 800905c:	d044      	beq.n	80090e8 <_free_r+0x90>
 800905e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009062:	9001      	str	r0, [sp, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	f1a1 0404 	sub.w	r4, r1, #4
 800906a:	bfb8      	it	lt
 800906c:	18e4      	addlt	r4, r4, r3
 800906e:	f000 faf1 	bl	8009654 <__malloc_lock>
 8009072:	4a1e      	ldr	r2, [pc, #120]	; (80090ec <_free_r+0x94>)
 8009074:	9801      	ldr	r0, [sp, #4]
 8009076:	6813      	ldr	r3, [r2, #0]
 8009078:	b933      	cbnz	r3, 8009088 <_free_r+0x30>
 800907a:	6063      	str	r3, [r4, #4]
 800907c:	6014      	str	r4, [r2, #0]
 800907e:	b003      	add	sp, #12
 8009080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009084:	f000 baec 	b.w	8009660 <__malloc_unlock>
 8009088:	42a3      	cmp	r3, r4
 800908a:	d908      	bls.n	800909e <_free_r+0x46>
 800908c:	6825      	ldr	r5, [r4, #0]
 800908e:	1961      	adds	r1, r4, r5
 8009090:	428b      	cmp	r3, r1
 8009092:	bf01      	itttt	eq
 8009094:	6819      	ldreq	r1, [r3, #0]
 8009096:	685b      	ldreq	r3, [r3, #4]
 8009098:	1949      	addeq	r1, r1, r5
 800909a:	6021      	streq	r1, [r4, #0]
 800909c:	e7ed      	b.n	800907a <_free_r+0x22>
 800909e:	461a      	mov	r2, r3
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	b10b      	cbz	r3, 80090a8 <_free_r+0x50>
 80090a4:	42a3      	cmp	r3, r4
 80090a6:	d9fa      	bls.n	800909e <_free_r+0x46>
 80090a8:	6811      	ldr	r1, [r2, #0]
 80090aa:	1855      	adds	r5, r2, r1
 80090ac:	42a5      	cmp	r5, r4
 80090ae:	d10b      	bne.n	80090c8 <_free_r+0x70>
 80090b0:	6824      	ldr	r4, [r4, #0]
 80090b2:	4421      	add	r1, r4
 80090b4:	1854      	adds	r4, r2, r1
 80090b6:	42a3      	cmp	r3, r4
 80090b8:	6011      	str	r1, [r2, #0]
 80090ba:	d1e0      	bne.n	800907e <_free_r+0x26>
 80090bc:	681c      	ldr	r4, [r3, #0]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	6053      	str	r3, [r2, #4]
 80090c2:	4421      	add	r1, r4
 80090c4:	6011      	str	r1, [r2, #0]
 80090c6:	e7da      	b.n	800907e <_free_r+0x26>
 80090c8:	d902      	bls.n	80090d0 <_free_r+0x78>
 80090ca:	230c      	movs	r3, #12
 80090cc:	6003      	str	r3, [r0, #0]
 80090ce:	e7d6      	b.n	800907e <_free_r+0x26>
 80090d0:	6825      	ldr	r5, [r4, #0]
 80090d2:	1961      	adds	r1, r4, r5
 80090d4:	428b      	cmp	r3, r1
 80090d6:	bf04      	itt	eq
 80090d8:	6819      	ldreq	r1, [r3, #0]
 80090da:	685b      	ldreq	r3, [r3, #4]
 80090dc:	6063      	str	r3, [r4, #4]
 80090de:	bf04      	itt	eq
 80090e0:	1949      	addeq	r1, r1, r5
 80090e2:	6021      	streq	r1, [r4, #0]
 80090e4:	6054      	str	r4, [r2, #4]
 80090e6:	e7ca      	b.n	800907e <_free_r+0x26>
 80090e8:	b003      	add	sp, #12
 80090ea:	bd30      	pop	{r4, r5, pc}
 80090ec:	20000550 	.word	0x20000550

080090f0 <sbrk_aligned>:
 80090f0:	b570      	push	{r4, r5, r6, lr}
 80090f2:	4e0e      	ldr	r6, [pc, #56]	; (800912c <sbrk_aligned+0x3c>)
 80090f4:	460c      	mov	r4, r1
 80090f6:	6831      	ldr	r1, [r6, #0]
 80090f8:	4605      	mov	r5, r0
 80090fa:	b911      	cbnz	r1, 8009102 <sbrk_aligned+0x12>
 80090fc:	f000 f9e6 	bl	80094cc <_sbrk_r>
 8009100:	6030      	str	r0, [r6, #0]
 8009102:	4621      	mov	r1, r4
 8009104:	4628      	mov	r0, r5
 8009106:	f000 f9e1 	bl	80094cc <_sbrk_r>
 800910a:	1c43      	adds	r3, r0, #1
 800910c:	d00a      	beq.n	8009124 <sbrk_aligned+0x34>
 800910e:	1cc4      	adds	r4, r0, #3
 8009110:	f024 0403 	bic.w	r4, r4, #3
 8009114:	42a0      	cmp	r0, r4
 8009116:	d007      	beq.n	8009128 <sbrk_aligned+0x38>
 8009118:	1a21      	subs	r1, r4, r0
 800911a:	4628      	mov	r0, r5
 800911c:	f000 f9d6 	bl	80094cc <_sbrk_r>
 8009120:	3001      	adds	r0, #1
 8009122:	d101      	bne.n	8009128 <sbrk_aligned+0x38>
 8009124:	f04f 34ff 	mov.w	r4, #4294967295
 8009128:	4620      	mov	r0, r4
 800912a:	bd70      	pop	{r4, r5, r6, pc}
 800912c:	20000554 	.word	0x20000554

08009130 <_malloc_r>:
 8009130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009134:	1ccd      	adds	r5, r1, #3
 8009136:	f025 0503 	bic.w	r5, r5, #3
 800913a:	3508      	adds	r5, #8
 800913c:	2d0c      	cmp	r5, #12
 800913e:	bf38      	it	cc
 8009140:	250c      	movcc	r5, #12
 8009142:	2d00      	cmp	r5, #0
 8009144:	4607      	mov	r7, r0
 8009146:	db01      	blt.n	800914c <_malloc_r+0x1c>
 8009148:	42a9      	cmp	r1, r5
 800914a:	d905      	bls.n	8009158 <_malloc_r+0x28>
 800914c:	230c      	movs	r3, #12
 800914e:	603b      	str	r3, [r7, #0]
 8009150:	2600      	movs	r6, #0
 8009152:	4630      	mov	r0, r6
 8009154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009158:	4e2e      	ldr	r6, [pc, #184]	; (8009214 <_malloc_r+0xe4>)
 800915a:	f000 fa7b 	bl	8009654 <__malloc_lock>
 800915e:	6833      	ldr	r3, [r6, #0]
 8009160:	461c      	mov	r4, r3
 8009162:	bb34      	cbnz	r4, 80091b2 <_malloc_r+0x82>
 8009164:	4629      	mov	r1, r5
 8009166:	4638      	mov	r0, r7
 8009168:	f7ff ffc2 	bl	80090f0 <sbrk_aligned>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	4604      	mov	r4, r0
 8009170:	d14d      	bne.n	800920e <_malloc_r+0xde>
 8009172:	6834      	ldr	r4, [r6, #0]
 8009174:	4626      	mov	r6, r4
 8009176:	2e00      	cmp	r6, #0
 8009178:	d140      	bne.n	80091fc <_malloc_r+0xcc>
 800917a:	6823      	ldr	r3, [r4, #0]
 800917c:	4631      	mov	r1, r6
 800917e:	4638      	mov	r0, r7
 8009180:	eb04 0803 	add.w	r8, r4, r3
 8009184:	f000 f9a2 	bl	80094cc <_sbrk_r>
 8009188:	4580      	cmp	r8, r0
 800918a:	d13a      	bne.n	8009202 <_malloc_r+0xd2>
 800918c:	6821      	ldr	r1, [r4, #0]
 800918e:	3503      	adds	r5, #3
 8009190:	1a6d      	subs	r5, r5, r1
 8009192:	f025 0503 	bic.w	r5, r5, #3
 8009196:	3508      	adds	r5, #8
 8009198:	2d0c      	cmp	r5, #12
 800919a:	bf38      	it	cc
 800919c:	250c      	movcc	r5, #12
 800919e:	4629      	mov	r1, r5
 80091a0:	4638      	mov	r0, r7
 80091a2:	f7ff ffa5 	bl	80090f0 <sbrk_aligned>
 80091a6:	3001      	adds	r0, #1
 80091a8:	d02b      	beq.n	8009202 <_malloc_r+0xd2>
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	442b      	add	r3, r5
 80091ae:	6023      	str	r3, [r4, #0]
 80091b0:	e00e      	b.n	80091d0 <_malloc_r+0xa0>
 80091b2:	6822      	ldr	r2, [r4, #0]
 80091b4:	1b52      	subs	r2, r2, r5
 80091b6:	d41e      	bmi.n	80091f6 <_malloc_r+0xc6>
 80091b8:	2a0b      	cmp	r2, #11
 80091ba:	d916      	bls.n	80091ea <_malloc_r+0xba>
 80091bc:	1961      	adds	r1, r4, r5
 80091be:	42a3      	cmp	r3, r4
 80091c0:	6025      	str	r5, [r4, #0]
 80091c2:	bf18      	it	ne
 80091c4:	6059      	strne	r1, [r3, #4]
 80091c6:	6863      	ldr	r3, [r4, #4]
 80091c8:	bf08      	it	eq
 80091ca:	6031      	streq	r1, [r6, #0]
 80091cc:	5162      	str	r2, [r4, r5]
 80091ce:	604b      	str	r3, [r1, #4]
 80091d0:	4638      	mov	r0, r7
 80091d2:	f104 060b 	add.w	r6, r4, #11
 80091d6:	f000 fa43 	bl	8009660 <__malloc_unlock>
 80091da:	f026 0607 	bic.w	r6, r6, #7
 80091de:	1d23      	adds	r3, r4, #4
 80091e0:	1af2      	subs	r2, r6, r3
 80091e2:	d0b6      	beq.n	8009152 <_malloc_r+0x22>
 80091e4:	1b9b      	subs	r3, r3, r6
 80091e6:	50a3      	str	r3, [r4, r2]
 80091e8:	e7b3      	b.n	8009152 <_malloc_r+0x22>
 80091ea:	6862      	ldr	r2, [r4, #4]
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	bf0c      	ite	eq
 80091f0:	6032      	streq	r2, [r6, #0]
 80091f2:	605a      	strne	r2, [r3, #4]
 80091f4:	e7ec      	b.n	80091d0 <_malloc_r+0xa0>
 80091f6:	4623      	mov	r3, r4
 80091f8:	6864      	ldr	r4, [r4, #4]
 80091fa:	e7b2      	b.n	8009162 <_malloc_r+0x32>
 80091fc:	4634      	mov	r4, r6
 80091fe:	6876      	ldr	r6, [r6, #4]
 8009200:	e7b9      	b.n	8009176 <_malloc_r+0x46>
 8009202:	230c      	movs	r3, #12
 8009204:	603b      	str	r3, [r7, #0]
 8009206:	4638      	mov	r0, r7
 8009208:	f000 fa2a 	bl	8009660 <__malloc_unlock>
 800920c:	e7a1      	b.n	8009152 <_malloc_r+0x22>
 800920e:	6025      	str	r5, [r4, #0]
 8009210:	e7de      	b.n	80091d0 <_malloc_r+0xa0>
 8009212:	bf00      	nop
 8009214:	20000550 	.word	0x20000550

08009218 <__sfputc_r>:
 8009218:	6893      	ldr	r3, [r2, #8]
 800921a:	3b01      	subs	r3, #1
 800921c:	2b00      	cmp	r3, #0
 800921e:	b410      	push	{r4}
 8009220:	6093      	str	r3, [r2, #8]
 8009222:	da08      	bge.n	8009236 <__sfputc_r+0x1e>
 8009224:	6994      	ldr	r4, [r2, #24]
 8009226:	42a3      	cmp	r3, r4
 8009228:	db01      	blt.n	800922e <__sfputc_r+0x16>
 800922a:	290a      	cmp	r1, #10
 800922c:	d103      	bne.n	8009236 <__sfputc_r+0x1e>
 800922e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009232:	f7fe b9d1 	b.w	80075d8 <__swbuf_r>
 8009236:	6813      	ldr	r3, [r2, #0]
 8009238:	1c58      	adds	r0, r3, #1
 800923a:	6010      	str	r0, [r2, #0]
 800923c:	7019      	strb	r1, [r3, #0]
 800923e:	4608      	mov	r0, r1
 8009240:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009244:	4770      	bx	lr

08009246 <__sfputs_r>:
 8009246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009248:	4606      	mov	r6, r0
 800924a:	460f      	mov	r7, r1
 800924c:	4614      	mov	r4, r2
 800924e:	18d5      	adds	r5, r2, r3
 8009250:	42ac      	cmp	r4, r5
 8009252:	d101      	bne.n	8009258 <__sfputs_r+0x12>
 8009254:	2000      	movs	r0, #0
 8009256:	e007      	b.n	8009268 <__sfputs_r+0x22>
 8009258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800925c:	463a      	mov	r2, r7
 800925e:	4630      	mov	r0, r6
 8009260:	f7ff ffda 	bl	8009218 <__sfputc_r>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	d1f3      	bne.n	8009250 <__sfputs_r+0xa>
 8009268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800926c <_vfiprintf_r>:
 800926c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009270:	460d      	mov	r5, r1
 8009272:	b09d      	sub	sp, #116	; 0x74
 8009274:	4614      	mov	r4, r2
 8009276:	4698      	mov	r8, r3
 8009278:	4606      	mov	r6, r0
 800927a:	b118      	cbz	r0, 8009284 <_vfiprintf_r+0x18>
 800927c:	6983      	ldr	r3, [r0, #24]
 800927e:	b90b      	cbnz	r3, 8009284 <_vfiprintf_r+0x18>
 8009280:	f7ff fa1e 	bl	80086c0 <__sinit>
 8009284:	4b89      	ldr	r3, [pc, #548]	; (80094ac <_vfiprintf_r+0x240>)
 8009286:	429d      	cmp	r5, r3
 8009288:	d11b      	bne.n	80092c2 <_vfiprintf_r+0x56>
 800928a:	6875      	ldr	r5, [r6, #4]
 800928c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800928e:	07d9      	lsls	r1, r3, #31
 8009290:	d405      	bmi.n	800929e <_vfiprintf_r+0x32>
 8009292:	89ab      	ldrh	r3, [r5, #12]
 8009294:	059a      	lsls	r2, r3, #22
 8009296:	d402      	bmi.n	800929e <_vfiprintf_r+0x32>
 8009298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800929a:	f7ff fac6 	bl	800882a <__retarget_lock_acquire_recursive>
 800929e:	89ab      	ldrh	r3, [r5, #12]
 80092a0:	071b      	lsls	r3, r3, #28
 80092a2:	d501      	bpl.n	80092a8 <_vfiprintf_r+0x3c>
 80092a4:	692b      	ldr	r3, [r5, #16]
 80092a6:	b9eb      	cbnz	r3, 80092e4 <_vfiprintf_r+0x78>
 80092a8:	4629      	mov	r1, r5
 80092aa:	4630      	mov	r0, r6
 80092ac:	f7fe f9e6 	bl	800767c <__swsetup_r>
 80092b0:	b1c0      	cbz	r0, 80092e4 <_vfiprintf_r+0x78>
 80092b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092b4:	07dc      	lsls	r4, r3, #31
 80092b6:	d50e      	bpl.n	80092d6 <_vfiprintf_r+0x6a>
 80092b8:	f04f 30ff 	mov.w	r0, #4294967295
 80092bc:	b01d      	add	sp, #116	; 0x74
 80092be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c2:	4b7b      	ldr	r3, [pc, #492]	; (80094b0 <_vfiprintf_r+0x244>)
 80092c4:	429d      	cmp	r5, r3
 80092c6:	d101      	bne.n	80092cc <_vfiprintf_r+0x60>
 80092c8:	68b5      	ldr	r5, [r6, #8]
 80092ca:	e7df      	b.n	800928c <_vfiprintf_r+0x20>
 80092cc:	4b79      	ldr	r3, [pc, #484]	; (80094b4 <_vfiprintf_r+0x248>)
 80092ce:	429d      	cmp	r5, r3
 80092d0:	bf08      	it	eq
 80092d2:	68f5      	ldreq	r5, [r6, #12]
 80092d4:	e7da      	b.n	800928c <_vfiprintf_r+0x20>
 80092d6:	89ab      	ldrh	r3, [r5, #12]
 80092d8:	0598      	lsls	r0, r3, #22
 80092da:	d4ed      	bmi.n	80092b8 <_vfiprintf_r+0x4c>
 80092dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092de:	f7ff faa5 	bl	800882c <__retarget_lock_release_recursive>
 80092e2:	e7e9      	b.n	80092b8 <_vfiprintf_r+0x4c>
 80092e4:	2300      	movs	r3, #0
 80092e6:	9309      	str	r3, [sp, #36]	; 0x24
 80092e8:	2320      	movs	r3, #32
 80092ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80092f2:	2330      	movs	r3, #48	; 0x30
 80092f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80094b8 <_vfiprintf_r+0x24c>
 80092f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092fc:	f04f 0901 	mov.w	r9, #1
 8009300:	4623      	mov	r3, r4
 8009302:	469a      	mov	sl, r3
 8009304:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009308:	b10a      	cbz	r2, 800930e <_vfiprintf_r+0xa2>
 800930a:	2a25      	cmp	r2, #37	; 0x25
 800930c:	d1f9      	bne.n	8009302 <_vfiprintf_r+0x96>
 800930e:	ebba 0b04 	subs.w	fp, sl, r4
 8009312:	d00b      	beq.n	800932c <_vfiprintf_r+0xc0>
 8009314:	465b      	mov	r3, fp
 8009316:	4622      	mov	r2, r4
 8009318:	4629      	mov	r1, r5
 800931a:	4630      	mov	r0, r6
 800931c:	f7ff ff93 	bl	8009246 <__sfputs_r>
 8009320:	3001      	adds	r0, #1
 8009322:	f000 80aa 	beq.w	800947a <_vfiprintf_r+0x20e>
 8009326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009328:	445a      	add	r2, fp
 800932a:	9209      	str	r2, [sp, #36]	; 0x24
 800932c:	f89a 3000 	ldrb.w	r3, [sl]
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 80a2 	beq.w	800947a <_vfiprintf_r+0x20e>
 8009336:	2300      	movs	r3, #0
 8009338:	f04f 32ff 	mov.w	r2, #4294967295
 800933c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009340:	f10a 0a01 	add.w	sl, sl, #1
 8009344:	9304      	str	r3, [sp, #16]
 8009346:	9307      	str	r3, [sp, #28]
 8009348:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800934c:	931a      	str	r3, [sp, #104]	; 0x68
 800934e:	4654      	mov	r4, sl
 8009350:	2205      	movs	r2, #5
 8009352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009356:	4858      	ldr	r0, [pc, #352]	; (80094b8 <_vfiprintf_r+0x24c>)
 8009358:	f7f6 ff52 	bl	8000200 <memchr>
 800935c:	9a04      	ldr	r2, [sp, #16]
 800935e:	b9d8      	cbnz	r0, 8009398 <_vfiprintf_r+0x12c>
 8009360:	06d1      	lsls	r1, r2, #27
 8009362:	bf44      	itt	mi
 8009364:	2320      	movmi	r3, #32
 8009366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800936a:	0713      	lsls	r3, r2, #28
 800936c:	bf44      	itt	mi
 800936e:	232b      	movmi	r3, #43	; 0x2b
 8009370:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009374:	f89a 3000 	ldrb.w	r3, [sl]
 8009378:	2b2a      	cmp	r3, #42	; 0x2a
 800937a:	d015      	beq.n	80093a8 <_vfiprintf_r+0x13c>
 800937c:	9a07      	ldr	r2, [sp, #28]
 800937e:	4654      	mov	r4, sl
 8009380:	2000      	movs	r0, #0
 8009382:	f04f 0c0a 	mov.w	ip, #10
 8009386:	4621      	mov	r1, r4
 8009388:	f811 3b01 	ldrb.w	r3, [r1], #1
 800938c:	3b30      	subs	r3, #48	; 0x30
 800938e:	2b09      	cmp	r3, #9
 8009390:	d94e      	bls.n	8009430 <_vfiprintf_r+0x1c4>
 8009392:	b1b0      	cbz	r0, 80093c2 <_vfiprintf_r+0x156>
 8009394:	9207      	str	r2, [sp, #28]
 8009396:	e014      	b.n	80093c2 <_vfiprintf_r+0x156>
 8009398:	eba0 0308 	sub.w	r3, r0, r8
 800939c:	fa09 f303 	lsl.w	r3, r9, r3
 80093a0:	4313      	orrs	r3, r2
 80093a2:	9304      	str	r3, [sp, #16]
 80093a4:	46a2      	mov	sl, r4
 80093a6:	e7d2      	b.n	800934e <_vfiprintf_r+0xe2>
 80093a8:	9b03      	ldr	r3, [sp, #12]
 80093aa:	1d19      	adds	r1, r3, #4
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	9103      	str	r1, [sp, #12]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	bfbb      	ittet	lt
 80093b4:	425b      	neglt	r3, r3
 80093b6:	f042 0202 	orrlt.w	r2, r2, #2
 80093ba:	9307      	strge	r3, [sp, #28]
 80093bc:	9307      	strlt	r3, [sp, #28]
 80093be:	bfb8      	it	lt
 80093c0:	9204      	strlt	r2, [sp, #16]
 80093c2:	7823      	ldrb	r3, [r4, #0]
 80093c4:	2b2e      	cmp	r3, #46	; 0x2e
 80093c6:	d10c      	bne.n	80093e2 <_vfiprintf_r+0x176>
 80093c8:	7863      	ldrb	r3, [r4, #1]
 80093ca:	2b2a      	cmp	r3, #42	; 0x2a
 80093cc:	d135      	bne.n	800943a <_vfiprintf_r+0x1ce>
 80093ce:	9b03      	ldr	r3, [sp, #12]
 80093d0:	1d1a      	adds	r2, r3, #4
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	9203      	str	r2, [sp, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	bfb8      	it	lt
 80093da:	f04f 33ff 	movlt.w	r3, #4294967295
 80093de:	3402      	adds	r4, #2
 80093e0:	9305      	str	r3, [sp, #20]
 80093e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80094c8 <_vfiprintf_r+0x25c>
 80093e6:	7821      	ldrb	r1, [r4, #0]
 80093e8:	2203      	movs	r2, #3
 80093ea:	4650      	mov	r0, sl
 80093ec:	f7f6 ff08 	bl	8000200 <memchr>
 80093f0:	b140      	cbz	r0, 8009404 <_vfiprintf_r+0x198>
 80093f2:	2340      	movs	r3, #64	; 0x40
 80093f4:	eba0 000a 	sub.w	r0, r0, sl
 80093f8:	fa03 f000 	lsl.w	r0, r3, r0
 80093fc:	9b04      	ldr	r3, [sp, #16]
 80093fe:	4303      	orrs	r3, r0
 8009400:	3401      	adds	r4, #1
 8009402:	9304      	str	r3, [sp, #16]
 8009404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009408:	482c      	ldr	r0, [pc, #176]	; (80094bc <_vfiprintf_r+0x250>)
 800940a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800940e:	2206      	movs	r2, #6
 8009410:	f7f6 fef6 	bl	8000200 <memchr>
 8009414:	2800      	cmp	r0, #0
 8009416:	d03f      	beq.n	8009498 <_vfiprintf_r+0x22c>
 8009418:	4b29      	ldr	r3, [pc, #164]	; (80094c0 <_vfiprintf_r+0x254>)
 800941a:	bb1b      	cbnz	r3, 8009464 <_vfiprintf_r+0x1f8>
 800941c:	9b03      	ldr	r3, [sp, #12]
 800941e:	3307      	adds	r3, #7
 8009420:	f023 0307 	bic.w	r3, r3, #7
 8009424:	3308      	adds	r3, #8
 8009426:	9303      	str	r3, [sp, #12]
 8009428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800942a:	443b      	add	r3, r7
 800942c:	9309      	str	r3, [sp, #36]	; 0x24
 800942e:	e767      	b.n	8009300 <_vfiprintf_r+0x94>
 8009430:	fb0c 3202 	mla	r2, ip, r2, r3
 8009434:	460c      	mov	r4, r1
 8009436:	2001      	movs	r0, #1
 8009438:	e7a5      	b.n	8009386 <_vfiprintf_r+0x11a>
 800943a:	2300      	movs	r3, #0
 800943c:	3401      	adds	r4, #1
 800943e:	9305      	str	r3, [sp, #20]
 8009440:	4619      	mov	r1, r3
 8009442:	f04f 0c0a 	mov.w	ip, #10
 8009446:	4620      	mov	r0, r4
 8009448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800944c:	3a30      	subs	r2, #48	; 0x30
 800944e:	2a09      	cmp	r2, #9
 8009450:	d903      	bls.n	800945a <_vfiprintf_r+0x1ee>
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0c5      	beq.n	80093e2 <_vfiprintf_r+0x176>
 8009456:	9105      	str	r1, [sp, #20]
 8009458:	e7c3      	b.n	80093e2 <_vfiprintf_r+0x176>
 800945a:	fb0c 2101 	mla	r1, ip, r1, r2
 800945e:	4604      	mov	r4, r0
 8009460:	2301      	movs	r3, #1
 8009462:	e7f0      	b.n	8009446 <_vfiprintf_r+0x1da>
 8009464:	ab03      	add	r3, sp, #12
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	462a      	mov	r2, r5
 800946a:	4b16      	ldr	r3, [pc, #88]	; (80094c4 <_vfiprintf_r+0x258>)
 800946c:	a904      	add	r1, sp, #16
 800946e:	4630      	mov	r0, r6
 8009470:	f7fd fc34 	bl	8006cdc <_printf_float>
 8009474:	4607      	mov	r7, r0
 8009476:	1c78      	adds	r0, r7, #1
 8009478:	d1d6      	bne.n	8009428 <_vfiprintf_r+0x1bc>
 800947a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800947c:	07d9      	lsls	r1, r3, #31
 800947e:	d405      	bmi.n	800948c <_vfiprintf_r+0x220>
 8009480:	89ab      	ldrh	r3, [r5, #12]
 8009482:	059a      	lsls	r2, r3, #22
 8009484:	d402      	bmi.n	800948c <_vfiprintf_r+0x220>
 8009486:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009488:	f7ff f9d0 	bl	800882c <__retarget_lock_release_recursive>
 800948c:	89ab      	ldrh	r3, [r5, #12]
 800948e:	065b      	lsls	r3, r3, #25
 8009490:	f53f af12 	bmi.w	80092b8 <_vfiprintf_r+0x4c>
 8009494:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009496:	e711      	b.n	80092bc <_vfiprintf_r+0x50>
 8009498:	ab03      	add	r3, sp, #12
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	462a      	mov	r2, r5
 800949e:	4b09      	ldr	r3, [pc, #36]	; (80094c4 <_vfiprintf_r+0x258>)
 80094a0:	a904      	add	r1, sp, #16
 80094a2:	4630      	mov	r0, r6
 80094a4:	f7fd febe 	bl	8007224 <_printf_i>
 80094a8:	e7e4      	b.n	8009474 <_vfiprintf_r+0x208>
 80094aa:	bf00      	nop
 80094ac:	08009a18 	.word	0x08009a18
 80094b0:	08009a38 	.word	0x08009a38
 80094b4:	080099f8 	.word	0x080099f8
 80094b8:	08009bb4 	.word	0x08009bb4
 80094bc:	08009bbe 	.word	0x08009bbe
 80094c0:	08006cdd 	.word	0x08006cdd
 80094c4:	08009247 	.word	0x08009247
 80094c8:	08009bba 	.word	0x08009bba

080094cc <_sbrk_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	4d06      	ldr	r5, [pc, #24]	; (80094e8 <_sbrk_r+0x1c>)
 80094d0:	2300      	movs	r3, #0
 80094d2:	4604      	mov	r4, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	602b      	str	r3, [r5, #0]
 80094d8:	f7f8 f96c 	bl	80017b4 <_sbrk>
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	d102      	bne.n	80094e6 <_sbrk_r+0x1a>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	b103      	cbz	r3, 80094e6 <_sbrk_r+0x1a>
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	bd38      	pop	{r3, r4, r5, pc}
 80094e8:	20000558 	.word	0x20000558

080094ec <__sread>:
 80094ec:	b510      	push	{r4, lr}
 80094ee:	460c      	mov	r4, r1
 80094f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f4:	f000 f8ba 	bl	800966c <_read_r>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	bfab      	itete	ge
 80094fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009500:	181b      	addge	r3, r3, r0
 8009502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009506:	bfac      	ite	ge
 8009508:	6563      	strge	r3, [r4, #84]	; 0x54
 800950a:	81a3      	strhlt	r3, [r4, #12]
 800950c:	bd10      	pop	{r4, pc}

0800950e <__swrite>:
 800950e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009512:	461f      	mov	r7, r3
 8009514:	898b      	ldrh	r3, [r1, #12]
 8009516:	05db      	lsls	r3, r3, #23
 8009518:	4605      	mov	r5, r0
 800951a:	460c      	mov	r4, r1
 800951c:	4616      	mov	r6, r2
 800951e:	d505      	bpl.n	800952c <__swrite+0x1e>
 8009520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009524:	2302      	movs	r3, #2
 8009526:	2200      	movs	r2, #0
 8009528:	f000 f870 	bl	800960c <_lseek_r>
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009536:	81a3      	strh	r3, [r4, #12]
 8009538:	4632      	mov	r2, r6
 800953a:	463b      	mov	r3, r7
 800953c:	4628      	mov	r0, r5
 800953e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009542:	f000 b817 	b.w	8009574 <_write_r>

08009546 <__sseek>:
 8009546:	b510      	push	{r4, lr}
 8009548:	460c      	mov	r4, r1
 800954a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800954e:	f000 f85d 	bl	800960c <_lseek_r>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	bf15      	itete	ne
 8009558:	6560      	strne	r0, [r4, #84]	; 0x54
 800955a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800955e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009562:	81a3      	strheq	r3, [r4, #12]
 8009564:	bf18      	it	ne
 8009566:	81a3      	strhne	r3, [r4, #12]
 8009568:	bd10      	pop	{r4, pc}

0800956a <__sclose>:
 800956a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800956e:	f000 b81b 	b.w	80095a8 <_close_r>
	...

08009574 <_write_r>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	4d07      	ldr	r5, [pc, #28]	; (8009594 <_write_r+0x20>)
 8009578:	4604      	mov	r4, r0
 800957a:	4608      	mov	r0, r1
 800957c:	4611      	mov	r1, r2
 800957e:	2200      	movs	r2, #0
 8009580:	602a      	str	r2, [r5, #0]
 8009582:	461a      	mov	r2, r3
 8009584:	f7f8 f8c5 	bl	8001712 <_write>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d102      	bne.n	8009592 <_write_r+0x1e>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	b103      	cbz	r3, 8009592 <_write_r+0x1e>
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	20000558 	.word	0x20000558

08009598 <abort>:
 8009598:	b508      	push	{r3, lr}
 800959a:	2006      	movs	r0, #6
 800959c:	f000 f8a0 	bl	80096e0 <raise>
 80095a0:	2001      	movs	r0, #1
 80095a2:	f7f8 f88f 	bl	80016c4 <_exit>
	...

080095a8 <_close_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4d06      	ldr	r5, [pc, #24]	; (80095c4 <_close_r+0x1c>)
 80095ac:	2300      	movs	r3, #0
 80095ae:	4604      	mov	r4, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	602b      	str	r3, [r5, #0]
 80095b4:	f7f8 f8c9 	bl	800174a <_close>
 80095b8:	1c43      	adds	r3, r0, #1
 80095ba:	d102      	bne.n	80095c2 <_close_r+0x1a>
 80095bc:	682b      	ldr	r3, [r5, #0]
 80095be:	b103      	cbz	r3, 80095c2 <_close_r+0x1a>
 80095c0:	6023      	str	r3, [r4, #0]
 80095c2:	bd38      	pop	{r3, r4, r5, pc}
 80095c4:	20000558 	.word	0x20000558

080095c8 <_fstat_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	4d07      	ldr	r5, [pc, #28]	; (80095e8 <_fstat_r+0x20>)
 80095cc:	2300      	movs	r3, #0
 80095ce:	4604      	mov	r4, r0
 80095d0:	4608      	mov	r0, r1
 80095d2:	4611      	mov	r1, r2
 80095d4:	602b      	str	r3, [r5, #0]
 80095d6:	f7f8 f8c4 	bl	8001762 <_fstat>
 80095da:	1c43      	adds	r3, r0, #1
 80095dc:	d102      	bne.n	80095e4 <_fstat_r+0x1c>
 80095de:	682b      	ldr	r3, [r5, #0]
 80095e0:	b103      	cbz	r3, 80095e4 <_fstat_r+0x1c>
 80095e2:	6023      	str	r3, [r4, #0]
 80095e4:	bd38      	pop	{r3, r4, r5, pc}
 80095e6:	bf00      	nop
 80095e8:	20000558 	.word	0x20000558

080095ec <_isatty_r>:
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	4d06      	ldr	r5, [pc, #24]	; (8009608 <_isatty_r+0x1c>)
 80095f0:	2300      	movs	r3, #0
 80095f2:	4604      	mov	r4, r0
 80095f4:	4608      	mov	r0, r1
 80095f6:	602b      	str	r3, [r5, #0]
 80095f8:	f7f8 f8c3 	bl	8001782 <_isatty>
 80095fc:	1c43      	adds	r3, r0, #1
 80095fe:	d102      	bne.n	8009606 <_isatty_r+0x1a>
 8009600:	682b      	ldr	r3, [r5, #0]
 8009602:	b103      	cbz	r3, 8009606 <_isatty_r+0x1a>
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	20000558 	.word	0x20000558

0800960c <_lseek_r>:
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	4d07      	ldr	r5, [pc, #28]	; (800962c <_lseek_r+0x20>)
 8009610:	4604      	mov	r4, r0
 8009612:	4608      	mov	r0, r1
 8009614:	4611      	mov	r1, r2
 8009616:	2200      	movs	r2, #0
 8009618:	602a      	str	r2, [r5, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	f7f8 f8bc 	bl	8001798 <_lseek>
 8009620:	1c43      	adds	r3, r0, #1
 8009622:	d102      	bne.n	800962a <_lseek_r+0x1e>
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	b103      	cbz	r3, 800962a <_lseek_r+0x1e>
 8009628:	6023      	str	r3, [r4, #0]
 800962a:	bd38      	pop	{r3, r4, r5, pc}
 800962c:	20000558 	.word	0x20000558

08009630 <__ascii_mbtowc>:
 8009630:	b082      	sub	sp, #8
 8009632:	b901      	cbnz	r1, 8009636 <__ascii_mbtowc+0x6>
 8009634:	a901      	add	r1, sp, #4
 8009636:	b142      	cbz	r2, 800964a <__ascii_mbtowc+0x1a>
 8009638:	b14b      	cbz	r3, 800964e <__ascii_mbtowc+0x1e>
 800963a:	7813      	ldrb	r3, [r2, #0]
 800963c:	600b      	str	r3, [r1, #0]
 800963e:	7812      	ldrb	r2, [r2, #0]
 8009640:	1e10      	subs	r0, r2, #0
 8009642:	bf18      	it	ne
 8009644:	2001      	movne	r0, #1
 8009646:	b002      	add	sp, #8
 8009648:	4770      	bx	lr
 800964a:	4610      	mov	r0, r2
 800964c:	e7fb      	b.n	8009646 <__ascii_mbtowc+0x16>
 800964e:	f06f 0001 	mvn.w	r0, #1
 8009652:	e7f8      	b.n	8009646 <__ascii_mbtowc+0x16>

08009654 <__malloc_lock>:
 8009654:	4801      	ldr	r0, [pc, #4]	; (800965c <__malloc_lock+0x8>)
 8009656:	f7ff b8e8 	b.w	800882a <__retarget_lock_acquire_recursive>
 800965a:	bf00      	nop
 800965c:	2000054c 	.word	0x2000054c

08009660 <__malloc_unlock>:
 8009660:	4801      	ldr	r0, [pc, #4]	; (8009668 <__malloc_unlock+0x8>)
 8009662:	f7ff b8e3 	b.w	800882c <__retarget_lock_release_recursive>
 8009666:	bf00      	nop
 8009668:	2000054c 	.word	0x2000054c

0800966c <_read_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	4d07      	ldr	r5, [pc, #28]	; (800968c <_read_r+0x20>)
 8009670:	4604      	mov	r4, r0
 8009672:	4608      	mov	r0, r1
 8009674:	4611      	mov	r1, r2
 8009676:	2200      	movs	r2, #0
 8009678:	602a      	str	r2, [r5, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	f7f8 f82c 	bl	80016d8 <_read>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d102      	bne.n	800968a <_read_r+0x1e>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	b103      	cbz	r3, 800968a <_read_r+0x1e>
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	20000558 	.word	0x20000558

08009690 <_raise_r>:
 8009690:	291f      	cmp	r1, #31
 8009692:	b538      	push	{r3, r4, r5, lr}
 8009694:	4604      	mov	r4, r0
 8009696:	460d      	mov	r5, r1
 8009698:	d904      	bls.n	80096a4 <_raise_r+0x14>
 800969a:	2316      	movs	r3, #22
 800969c:	6003      	str	r3, [r0, #0]
 800969e:	f04f 30ff 	mov.w	r0, #4294967295
 80096a2:	bd38      	pop	{r3, r4, r5, pc}
 80096a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80096a6:	b112      	cbz	r2, 80096ae <_raise_r+0x1e>
 80096a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096ac:	b94b      	cbnz	r3, 80096c2 <_raise_r+0x32>
 80096ae:	4620      	mov	r0, r4
 80096b0:	f000 f830 	bl	8009714 <_getpid_r>
 80096b4:	462a      	mov	r2, r5
 80096b6:	4601      	mov	r1, r0
 80096b8:	4620      	mov	r0, r4
 80096ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096be:	f000 b817 	b.w	80096f0 <_kill_r>
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d00a      	beq.n	80096dc <_raise_r+0x4c>
 80096c6:	1c59      	adds	r1, r3, #1
 80096c8:	d103      	bne.n	80096d2 <_raise_r+0x42>
 80096ca:	2316      	movs	r3, #22
 80096cc:	6003      	str	r3, [r0, #0]
 80096ce:	2001      	movs	r0, #1
 80096d0:	e7e7      	b.n	80096a2 <_raise_r+0x12>
 80096d2:	2400      	movs	r4, #0
 80096d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80096d8:	4628      	mov	r0, r5
 80096da:	4798      	blx	r3
 80096dc:	2000      	movs	r0, #0
 80096de:	e7e0      	b.n	80096a2 <_raise_r+0x12>

080096e0 <raise>:
 80096e0:	4b02      	ldr	r3, [pc, #8]	; (80096ec <raise+0xc>)
 80096e2:	4601      	mov	r1, r0
 80096e4:	6818      	ldr	r0, [r3, #0]
 80096e6:	f7ff bfd3 	b.w	8009690 <_raise_r>
 80096ea:	bf00      	nop
 80096ec:	2000003c 	.word	0x2000003c

080096f0 <_kill_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4d07      	ldr	r5, [pc, #28]	; (8009710 <_kill_r+0x20>)
 80096f4:	2300      	movs	r3, #0
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	4611      	mov	r1, r2
 80096fc:	602b      	str	r3, [r5, #0]
 80096fe:	f7f7 ffd1 	bl	80016a4 <_kill>
 8009702:	1c43      	adds	r3, r0, #1
 8009704:	d102      	bne.n	800970c <_kill_r+0x1c>
 8009706:	682b      	ldr	r3, [r5, #0]
 8009708:	b103      	cbz	r3, 800970c <_kill_r+0x1c>
 800970a:	6023      	str	r3, [r4, #0]
 800970c:	bd38      	pop	{r3, r4, r5, pc}
 800970e:	bf00      	nop
 8009710:	20000558 	.word	0x20000558

08009714 <_getpid_r>:
 8009714:	f7f7 bfbe 	b.w	8001694 <_getpid>

08009718 <__ascii_wctomb>:
 8009718:	b149      	cbz	r1, 800972e <__ascii_wctomb+0x16>
 800971a:	2aff      	cmp	r2, #255	; 0xff
 800971c:	bf85      	ittet	hi
 800971e:	238a      	movhi	r3, #138	; 0x8a
 8009720:	6003      	strhi	r3, [r0, #0]
 8009722:	700a      	strbls	r2, [r1, #0]
 8009724:	f04f 30ff 	movhi.w	r0, #4294967295
 8009728:	bf98      	it	ls
 800972a:	2001      	movls	r0, #1
 800972c:	4770      	bx	lr
 800972e:	4608      	mov	r0, r1
 8009730:	4770      	bx	lr
	...

08009734 <_init>:
 8009734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009736:	bf00      	nop
 8009738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800973a:	bc08      	pop	{r3}
 800973c:	469e      	mov	lr, r3
 800973e:	4770      	bx	lr

08009740 <_fini>:
 8009740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009742:	bf00      	nop
 8009744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009746:	bc08      	pop	{r3}
 8009748:	469e      	mov	lr, r3
 800974a:	4770      	bx	lr
